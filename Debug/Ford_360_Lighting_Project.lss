
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800110  00800110  0000115a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000314e  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181e  00000000  00000000  00004686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd0  00000000  00000000  00005ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  00007b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e1f  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017cd  00000000  00000000  00009143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
       4:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_1>
       8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
       c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_3>
      10:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_4>
      14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_9>
      28:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_10>
      2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      30:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_12>
      34:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_13>
      38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_15>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_16>
      44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
      50:	11 24       	eor	r1, r1
      52:	1f be       	out	0x3f, r1	; 63
      54:	cf ef       	ldi	r28, 0xFF	; 255
      56:	d2 e0       	ldi	r29, 0x02	; 2
      58:	de bf       	out	0x3e, r29	; 62
      5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
      5c:	11 e0       	ldi	r17, 0x01	; 1
      5e:	a0 e0       	ldi	r26, 0x00	; 0
      60:	b1 e0       	ldi	r27, 0x01	; 1
      62:	e6 eb       	ldi	r30, 0xB6	; 182
      64:	f0 e1       	ldi	r31, 0x10	; 16
      66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
      68:	05 90       	lpm	r0, Z+
      6a:	0d 92       	st	X+, r0
      6c:	a0 31       	cpi	r26, 0x10	; 16
      6e:	b1 07       	cpc	r27, r17
      70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
      72:	21 e0       	ldi	r18, 0x01	; 1
      74:	a0 e1       	ldi	r26, 0x10	; 16
      76:	b1 e0       	ldi	r27, 0x01	; 1
      78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
      7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
      7c:	a1 3a       	cpi	r26, 0xA1	; 161
      7e:	b2 07       	cpc	r27, r18
      80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
      82:	0e 94 3b 04 	call	0x876	; 0x876 <main>
      86:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_exit>

0000008a <__bad_interrupt>:
      8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Init_ADC_Module>:

****************************************************************************/
void Start_ADC_Measurement(void)
{
    // Writing this bit kicks off the ADC measurement
    ADCSRA |= (1<<ADSC);
      8e:	ec e7       	ldi	r30, 0x7C	; 124
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	80 81       	ld	r24, Z
      94:	8f 7b       	andi	r24, 0xBF	; 191
      96:	80 83       	st	Z, r24
      98:	a7 e7       	ldi	r26, 0x77	; 119
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	8c 91       	ld	r24, X
      9e:	8b 7f       	andi	r24, 0xFB	; 251
      a0:	8c 93       	st	X, r24
      a2:	80 81       	ld	r24, Z
      a4:	88 60       	ori	r24, 0x08	; 8
      a6:	80 83       	st	Z, r24
      a8:	80 81       	ld	r24, Z
      aa:	88 7f       	andi	r24, 0xF8	; 248
      ac:	80 83       	st	Z, r24
      ae:	ea e7       	ldi	r30, 0x7A	; 122
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	88 68       	ori	r24, 0x88	; 136
      b6:	80 83       	st	Z, r24
      b8:	80 81       	ld	r24, Z
      ba:	88 7f       	andi	r24, 0xF8	; 248
      bc:	80 83       	st	Z, r24
      be:	08 95       	ret

000000c0 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
      d2:	ea e7       	ldi	r30, 0x7A	; 122
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	80 61       	ori	r24, 0x10	; 16
      da:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
      e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
      ec:	ff 91       	pop	r31
      ee:	ef 91       	pop	r30
      f0:	9f 91       	pop	r25
      f2:	8f 91       	pop	r24
      f4:	0f 90       	pop	r0
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	0f 90       	pop	r0
      fa:	1f 90       	pop	r1
      fc:	18 95       	reti

000000fe <stop_signal>:
    }
    else
    {
        return true;
    }
}
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Set_PWM_Duty_Cycle>
     106:	08 95       	ret

00000108 <Init_Analog_Servo_Driver>:
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	cb 01       	movw	r24, r22
     10e:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
     112:	e3 e8       	ldi	r30, 0x83	; 131
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	8f 7d       	andi	r24, 0xDF	; 223
     11a:	80 83       	st	Z, r24
     11c:	2b 98       	cbi	0x05, 3	; 5
     11e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
     122:	ef e6       	ldi	r30, 0x6F	; 111
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	81 60       	ori	r24, 0x01	; 1
     12a:	80 83       	st	Z, r24
     12c:	6f e7       	ldi	r22, 0x7F	; 127
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	81 e1       	ldi	r24, 0x11	; 17
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 0a 07 	call	0xe14	; 0xe14 <Register_Timer>
     138:	08 95       	ret

0000013a <Move_Analog_Servo_To_Position>:
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	8f 3f       	cpi	r24, 0xFF	; 255
     140:	0f ef       	ldi	r16, 0xFF	; 255
     142:	90 07       	cpc	r25, r16
     144:	09 f4       	brne	.+2      	; 0x148 <Move_Analog_Servo_To_Position+0xe>
     146:	66 c0       	rjmp	.+204    	; 0x214 <Move_Analog_Servo_To_Position+0xda>
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ac 01       	movw	r20, r24
     14e:	bd 01       	movw	r22, r26
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	66 1f       	adc	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	44 0f       	add	r20, r20
     15a:	55 1f       	adc	r21, r21
     15c:	66 1f       	adc	r22, r22
     15e:	77 1f       	adc	r23, r23
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	66 1f       	adc	r22, r22
     166:	77 1f       	adc	r23, r23
     168:	8a 01       	movw	r16, r20
     16a:	9b 01       	movw	r18, r22
     16c:	00 0f       	add	r16, r16
     16e:	11 1f       	adc	r17, r17
     170:	22 1f       	adc	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	00 0f       	add	r16, r16
     176:	11 1f       	adc	r17, r17
     178:	22 1f       	adc	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	40 0f       	add	r20, r16
     17e:	51 1f       	adc	r21, r17
     180:	62 1f       	adc	r22, r18
     182:	73 1f       	adc	r23, r19
     184:	8a 01       	movw	r16, r20
     186:	9b 01       	movw	r18, r22
     188:	00 0f       	add	r16, r16
     18a:	11 1f       	adc	r17, r17
     18c:	22 1f       	adc	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	00 0f       	add	r16, r16
     192:	11 1f       	adc	r17, r17
     194:	22 1f       	adc	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	40 0f       	add	r20, r16
     19a:	51 1f       	adc	r21, r17
     19c:	62 1f       	adc	r22, r18
     19e:	73 1f       	adc	r23, r19
     1a0:	8a 01       	movw	r16, r20
     1a2:	9b 01       	movw	r18, r22
     1a4:	00 0f       	add	r16, r16
     1a6:	11 1f       	adc	r17, r17
     1a8:	22 1f       	adc	r18, r18
     1aa:	33 1f       	adc	r19, r19
     1ac:	00 0f       	add	r16, r16
     1ae:	11 1f       	adc	r17, r17
     1b0:	22 1f       	adc	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	40 0f       	add	r20, r16
     1b6:	51 1f       	adc	r21, r17
     1b8:	62 1f       	adc	r22, r18
     1ba:	73 1f       	adc	r23, r19
     1bc:	8a 01       	movw	r16, r20
     1be:	9b 01       	movw	r18, r22
     1c0:	00 0f       	add	r16, r16
     1c2:	11 1f       	adc	r17, r17
     1c4:	22 1f       	adc	r18, r18
     1c6:	33 1f       	adc	r19, r19
     1c8:	00 0f       	add	r16, r16
     1ca:	11 1f       	adc	r17, r17
     1cc:	22 1f       	adc	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	40 0f       	add	r20, r16
     1d2:	51 1f       	adc	r21, r17
     1d4:	62 1f       	adc	r22, r18
     1d6:	73 1f       	adc	r23, r19
     1d8:	8a 01       	movw	r16, r20
     1da:	9b 01       	movw	r18, r22
     1dc:	08 1b       	sub	r16, r24
     1de:	19 0b       	sbc	r17, r25
     1e0:	2a 0b       	sbc	r18, r26
     1e2:	3b 0b       	sbc	r19, r27
     1e4:	c9 01       	movw	r24, r18
     1e6:	b8 01       	movw	r22, r16
     1e8:	28 e8       	ldi	r18, 0x88	; 136
     1ea:	33 e1       	ldi	r19, 0x13	; 19
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	0e 94 37 08 	call	0x106e	; 0x106e <__udivmodsi4>
     1f4:	87 e8       	ldi	r24, 0x87	; 135
     1f6:	93 e1       	ldi	r25, 0x13	; 19
     1f8:	82 1b       	sub	r24, r18
     1fa:	93 0b       	sbc	r25, r19
     1fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     200:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
     204:	40 ed       	ldi	r20, 0xD0	; 208
     206:	57 e0       	ldi	r21, 0x07	; 7
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	81 e1       	ldi	r24, 0x11	; 17
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <Release_Analog_Servo>:
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	cb 01       	movw	r24, r22
     220:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
     224:	08 95       	ret

00000226 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	8f 93       	push	r24
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
     236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     23a:	88 23       	and	r24, r24
     23c:	19 f0       	breq	.+6      	; 0x244 <__vector_9+0x1e>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	39 f0       	breq	.+14     	; 0x250 <__vector_9+0x2a>
     242:	0c c0       	rjmp	.+24     	; 0x25c <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
     244:	e3 e8       	ldi	r30, 0x83	; 131
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 62       	ori	r24, 0x20	; 32
     24c:	80 83       	st	Z, r24
            break;
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
     250:	e3 e8       	ldi	r30, 0x83	; 131
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	8f 7d       	andi	r24, 0xDF	; 223
     258:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
     25a:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
     25c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     260:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
     262:	83 70       	andi	r24, 0x03	; 3
     264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	8f 91       	pop	r24
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <Init_Buttons>:
    #ifdef PB1_BUTTON_RISE_EVT || PB1_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB1);
    DDRB &= ~(1<<PINB1);
    #endif
    #ifdef PB2_BUTTON_RISE_EVT || PB2_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB2);
     278:	ec e6       	ldi	r30, 0x6C	; 108
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	84 60       	ori	r24, 0x04	; 4
     280:	80 83       	st	Z, r24
    DDRB &= ~(1<<PINB2);
     282:	22 98       	cbi	0x04, 2	; 4
    PCMSK1 |= (1<<PINB7);
    DDRB &= ~(1<<PINB7);
    #endif

    // Sample current state of pins
    Current_Port_A_State = PINA;
     284:	90 b1       	in	r25, 0x00	; 0
     286:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Current_Port_A_State>
    Current_Port_B_State = PINB;
     28a:	83 b1       	in	r24, 0x03	; 3
     28c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>

    // Save current pin state as last pin state
    Last_Port_A_State = Current_Port_A_State;
     290:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Last_Port_A_State>
    Last_Port_B_State = Current_Port_B_State;
     294:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

    // Register our debounce timer
    Register_Timer(&Debounce_Timer, Post_Event);
     298:	6c eb       	ldi	r22, 0xBC	; 188
     29a:	72 e0       	ldi	r23, 0x02	; 2
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 0a 07 	call	0xe14	; 0xe14 <Register_Timer>

    // Enable the pin change interrupts for both ports
    PCICR |= ((1<<PCIE1)|(1<<PCIE0));
     2a4:	e8 e6       	ldi	r30, 0x68	; 104
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	83 60       	ori	r24, 0x03	; 3
     2ac:	80 83       	st	Z, r24
     2ae:	08 95       	ret

000002b0 <Run_Buttons>:
        This function runs events related to the buttons.

****************************************************************************/
void Run_Buttons(uint32_t event)
{
    switch (event)
     2b0:	61 15       	cp	r22, r1
     2b2:	70 42       	sbci	r23, 0x20	; 32
     2b4:	81 05       	cpc	r24, r1
     2b6:	91 05       	cpc	r25, r1
     2b8:	69 f5       	brne	.+90     	; 0x314 <__stack+0x15>
    {
        case EVT_BTN_DEBOUNCE_TIMEOUT:
            // The debounce period has ended.

            // Sample the pins
            Current_Port_A_State = PINA;
     2ba:	80 b1       	in	r24, 0x00	; 0
     2bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Current_Port_A_State>
            Current_Port_B_State = PINB;
     2c0:	83 b1       	in	r24, 0x03	; 3
     2c2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>
            }
            break;

        case B:
            if (    (RISE == change_type) &&
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
     2c6:	84 70       	andi	r24, 0x04	; 4
     2c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Last_Port_B_State>
     2cc:	94 70       	andi	r25, 0x04	; 4
    #ifdef PB1_BUTTON_FALL_EVT
    if (did_pin_change(B,1,FALL)) Post_Event(PB1_BUTTON_FALL_EVT);
    #endif
    // PB2
    #ifdef PB2_BUTTON_RISE_EVT
    if (did_pin_change(B,2,RISE)) Post_Event(PB2_BUTTON_RISE_EVT);
     2ce:	98 17       	cp	r25, r24
     2d0:	30 f4       	brcc	.+12     	; 0x2de <Run_Buttons+0x2e>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	78 e0       	ldi	r23, 0x08	; 8
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 bc 02 	call	0x578	; 0x578 <Post_Event>
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
            {
                return true;
            }
            else if ((FALL == change_type) &&
                    ((Current_Port_B_State&pin_mask) < (Last_Port_B_State&pin_mask))    )
     2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Current_Port_B_State>
     2e2:	94 70       	andi	r25, 0x04	; 4
     2e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Last_Port_B_State>
     2e8:	84 70       	andi	r24, 0x04	; 4
    // PB2
    #ifdef PB2_BUTTON_RISE_EVT
    if (did_pin_change(B,2,RISE)) Post_Event(PB2_BUTTON_RISE_EVT);
    #endif
    #ifdef PB2_BUTTON_FALL_EVT
    if (did_pin_change(B,2,FALL)) Post_Event(PB2_BUTTON_FALL_EVT);
     2ea:	98 17       	cp	r25, r24
     2ec:	30 f4       	brcc	.+12     	; 0x2fa <Run_Buttons+0x4a>
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e1       	ldi	r23, 0x10	; 16
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 bc 02 	call	0x578	; 0x578 <Post_Event>

            // Check for differences, and post events for them
            handle_btn_evts();

            // Save current pin state as last pin state
            Last_Port_A_State = Current_Port_A_State;
     2fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Current_Port_A_State>
     2fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Last_Port_A_State>
            Last_Port_B_State = Current_Port_B_State;
     302:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Current_Port_B_State>
     306:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

            // Re-enable pin change interrupts for port A and port B
            PCICR |= ((1<<PCIE1)|(1<<PCIE0));
     30a:	e8 e6       	ldi	r30, 0x68	; 104
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	83 60       	ori	r24, 0x03	; 3
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
     338:	e8 e6       	ldi	r30, 0x68	; 104
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8e 7f       	andi	r24, 0xFE	; 254
     340:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     342:	4a e0       	ldi	r20, 0x0A	; 10
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
}
     352:	ff 91       	pop	r31
     354:	ef 91       	pop	r30
     356:	bf 91       	pop	r27
     358:	af 91       	pop	r26
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <__vector_4>:

ISR(PCINT1_vect)
{
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
     396:	e8 e6       	ldi	r30, 0x68	; 104
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     3a0:	4a e0       	ldi	r20, 0x0A	; 10
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	7f 91       	pop	r23
     3be:	6f 91       	pop	r22
     3c0:	5f 91       	pop	r21
     3c2:	4f 91       	pop	r20
     3c4:	3f 91       	pop	r19
     3c6:	2f 91       	pop	r18
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <Get_Intensity_Data>:
intensity_data_t Get_Intensity_Data(uint8_t * p_LIN_packet)
{
    intensity_data_t result;
    memcpy(&result, p_LIN_packet+INTENSITY_DATA_INDEX, INTENSITY_DATA_LEN);
    return result;
}
     3d2:	fc 01       	movw	r30, r24
     3d4:	80 81       	ld	r24, Z
     3d6:	08 95       	ret

000003d8 <Get_Position_Data>:
position_data_t Get_Position_Data(uint8_t * p_LIN_packet)
{
    position_data_t result;
    memcpy(&result, p_LIN_packet+POSITION_DATA_INDEX, POSITION_DATA_LEN);
    return result;
}
     3d8:	fc 01       	movw	r30, r24
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	92 81       	ldd	r25, Z+2	; 0x02
     3de:	08 95       	ret

000003e0 <Write_Intensity_Data>:

****************************************************************************/
void Write_Intensity_Data(uint8_t * p_LIN_packet, intensity_data_t data_to_write)
{
    intensity_data_t temp = data_to_write;
    memcpy(p_LIN_packet+INTENSITY_DATA_INDEX, &temp, INTENSITY_DATA_LEN);
     3e0:	fc 01       	movw	r30, r24
     3e2:	60 83       	st	Z, r22
     3e4:	08 95       	ret

000003e6 <Write_Position_Data>:

****************************************************************************/
void Write_Position_Data(uint8_t * p_LIN_packet, position_data_t data_to_write)
{
    position_data_t temp = data_to_write;
    memcpy(p_LIN_packet+POSITION_DATA_INDEX, &temp, POSITION_DATA_LEN);
     3e6:	fc 01       	movw	r30, r24
     3e8:	72 83       	std	Z+2, r23	; 0x02
     3ea:	61 83       	std	Z+1, r22	; 0x01
     3ec:	08 95       	ret

000003ee <Get_Pointer_To_Slave_Data>:
****************************************************************************/
uint8_t * Get_Pointer_To_Slave_Data(uint8_t * p_master_array, uint8_t slave_num)
{
    // This assumes the first section of the master array corresponds
    //  to the lowest slave number (the first slave)
    return (p_master_array+((slave_num-LOWEST_SLAVE_NUMBER)*LIN_PACKET_LEN));
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	61 50       	subi	r22, 0x01	; 1
     3f2:	71 09       	sbc	r23, r1
     3f4:	9b 01       	movw	r18, r22
     3f6:	22 0f       	add	r18, r18
     3f8:	33 1f       	adc	r19, r19
     3fa:	62 0f       	add	r22, r18
     3fc:	73 1f       	adc	r23, r19
}
     3fe:	86 0f       	add	r24, r22
     400:	97 1f       	adc	r25, r23
     402:	08 95       	ret

00000404 <Read_Data_From_EEPROM>:

****************************************************************************/
void Read_Data_From_EEPROM(uint8_t * p_address_in_eeprom, uint8_t * p_values_to_read, uint8_t num_bytes)
{
    // If we're busy, we need to wait until the current task is finished
    if (IsBusy)
     404:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <IsBusy>
     408:	21 11       	cpse	r18, r1
     40a:	19 c0       	rjmp	.+50     	; 0x43e <Read_Data_From_EEPROM+0x3a>
    {
        // @TODO:
    }
    else
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     40c:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     40e:	f8 94       	cli
        {
            // Iterate for all bytes and copy the EEPROM data to the pointer
            //  of the caller
            IsBusy = true;
     410:	21 e0       	ldi	r18, 0x01	; 1
     412:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <IsBusy>
            for (int byte_index = 0; num_bytes > byte_index; byte_index++)
     416:	44 23       	and	r20, r20
     418:	79 f0       	breq	.+30     	; 0x438 <Read_Data_From_EEPROM+0x34>
     41a:	28 2f       	mov	r18, r24
     41c:	39 2f       	mov	r19, r25
     41e:	fb 01       	movw	r30, r22
     420:	64 0f       	add	r22, r20
     422:	71 1d       	adc	r23, r1
            {
                EEAR = (uint16_t) (p_address_in_eeprom+byte_index);
     424:	32 bd       	out	0x22, r19	; 34
     426:	21 bd       	out	0x21, r18	; 33
                EECR |= (1<<EERE);
     428:	f8 9a       	sbi	0x1f, 0	; 31
                *(p_values_to_read+byte_index) = EEDR;
     42a:	80 b5       	in	r24, 0x20	; 32
     42c:	81 93       	st	Z+, r24
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
        {
            // Iterate for all bytes and copy the EEPROM data to the pointer
            //  of the caller
            IsBusy = true;
            for (int byte_index = 0; num_bytes > byte_index; byte_index++)
     432:	e6 17       	cp	r30, r22
     434:	f7 07       	cpc	r31, r23
     436:	b1 f7       	brne	.-20     	; 0x424 <Read_Data_From_EEPROM+0x20>
            {
                EEAR = (uint16_t) (p_address_in_eeprom+byte_index);
                EECR |= (1<<EERE);
                *(p_values_to_read+byte_index) = EEDR;
            }
            IsBusy = false;
     438:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <IsBusy>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     43c:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
     43e:	08 95       	ret

00000440 <start_eeprom_write_byte>:
    Description
        Initiates a write to EEPROM

****************************************************************************/
void start_eeprom_write_byte(uint8_t * p_eeprom, uint8_t * p_value)
{
     440:	9c 01       	movw	r18, r24
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     442:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     444:	f8 94       	cli
    {
        // Set up address and data registers
        EEAR = (uint16_t) p_eeprom;
     446:	32 bd       	out	0x22, r19	; 34
     448:	21 bd       	out	0x21, r18	; 33

        // Write one byte
        EEDR = *p_value;
     44a:	fb 01       	movw	r30, r22
     44c:	80 81       	ld	r24, Z
     44e:	80 bd       	out	0x20, r24	; 32

        // Set Programming mode to erase and write
        //  Erase and write takes 3.4 ms to execute
        EECR = (0<<EEPM1)|(0<<EEPM0);
     450:	1f ba       	out	0x1f, r1	; 31

        // Write logical one to EEMPE to enable master programming, this is
        //  cleared in hardware after 4 cpu cycles
        EECR |= (1<<EEMPE);
     452:	fa 9a       	sbi	0x1f, 2	; 31

        // Kick off EEPROM write by setting EEPE bit and enable the ready interrupt
        //  by setting EERIE bit
        EECR |= (1<<EERIE)|(1<<EEPE);
     454:	8f b3       	in	r24, 0x1f	; 31
     456:	8a 60       	ori	r24, 0x0A	; 10
     458:	8f bb       	out	0x1f, r24	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     45a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     45c:	08 95       	ret

0000045e <Write_Data_To_EEPROM>:
    Description
        Writes data to EEPROM

****************************************************************************/
void Write_Data_To_EEPROM(uint8_t * p_address_in_eeprom, uint8_t * p_values_to_write, uint8_t num_bytes)
{
     45e:	cf 93       	push	r28
    // If we're busy, we need to wait until the current task is finished
    if (IsBusy)
     460:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <IsBusy>
     464:	21 11       	cpse	r18, r1
     466:	11 c0       	rjmp	.+34     	; 0x48a <Write_Data_To_EEPROM+0x2c>
        // @TODO:
    }
    else
    {
        // Do housekeeping for the current write
        IsBusy = true;
     468:	c1 e0       	ldi	r28, 0x01	; 1
     46a:	c0 93 1f 01 	sts	0x011F, r28	; 0x80011f <IsBusy>
        p_Target_EEPROM_Address = p_address_in_eeprom;
     46e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <p_Target_EEPROM_Address+0x1>
     472:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <p_Target_EEPROM_Address>
        p_Caller_Values = p_values_to_write;
     476:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <p_Caller_Values+0x1>
     47a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <p_Caller_Values>
        Num_Bytes_Executed = 0;
        Num_Bytes_Requested = num_bytes;
     47e:	40 93 1d 01 	sts	0x011D, r20	; 0x80011d <Num_Bytes_Requested>

        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     482:	0e 94 20 02 	call	0x440	; 0x440 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     486:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <Num_Bytes_Executed>
    }
}
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <__vector_16>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(EE_RDY_vect)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	cf 93       	push	r28
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
    // Disable the ready interrupts
    EECR &= ~(1<<EERIE);
     4b2:	fb 98       	cbi	0x1f, 3	; 31

    // Check if we've written all the requested values
    if (Num_Bytes_Requested <= Num_Bytes_Executed)
     4b4:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <Num_Bytes_Executed>
     4b8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Num_Bytes_Requested>
     4bc:	c8 17       	cp	r28, r24
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <__vector_16+0x38>
    {
        // We are done writing all the bytes.
        IsBusy = false;
     4c0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <IsBusy>
     4c4:	13 c0       	rjmp	.+38     	; 0x4ec <__vector_16+0x5e>
    }
    else
    {
        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     4c6:	8c 2f       	mov	r24, r28
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <p_Caller_Values>
     4ce:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <p_Caller_Values+0x1>
     4d2:	68 0f       	add	r22, r24
     4d4:	79 1f       	adc	r23, r25
     4d6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <p_Target_EEPROM_Address>
     4da:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <p_Target_EEPROM_Address+0x1>
     4de:	82 0f       	add	r24, r18
     4e0:	93 1f       	adc	r25, r19
     4e2:	0e 94 20 02 	call	0x440	; 0x440 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <Num_Bytes_Executed>
    }
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	cf 91       	pop	r28
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17

****************************************************************************/
static bool is_event_pending(uint32_t event_mask)
{
    // If this event is pending
    if (event_mask == (Pending_Events & event_mask))
     51c:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <Pending_Events>
     520:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <Pending_Events+0x1>
     524:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <Pending_Events+0x2>
     528:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <Pending_Events+0x3>
     52c:	6b 01       	movw	r12, r22
     52e:	7c 01       	movw	r14, r24
     530:	c0 22       	and	r12, r16
     532:	d1 22       	and	r13, r17
     534:	e2 22       	and	r14, r18
     536:	f3 22       	and	r15, r19
     538:	6c 15       	cp	r22, r12
     53a:	7d 05       	cpc	r23, r13
     53c:	8e 05       	cpc	r24, r14
     53e:	9f 05       	cpc	r25, r15
     540:	a1 f4       	brne	.+40     	; 0x56a <process_event_if_pending+0x5a>
    {
        // Clear Event
        Pending_Events &= ~event_mask;
     542:	6b 01       	movw	r12, r22
     544:	7c 01       	movw	r14, r24
     546:	c0 94       	com	r12
     548:	d0 94       	com	r13
     54a:	e0 94       	com	r14
     54c:	f0 94       	com	r15
     54e:	0c 21       	and	r16, r12
     550:	1d 21       	and	r17, r13
     552:	2e 21       	and	r18, r14
     554:	3f 21       	and	r19, r15
     556:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <Pending_Events>
     55a:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <Pending_Events+0x1>
     55e:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <Pending_Events+0x2>
     562:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <Pending_Events+0x3>
{
    // If event is pending
    if (is_event_pending(event_mask))
    {
        // Run the services with this event
        Run_Services(event_mask);
     566:	0e 94 3f 03 	call	0x67e	; 0x67e <Run_Services>
    }
}
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
    // Set flag in event list
    Pending_Events |= event_mask;
     57c:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <Pending_Events>
     580:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <Pending_Events+0x1>
     584:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <Pending_Events+0x2>
     588:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <Pending_Events+0x3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	80 2b       	or	r24, r16
     592:	91 2b       	or	r25, r17
     594:	a2 2b       	or	r26, r18
     596:	b3 2b       	or	r27, r19
     598:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Pending_Events>
     59c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Pending_Events+0x1>
     5a0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <Pending_Events+0x2>
     5a4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <Pending_Events+0x3>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
     5ba:	62 e0       	ldi	r22, 0x02	; 2
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
     5c6:	64 e0       	ldi	r22, 0x04	; 4
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
     5d2:	68 e0       	ldi	r22, 0x08	; 8
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
     5de:	60 e1       	ldi	r22, 0x10	; 16
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
     5ea:	60 e2       	ldi	r22, 0x20	; 32
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
     5f6:	60 e4       	ldi	r22, 0x40	; 64
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
     602:	60 e8       	ldi	r22, 0x80	; 128
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	72 e0       	ldi	r23, 0x02	; 2
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	74 e0       	ldi	r23, 0x04	; 4
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	78 e0       	ldi	r23, 0x08	; 8
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e1       	ldi	r23, 0x10	; 16
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e2       	ldi	r23, 0x20	; 32
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
     656:	ab cf       	rjmp	.-170    	; 0x5ae <Run_Events>

00000658 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
     658:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
     65c:	0e 94 2a 04 	call	0x854	; 0x854 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
     660:	0e 94 17 05 	call	0xa2e	; 0xa2e <Init_PWM_Module>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
     664:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
     668:	0e 94 47 00 	call	0x8e	; 0x8e <Init_ADC_Module>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
     66c:	0e 94 84 00 	call	0x108	; 0x108 <Init_Analog_Servo_Driver>
    #endif
    #ifdef INITIALIZER_06
    INITIALIZER_06();
     670:	0e 94 3c 01 	call	0x278	; 0x278 <Init_Buttons>
    #endif
    #ifdef INITIALIZER_07
    INITIALIZER_07();
     674:	0e 94 42 06 	call	0xc84	; 0xc84 <Init_Slave_Service>
    #endif
    #ifdef INITIALIZER_08
    INITIALIZER_08();
     678:	0e 94 94 05 	call	0xb28	; 0xb28 <Init_Slave_Number_Setting_SM>
     67c:	08 95       	ret

0000067e <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
     68a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Run_Buttons>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
     68e:	c7 01       	movw	r24, r14
     690:	b6 01       	movw	r22, r12
     692:	0e 94 6d 06 	call	0xcda	; 0xcda <Run_Slave_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	0e 94 a1 05 	call	0xb42	; 0xb42 <Run_Slave_Number_Setting_SM>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
     6a8:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC01);
     6aa:	e9 e6       	ldi	r30, 0x69	; 105
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	8d 7f       	andi	r24, 0xFD	; 253
     6b2:	80 83       	st	Z, r24
    EICRA |= (1<<ISC00);
     6b4:	80 81       	ld	r24, Z
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
     6ba:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
     6bc:	e0 9a       	sbi	0x1c, 0	; 28
     6be:	08 95       	ret

000006c0 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
     6c0:	1f 92       	push	r1
     6c2:	0f 92       	push	r0
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	0f 92       	push	r0
     6c8:	11 24       	eor	r1, r1
// #############################################################################
// ------------ PRIVATE FUNCTIONS
// #############################################################################
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <Set_Light_Intensity>:
****************************************************************************/
void Set_Light_Intensity(uint8_t requested_intensity)
{
    // Set intensity via PWM
    // If intensity if light off, set 0% duty cycle
    if (LIGHT_OFF == requested_intensity)
     6d4:	81 11       	cpse	r24, r1
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <Set_Light_Intensity+0xc>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, LIGHT_OFF);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Set_PWM_Duty_Cycle>
     6de:	08 95       	ret
    }
    // If intensity is non-zero and less than minimum, set minimum duty cycle
    else if ((LIGHT_OFF < requested_intensity) && (MIN_LIGHT_INTENSITY > requested_intensity))
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
     6e2:	98 0f       	add	r25, r24
     6e4:	9d 31       	cpi	r25, 0x1D	; 29
     6e6:	28 f4       	brcc	.+10     	; 0x6f2 <Set_Light_Intensity+0x1e>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MIN_LIGHT_INTENSITY);
     6e8:	6e e1       	ldi	r22, 0x1E	; 30
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Set_PWM_Duty_Cycle>
     6f0:	08 95       	ret
    }
    // If intensity is greater maximum, set maximum duty cycle
    else if (MAX_LIGHT_INTENSITY < requested_intensity)
     6f2:	85 36       	cpi	r24, 0x65	; 101
     6f4:	28 f0       	brcs	.+10     	; 0x700 <Set_Light_Intensity+0x2c>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MAX_LIGHT_INTENSITY);
     6f6:	64 e6       	ldi	r22, 0x64	; 100
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Set_PWM_Duty_Cycle>
     6fe:	08 95       	ret
    }
    // Otherwise, use the actual intensity parameter as duty cycle
    else
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, requested_intensity);
     700:	68 2f       	mov	r22, r24
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Set_PWM_Duty_Cycle>
     708:	08 95       	ret

0000070a <lin_init>:
        return 0;
    }
    
    Lin_tx_header();            // Set command
    return 1;
}
     70a:	08 98       	cbi	0x01, 0	; 1
     70c:	09 98       	cbi	0x01, 1	; 1
     70e:	10 9a       	sbi	0x02, 0	; 2
     710:	11 9a       	sbi	0x02, 1	; 2
     712:	90 e8       	ldi	r25, 0x80	; 128
     714:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     718:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
     71c:	ed ec       	ldi	r30, 0xCD	; 205
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	10 82       	st	Z, r1
     722:	ae ec       	ldi	r26, 0xCE	; 206
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	1c 92       	st	X, r1
     728:	25 2f       	mov	r18, r21
     72a:	33 27       	eor	r19, r19
     72c:	2c 93       	st	X, r18
     72e:	40 83       	st	Z, r20
     730:	80 34       	cpi	r24, 0x40	; 64
     732:	21 f4       	brne	.+8      	; 0x73c <lin_init+0x32>
     734:	88 e4       	ldi	r24, 0x48	; 72
     736:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     73a:	05 c0       	rjmp	.+10     	; 0x746 <lin_init+0x3c>
     73c:	81 11       	cpse	r24, r1
     73e:	08 c0       	rjmp	.+16     	; 0x750 <lin_init+0x46>
     740:	88 e0       	ldi	r24, 0x08	; 8
     742:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     746:	8f e0       	ldi	r24, 0x0F	; 15
     748:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	08 95       	ret
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	08 95       	ret

00000754 <lin_rx_response>:
//
//  Warning: none
//------------------------------------------------------------------------------
unsigned char lin_rx_response (unsigned char l_type, unsigned char l_len) {                                                                                                         
                                                                                                                                                                      
    if (l_type == LIN_1X) {                                                                                                                                   
     754:	80 34       	cpi	r24, 0x40	; 64
     756:	31 f4       	brne	.+12     	; 0x764 <lin_rx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                        
     758:	e8 ec       	ldi	r30, 0xC8	; 200
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	80 64       	ori	r24, 0x40	; 64
     760:	80 83       	st	Z, r24
     762:	09 c0       	rjmp	.+18     	; 0x776 <lin_rx_response+0x22>
    } else if (l_type == LIN_2X) {                                                                                                                            
     764:	81 11       	cpse	r24, r1
     766:	11 c0       	rjmp	.+34     	; 0x78a <lin_rx_response+0x36>
        Lin_2x_set_type();              // Change is necessary                                        
     768:	e8 ec       	ldi	r30, 0xC8	; 200
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	80 83       	st	Z, r24
        Lin_set_rx_len(l_len);                                                                                                                        
     770:	6f 70       	andi	r22, 0x0F	; 15
     772:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
     776:	e8 ec       	ldi	r30, 0xC8	; 200
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8c 7f       	andi	r24, 0xFC	; 252
     77e:	80 83       	st	Z, r24
     780:	80 81       	ld	r24, Z
     782:	82 60       	ori	r24, 0x02	; 2
     784:	80 83       	st	Z, r24
    return 1;                                                                                                                                                 
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                        
    } else if (l_type == LIN_2X) {                                                                                                                            
        Lin_2x_set_type();              // Change is necessary                                        
        Lin_set_rx_len(l_len);                                                                                                                        
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
     78a:	80 e0       	ldi	r24, 0x00	; 0
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
    return 1;                                                                                                                                                 
}
     78c:	08 95       	ret

0000078e <lin_tx_response>:
//------------------------------------------------------------------------------
unsigned char lin_tx_response (unsigned char l_type, unsigned char *l_data, unsigned char l_len) {                                                                                     
                                                                                                                                                                         
unsigned char i;                                                                                                                                                         
                                                                                                                                                                         
    if (l_type == LIN_1X) {                                                                                                                                      
     78e:	80 34       	cpi	r24, 0x40	; 64
     790:	31 f4       	brne	.+12     	; 0x79e <lin_tx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                           
     792:	e8 ec       	ldi	r30, 0xC8	; 200
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	80 64       	ori	r24, 0x40	; 64
     79a:	80 83       	st	Z, r24
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <lin_tx_response+0x26>
    } else if (l_type == LIN_2X) {                                                                                                                               
     79e:	81 11       	cpse	r24, r1
     7a0:	25 c0       	rjmp	.+74     	; 0x7ec <lin_tx_response+0x5e>
        Lin_2x_set_type();				// Change is necessary                                           
     7a2:	e8 ec       	ldi	r30, 0xC8	; 200
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	80 83       	st	Z, r24
        Lin_set_tx_len(l_len);                                                                                                                           
     7aa:	84 2f       	mov	r24, r20
     7ac:	82 95       	swap	r24
     7ae:	80 7f       	andi	r24, 0xF0	; 240
     7b0:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
     7b4:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                                
     7b8:	44 23       	and	r20, r20
     7ba:	71 f0       	breq	.+28     	; 0x7d8 <lin_tx_response+0x4a>
     7bc:	fb 01       	movw	r30, r22
     7be:	41 50       	subi	r20, 0x01	; 1
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	64 0f       	add	r22, r20
     7c8:	75 1f       	adc	r23, r21
        Lin_set_data(*l_data++);                                                                                                                         
     7ca:	a2 ed       	ldi	r26, 0xD2	; 210
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	81 91       	ld	r24, Z+
     7d0:	8c 93       	st	X, r24
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
    for (i = 0; i < l_len; i++) {                                                                                                                                
     7d2:	e6 17       	cp	r30, r22
     7d4:	f7 07       	cpc	r31, r23
     7d6:	d9 f7       	brne	.-10     	; 0x7ce <lin_tx_response+0x40>
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
     7d8:	e8 ec       	ldi	r30, 0xC8	; 200
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	8c 7f       	andi	r24, 0xFC	; 252
     7e0:	80 83       	st	Z, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	83 60       	ori	r24, 0x03	; 3
     7e6:	80 83       	st	Z, r24
    return 1;                                                                                                                                                    
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                           
    } else if (l_type == LIN_2X) {                                                                                                                               
        Lin_2x_set_type();				// Change is necessary                                           
        Lin_set_tx_len(l_len);                                                                                                                           
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
     7ec:	80 e0       	ldi	r24, 0x00	; 0
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
    return 1;                                                                                                                                                    
}
     7ee:	08 95       	ret

000007f0 <lin_get_response>:
//------------------------------------------------------------------------------
void lin_get_response (unsigned char *l_data) {                                                                                                                 
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
     7f0:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
     7f4:	2f 70       	andi	r18, 0x0F	; 15
    Lin_clear_index();                                                                                                                                  
     7f6:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                       
     7fa:	22 23       	and	r18, r18
     7fc:	71 f0       	breq	.+28     	; 0x81a <lin_get_response+0x2a>
     7fe:	fc 01       	movw	r30, r24
     800:	21 50       	subi	r18, 0x01	; 1
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	2f 5f       	subi	r18, 0xFF	; 255
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
        (*l_data++) = Lin_get_data();                                                                                                           
     80c:	a2 ed       	ldi	r26, 0xD2	; 210
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	2c 91       	ld	r18, X
     812:	21 93       	st	Z+, r18
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
    Lin_clear_index();                                                                                                                                  
    for (i = 0; i < l_len; i++) {                                                                                                                       
     814:	e8 17       	cp	r30, r24
     816:	f9 07       	cpc	r31, r25
     818:	d9 f7       	brne	.-10     	; 0x810 <lin_get_response+0x20>
     81a:	08 95       	ret

0000081c <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
     81c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Parity>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	89 27       	eor	r24, r25
     824:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
     828:	81 11       	cpse	r24, r1
     82a:	0a c0       	rjmp	.+20     	; 0x840 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
     82c:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
     82e:	42 e0       	ldi	r20, 0x02	; 2
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	85 e2       	ldi	r24, 0x25	; 37
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
     83e:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
     840:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     842:	43 e2       	ldi	r20, 0x23	; 35
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	85 e2       	ldi	r24, 0x25	; 37
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
     852:	08 95       	ret

00000854 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
     854:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
     856:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
     858:	6e e0       	ldi	r22, 0x0E	; 14
     85a:	74 e0       	ldi	r23, 0x04	; 4
     85c:	85 e2       	ldi	r24, 0x25	; 37
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 0a 07 	call	0xe14	; 0xe14 <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     864:	43 e2       	ldi	r20, 0x23	; 35
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	85 e2       	ldi	r24, 0x25	; 37
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>
     874:	08 95       	ret

00000876 <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
     876:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
     878:	e1 e6       	ldi	r30, 0x61	; 97
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 e8       	ldi	r24, 0x80	; 128
     87e:	80 83       	st	Z, r24
    CLKPR = 0;
     880:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
     882:	0e 94 2c 03 	call	0x658	; 0x658 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
     886:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
     888:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	08 95       	ret

00000892 <MS_LIN_Initialize>:

****************************************************************************/
void Master_LIN_Broadcast_ID(uint8_t slave_id)
{
    // Broadcast the LIN header
    lin_tx_header((OUR_LIN_SPEC), slave_id, 0);
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	7c 01       	movw	r14, r24
     8a0:	8b 01       	movw	r16, r22
     8a2:	ea 01       	movw	r28, r20
     8a4:	14 9a       	sbi	0x02, 4	; 2
     8a6:	0c 9a       	sbi	0x01, 4	; 1
     8a8:	4c e0       	ldi	r20, 0x0C	; 12
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 85 03 	call	0x70a	; 0x70a <lin_init>
     8b6:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <p_My_Node_ID+0x1>
     8ba:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <p_My_Node_ID>
     8be:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <p_My_Command_Data+0x1>
     8c2:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <p_My_Command_Data>
     8c6:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <p_My_Status_Data+0x1>
     8ca:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <p_My_Status_Data>
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <__vector_12>:
    Description
        Handles LIN specific interrupts

****************************************************************************/
ISR(LIN_TC_vect)
{
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
    // Get interrupt cause
    switch (Lin_get_it())
     8fe:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
     902:	8f 70       	andi	r24, 0x0F	; 15
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	09 f4       	brne	.+2      	; 0x90a <__vector_12+0x2e>
     908:	68 c0       	rjmp	.+208    	; 0x9da <__vector_12+0xfe>
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	21 f0       	breq	.+8      	; 0x916 <__vector_12+0x3a>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	09 f0       	breq	.+2      	; 0x914 <__vector_12+0x38>
     912:	66 c0       	rjmp	.+204    	; 0x9e0 <__vector_12+0x104>
     914:	36 c0       	rjmp	.+108    	; 0x982 <__vector_12+0xa6>

****************************************************************************/
static void lin_id_task(void)
{
    // Create copy of ID, make sure this gives only the lower 6 bits
    uint8_t temp_id = Lin_get_id();
     916:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
     91a:	69 2f       	mov	r22, r25
     91c:	6f 73       	andi	r22, 0x3F	; 63

    // This ID matches my ID. It must be a command sent from the master.
    if (temp_id == *p_My_Node_ID)
     91e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <p_My_Node_ID>
     922:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <p_My_Node_ID+0x1>
     926:	80 81       	ld	r24, Z
     928:	68 13       	cpse	r22, r24
     92a:	05 c0       	rjmp	.+10     	; 0x936 <__vector_12+0x5a>
    {
        // Prepare LIN module for receive.
        lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 aa 03 	call	0x754	; 0x754 <lin_rx_response>
     934:	22 c0       	rjmp	.+68     	; 0x97a <__vector_12+0x9e>
    }

    // This ID matches my ID. It must be a status request from the master.
    else if (temp_id == ((*p_My_Node_ID)|REQUEST_MASK))
     936:	28 2f       	mov	r18, r24
     938:	21 60       	ori	r18, 0x01	; 1
     93a:	62 13       	cpse	r22, r18
     93c:	09 c0       	rjmp	.+18     	; 0x950 <__vector_12+0x74>
    {
        // Prepare LIN module for transmit.
        // We must be a slave so My_Command_Data is LIN_PACKET_LEN bytes long only.
        lin_tx_response((OUR_LIN_SPEC), p_My_Status_Data, (LIN_PACKET_LEN));
     93e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <p_My_Status_Data>
     942:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <p_My_Status_Data+0x1>
     946:	43 e0       	ldi	r20, 0x03	; 3
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 c7 03 	call	0x78e	; 0x78e <lin_tx_response>
     94e:	15 c0       	rjmp	.+42     	; 0x97a <__vector_12+0x9e>

    // This ID doesn't match my ID.
    else
    {
        // If we're the master, we must have sent this ID
        if (MASTER_NODE_ID == *p_My_Node_ID)
     950:	81 11       	cpse	r24, r1
     952:	13 c0       	rjmp	.+38     	; 0x97a <__vector_12+0x9e>
        {
            // Prepare LIN module for transmit if we sent a command.
            if (0 == (temp_id & REQUEST_MASK))
     954:	90 fd       	sbrc	r25, 0
     956:	0d c0       	rjmp	.+26     	; 0x972 <__vector_12+0x96>
            {
                // Make sure we send the right command based on the slave ID.
                // The master has a My_Command_Data array that is LIN_PACKET_LEN*n bytes long.
                // Where n is the number of slaves in the system.
                lin_tx_response((OUR_LIN_SPEC), Get_Pointer_To_Slave_Data(p_My_Command_Data, GET_SLAVE_NUMBER(temp_id)), (LIN_PACKET_LEN));
     958:	66 95       	lsr	r22
     95a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <p_My_Command_Data>
     95e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <p_My_Command_Data+0x1>
     962:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Get_Pointer_To_Slave_Data>
     966:	43 e0       	ldi	r20, 0x03	; 3
     968:	bc 01       	movw	r22, r24
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 c7 03 	call	0x78e	; 0x78e <lin_tx_response>
     970:	04 c0       	rjmp	.+8      	; 0x97a <__vector_12+0x9e>
            }
            // Prepare LIN module for receive if we sent a request.
            else
            {
                lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
     972:	63 e0       	ldi	r22, 0x03	; 3
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 aa 03 	call	0x754	; 0x754 <lin_rx_response>
    switch (Lin_get_it())
    {
        // We received an ID
        case LIN_IDOK:
            lin_id_task();
            Lin_clear_idok_it();
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
     980:	2f c0       	rjmp	.+94     	; 0x9e0 <__vector_12+0x104>
****************************************************************************/
static void lin_rx_task(void)
{
    // Copy the rx data to our appropriate data store
    // If we're the master, copy to our status array and post event
    if (MASTER_NODE_ID == *p_My_Node_ID)
     982:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <p_My_Node_ID>
     986:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <p_My_Node_ID+0x1>
     98a:	80 81       	ld	r24, Z
     98c:	81 11       	cpse	r24, r1
     98e:	15 c0       	rjmp	.+42     	; 0x9ba <__vector_12+0xde>
    {
        // TODO: Not entirely sure if the ID is saved during the receive...
        lin_get_response(Get_Pointer_To_Slave_Data(p_My_Status_Data, GET_SLAVE_NUMBER(Lin_get_id())));
     990:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
     994:	6f 73       	andi	r22, 0x3F	; 63
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	75 95       	asr	r23
     99a:	67 95       	ror	r22
     99c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_My_Status_Data>
     9a0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_My_Status_Data+0x1>
     9a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Get_Pointer_To_Slave_Data>
     9a8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lin_get_response>

        // Post event
        Post_Event(EVT_MASTER_NEW_STS);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 bc 02 	call	0x578	; 0x578 <Post_Event>
     9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <__vector_12+0xf6>
    }
    // If we're a slave, copy to our command array and post event
    else
    {
        // Copy command
        lin_get_response(p_My_Command_Data);
     9ba:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <p_My_Command_Data>
     9be:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <p_My_Command_Data+0x1>
     9c2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lin_get_response>

        // Post event
        Post_Event(EVT_SLAVE_NEW_CMD);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 bc 02 	call	0x578	; 0x578 <Post_Event>
            break;

        // We received a data packet
        case LIN_RXOK:
            lin_rx_task();
            Lin_clear_rxok_it();
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__vector_12+0x104>

        // We transmitted a data packet
        case LIN_TXOK:
            lin_tx_task();
            Lin_clear_txok_it();
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>

        // The interrupt did not correspond to LIN
        default:
            break;
    } // End Switch
}
     9e0:	ff 91       	pop	r31
     9e2:	ef 91       	pop	r30
     9e4:	bf 91       	pop	r27
     9e6:	af 91       	pop	r26
     9e8:	9f 91       	pop	r25
     9ea:	8f 91       	pop	r24
     9ec:	7f 91       	pop	r23
     9ee:	6f 91       	pop	r22
     9f0:	5f 91       	pop	r21
     9f2:	4f 91       	pop	r20
     9f4:	3f 91       	pop	r19
     9f6:	2f 91       	pop	r18
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	0f 90       	pop	r0
     9fe:	1f 90       	pop	r1
     a00:	18 95       	reti

00000a02 <__vector_13>:

ISR(LIN_ERR_vect)
{
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	8f 93       	push	r24
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
     a0e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__EEPROM_REGION_LENGTH__+0x7f00cb>

****************************************************************************/
static void lin_err_task(void)
{
    // Increment error count
    My_LIN_Error_Count++;
     a12:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <My_LIN_Error_Count>
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <My_LIN_Error_Count>
ISR(LIN_ERR_vect)
{
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
    lin_err_task();
    Lin_clear_err_it();
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
     a22:	8f 91       	pop	r24
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <Init_PWM_Module>:
{
    // We need to ensure no interrupts occur when accessing 16-bit registers
    // (Just for safety, no ISR should be able to access these registers anyways.)
    // Even though the C code is one line for accessing 16-bit registers,
    //      in ASM it will be done in two cycles.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a2e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a30:	f8 94       	cli
    {
        // Clear Control Register C
        // "However, for ensuring compatibility with future devices,
        //      these bits must be set to zero when TCCR1A is written 
        //      when operating in a PWM mode."
        TCCR1C = 0;
     a32:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>

        // Disable Timer1 interrupts
        TIMSK1 = 0;
     a36:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>

        // Set up pins for PWM output (p. 85)
        TCCR1D = ((1<<PWM_CH_A_PIN_ENABLE)|(1<<PWM_CH_B_PIN_ENABLE));
     a3a:	84 e2       	ldi	r24, 0x24	; 36
     a3c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <__EEPROM_REGION_LENGTH__+0x7f0083>
        DDRB |= ((1<<PWM_CH_A_PIN)|(1<<PWM_CH_B_PIN));
     a40:	84 b1       	in	r24, 0x04	; 4
     a42:	88 61       	ori	r24, 0x18	; 24
     a44:	84 b9       	out	0x04, r24	; 4

        // Set TOP values for A/B counters, executes in 1 asm lines
        ICR1 = TIMER_1_TOP;
     a46:	87 e8       	ldi	r24, 0x87	; 135
     a48:	93 e1       	ldi	r25, 0x13	; 19
     a4a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
     a4e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>

        // Set output compare to value that sets lines low (0% duty cycle)
        OCR1A = OCR_DC_ZERO;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     a5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
        OCR1B = OCR_DC_ZERO;
     a5e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     a62:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
        // Set (COM1A/B[0:1]) for output pin high on match, low on TOP
        //      (Per Table 12-2 on p. 132)
        // Set WGM1[0:3]=1110b to define TOP in ICR1A register.
        //      Define TOP in ICR1 register, instead of OCR1A (explanation on p. 125)
        //      (Run at a fixed frequency with varying duty cycles)
        TCCR1A = ((1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0) \
     a66:	82 ef       	ldi	r24, 0xF2	; 242
     a68:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
                    |(1<<WGM11)|(0<<WGM10));

        // Set WGM1[0:3]=1110b
        TCCR1B = ((1<<WGM13)|(1<<WGM12));
     a6c:	e1 e8       	ldi	r30, 0x81	; 129
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	88 e1       	ldi	r24, 0x18	; 24
     a72:	80 83       	st	Z, r24

        // Start the clock by selecting a prescaler of f_clk/1 (CS10 set)
        // We want to aim for a frequency of 1 kHz
        // PWM freq is:
        //      f_pwm = f_clk/(prescale*(1+TOP))
        TCCR1B |= TIMER_1_PRESCALE;
     a74:	80 81       	ld	r24, Z
     a76:	82 60       	ori	r24, 0x02	; 2
     a78:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a7a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     a7c:	08 95       	ret

00000a7e <Set_PWM_Duty_Cycle>:
void Set_PWM_Duty_Cycle(pwm_channel_t this_channel, uint8_t new_duty_cycle)
{
    // Set OCR1 for the requested channel
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
     a7e:	88 23       	and	r24, r24
     a80:	19 f0       	breq	.+6      	; 0xa88 <Set_PWM_Duty_Cycle+0xa>
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	49 f1       	breq	.+82     	; 0xad8 <Set_PWM_Duty_Cycle+0x5a>
     a86:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
     a88:	64 36       	cpi	r22, 0x64	; 100
     a8a:	e0 f4       	brcc	.+56     	; 0xac4 <Set_PWM_Duty_Cycle+0x46>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	86 0f       	add	r24, r22
     a90:	83 36       	cpi	r24, 0x63	; 99
     a92:	d8 f4       	brcc	.+54     	; 0xaca <Set_PWM_Duty_Cycle+0x4c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	cb 01       	movw	r24, r22
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	68 0f       	add	r22, r24
     aa2:	79 1f       	adc	r23, r25
     aa4:	cb 01       	movw	r24, r22
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	68 0f       	add	r22, r24
     ab0:	79 1f       	adc	r23, r25
     ab2:	66 0f       	add	r22, r22
     ab4:	77 1f       	adc	r23, r23
     ab6:	88 27       	eor	r24, r24
     ab8:	99 27       	eor	r25, r25
     aba:	86 1b       	sub	r24, r22
     abc:	97 0b       	sbc	r25, r23
     abe:	88 57       	subi	r24, 0x78	; 120
     ac0:	9c 4e       	sbci	r25, 0xEC	; 236
     ac2:	05 c0       	rjmp	.+10     	; 0xace <Set_PWM_Duty_Cycle+0x50>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <Set_PWM_Duty_Cycle+0x50>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	9f ef       	ldi	r25, 0xFF	; 255
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
    {
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
     ace:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     ad2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
            break;
     ad6:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
     ad8:	64 36       	cpi	r22, 0x64	; 100
     ada:	e0 f4       	brcc	.+56     	; 0xb14 <Set_PWM_Duty_Cycle+0x96>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	86 0f       	add	r24, r22
     ae0:	83 36       	cpi	r24, 0x63	; 99
     ae2:	d8 f4       	brcc	.+54     	; 0xb1a <Set_PWM_Duty_Cycle+0x9c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	cb 01       	movw	r24, r22
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	68 0f       	add	r22, r24
     af2:	79 1f       	adc	r23, r25
     af4:	cb 01       	movw	r24, r22
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	68 0f       	add	r22, r24
     b00:	79 1f       	adc	r23, r25
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	88 27       	eor	r24, r24
     b08:	99 27       	eor	r25, r25
     b0a:	86 1b       	sub	r24, r22
     b0c:	97 0b       	sbc	r25, r23
     b0e:	88 57       	subi	r24, 0x78	; 120
     b10:	9c 4e       	sbci	r25, 0xEC	; 236
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <Set_PWM_Duty_Cycle+0xa0>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <Set_PWM_Duty_Cycle+0xa0>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	9f ef       	ldi	r25, 0xFF	; 255
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
            break;

        case pwm_channel_b:
            OCR1B = calc_OCR_count(new_duty_cycle);
     b1e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     b22:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
     b26:	08 95       	ret

00000b28 <Init_Slave_Number_Setting_SM>:

****************************************************************************/
void Init_Slave_Number_Setting_SM(void)
{
    // Register timers
    Register_Timer(&Main_Timer, Post_Event);
     b28:	6c eb       	ldi	r22, 0xBC	; 188
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	8a e0       	ldi	r24, 0x0A	; 10
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 0a 07 	call	0xe14	; 0xe14 <Register_Timer>
    Register_Timer(&Auxiliary_Timer, Post_Event);
     b34:	6c eb       	ldi	r22, 0xBC	; 188
     b36:	72 e0       	ldi	r23, 0x02	; 2
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 0a 07 	call	0xe14	; 0xe14 <Register_Timer>
     b40:	08 95       	ret

00000b42 <Run_Slave_Number_Setting_SM>:
        This processes events for the slave number setting state machine.

****************************************************************************/
void Run_Slave_Number_Setting_SM(uint32_t event)
{
    switch (Current_State)
     b42:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <Current_State>
     b46:	21 30       	cpi	r18, 0x01	; 1
     b48:	b1 f0       	breq	.+44     	; 0xb76 <Run_Slave_Number_Setting_SM+0x34>
     b4a:	18 f0       	brcs	.+6      	; 0xb52 <Run_Slave_Number_Setting_SM+0x10>
     b4c:	22 30       	cpi	r18, 0x02	; 2
     b4e:	a1 f1       	breq	.+104    	; 0xbb8 <Run_Slave_Number_Setting_SM+0x76>
     b50:	08 95       	ret
    {
        case IDLE_STATE:

            switch (event)
     b52:	61 15       	cp	r22, r1
     b54:	78 40       	sbci	r23, 0x08	; 8
     b56:	81 05       	cpc	r24, r1
     b58:	91 05       	cpc	r25, r1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <Run_Slave_Number_Setting_SM+0x1c>
     b5c:	83 c0       	rjmp	.+262    	; 0xc64 <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_PRESS:

                    // Start hold time timer
                    Start_Timer(&Auxiliary_Timer, ENTER_MODE_HOLD_TIME_MS);
     b5e:	40 e1       	ldi	r20, 0x10	; 16
     b60:	57 e2       	ldi	r21, 0x27	; 39
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	86 e0       	ldi	r24, 0x06	; 6
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>

                    // Change state to ENTERING_SETTING_MODE_STATE
                    Current_State = ENTERING_SETTING_MODE_STATE;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Current_State>

                    break;
     b74:	08 95       	ret

            break;

        case ENTERING_SETTING_MODE_STATE:

            switch (event)
     b76:	68 30       	cpi	r22, 0x08	; 8
     b78:	71 05       	cpc	r23, r1
     b7a:	81 05       	cpc	r24, r1
     b7c:	91 05       	cpc	r25, r1
     b7e:	69 f0       	breq	.+26     	; 0xb9a <Run_Slave_Number_Setting_SM+0x58>
     b80:	61 15       	cp	r22, r1
     b82:	70 41       	sbci	r23, 0x10	; 16
     b84:	81 05       	cpc	r24, r1
     b86:	91 05       	cpc	r25, r1
     b88:	09 f0       	breq	.+2      	; 0xb8c <Run_Slave_Number_Setting_SM+0x4a>
     b8a:	6c c0       	rjmp	.+216    	; 0xc64 <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_RELEASE:

                    // Stop hold time timer
                    Stop_Timer(&Auxiliary_Timer);
     b8c:	86 e0       	ldi	r24, 0x06	; 6
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 98 07 	call	0xf30	; 0xf30 <Stop_Timer>

                    // Change state to IDLE_STATE
                    Current_State = IDLE_STATE;
     b94:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Current_State>

                    break;
     b98:	08 95       	ret

                case EVT_SETTING_MODE_AUX_TIMEOUT:

                    // Start overall setting mode timer
                    Start_Timer(&Main_Timer, MAX_TIME_IN_MODE_MS);
     b9a:	40 e6       	ldi	r20, 0x60	; 96
     b9c:	5a ee       	ldi	r21, 0xEA	; 234
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
     baa:	8e e1       	ldi	r24, 0x1E	; 30
     bac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

                    // Change state to SETTING_MODE_STATE
                    Current_State = SETTING_MODE_STATE;
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Current_State>

                    break;
     bb6:	08 95       	ret

            break;

        case SETTING_MODE_STATE:

            switch (event)
     bb8:	68 30       	cpi	r22, 0x08	; 8
     bba:	71 05       	cpc	r23, r1
     bbc:	81 05       	cpc	r24, r1
     bbe:	91 05       	cpc	r25, r1
     bc0:	69 f1       	breq	.+90     	; 0xc1c <Run_Slave_Number_Setting_SM+0xda>
     bc2:	38 f4       	brcc	.+14     	; 0xbd2 <Run_Slave_Number_Setting_SM+0x90>
     bc4:	64 30       	cpi	r22, 0x04	; 4
     bc6:	71 05       	cpc	r23, r1
     bc8:	81 05       	cpc	r24, r1
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <Run_Slave_Number_Setting_SM+0x8e>
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <Run_Slave_Number_Setting_SM+0x10c>
     bd0:	08 95       	ret
     bd2:	61 15       	cp	r22, r1
     bd4:	28 e0       	ldi	r18, 0x08	; 8
     bd6:	72 07       	cpc	r23, r18
     bd8:	81 05       	cpc	r24, r1
     bda:	91 05       	cpc	r25, r1
     bdc:	31 f0       	breq	.+12     	; 0xbea <Run_Slave_Number_Setting_SM+0xa8>
     bde:	61 15       	cp	r22, r1
     be0:	70 41       	sbci	r23, 0x10	; 16
     be2:	81 05       	cpc	r24, r1
     be4:	91 05       	cpc	r25, r1
     be6:	69 f0       	breq	.+26     	; 0xc02 <Run_Slave_Number_Setting_SM+0xc0>
     be8:	08 95       	ret

                    // The user pressed the button. Turn on the LED
                    //  and start the timer to check for hold to exit.

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

                    // Start aux timer for exit hold time
                    Start_Timer(&Auxiliary_Timer, EXIT_MODE_HOLD_TIME_MS);
     bf0:	48 e8       	ldi	r20, 0x88	; 136
     bf2:	53 e1       	ldi	r21, 0x13	; 19
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 57 07 	call	0xeae	; 0xeae <Start_Timer>

                    break;
     c00:	08 95       	ret

                    // The user released the button. Turn off the LED,
                    //  increment our counter, and stop the hold timer.

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

                    // Increment release counter
                    Release_Counter++;
     c08:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Release_Counter>
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Release_Counter>

                    // Stop aux timer for exit hold time
                    Stop_Timer(&Auxiliary_Timer);
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 98 07 	call	0xf30	; 0xf30 <Stop_Timer>

                    break;
     c1a:	08 95       	ret
                    // The user held the button and wants
                    //  to exit the mode and set the slave number.

                    // If the Release Counter is greater than number of
                    //  NUM_UNAVOIDABLE_RELEASES, then we got a new slave number
                    if (NUM_UNAVOIDABLE_RELEASES < Release_Counter)
     c1c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Release_Counter>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	48 f0       	brcs	.+18     	; 0xc36 <Run_Slave_Number_Setting_SM+0xf4>
                    {
                        // Save the count-1 as the last set slave number
                        // It is count-1 because we enter this state with the button pressed
                        // so the first release doesn't mean anything
                        Last_Set_Slave_Number = Release_Counter-NUM_UNAVOIDABLE_RELEASES;
     c24:	81 50       	subi	r24, 0x01	; 1
     c26:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Last_Set_Slave_Number>

                        // Post event to slave service to alert that new
                        //  slave number has been set
                        Post_Event(EVT_SLAVE_NUM_SET);
     c2a:	60 e4       	ldi	r22, 0x40	; 64
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 bc 02 	call	0x578	; 0x578 <Post_Event>
                    }

                    // Stop the main timer
                    Stop_Timer(&Main_Timer);
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 98 07 	call	0xf30	; 0xf30 <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
     c44:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
     c48:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Current_State>

                    break;
     c4c:	08 95       	ret
                    // The user did not exit the mode properly within
                    //  the max mode time. Just go back to idle and
                    //  clear the number counter.

                    // Stop the aux timer, in case it was running
                    Stop_Timer(&Auxiliary_Timer);
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 98 07 	call	0xf30	; 0xf30 <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
     c5c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
     c60:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Current_State>
     c64:	08 95       	ret

00000c66 <In_Slave_Number_Setting_Mode>:
                to the LED.

****************************************************************************/
bool In_Slave_Number_Setting_Mode(void)
{
    if (SETTING_MODE_STATE == Current_State) return true;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Current_State>
     c6c:	92 30       	cpi	r25, 0x02	; 2
     c6e:	09 f0       	breq	.+2      	; 0xc72 <In_Slave_Number_Setting_Mode+0xc>
     c70:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
     c72:	08 95       	ret

00000c74 <Get_Last_Set_Slave_Number>:
        This function returns the last set slave number.

****************************************************************************/
uint8_t Get_Last_Set_Slave_Number(void)
{
    if ((LOWEST_SLAVE_NUMBER <= Last_Set_Slave_Number) && (MAX_NUM_SLAVES >= Last_Set_Slave_Number))
     c74:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Last_Set_Slave_Number>
     c78:	9f ef       	ldi	r25, 0xFF	; 255
     c7a:	98 0f       	add	r25, r24
     c7c:	9d 31       	cpi	r25, 0x1D	; 29
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <Get_Last_Set_Slave_Number+0xe>
    {
        return Last_Set_Slave_Number;
    }
    else
    {
        return INVALID_SLAVE_NUMBER;
     c80:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     c82:	08 95       	ret

00000c84 <Init_Slave_Service>:

****************************************************************************/
void Init_Slave_Service(void)
{
    // Initialize command and status arrays
    Write_Intensity_Data(p_My_Command_Data, INTENSITY_NON_COMMAND);
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	85 e3       	ldi	r24, 0x35	; 53
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>
    Write_Position_Data(p_My_Command_Data, POSITION_NON_COMMAND);
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	85 e3       	ldi	r24, 0x35	; 53
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>
    Write_Intensity_Data(p_My_Status_Data, LIGHT_OFF);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	82 e3       	ldi	r24, 0x32	; 50
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>
    Write_Position_Data(p_My_Status_Data, SERVO_STAY);
     ca4:	6f ef       	ldi	r22, 0xFF	; 255
     ca6:	7f ef       	ldi	r23, 0xFF	; 255
     ca8:	82 e3       	ldi	r24, 0x32	; 50
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>

    // Read our slave number from flash
    // @TODO:
    Read_Data_From_EEPROM(0x0000, &My_Node_ID, 1);
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	68 e3       	ldi	r22, 0x38	; 56
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 02 02 	call	0x404	; 0x404 <Read_Data_From_EEPROM>

    // Initialize light to LIGHT_OFF
    Set_Light_Intensity(LIGHT_OFF);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>

    // Release the servo so it does not move
    Release_Analog_Servo();
     cc4:	0e 94 0d 01 	call	0x21a	; 0x21a <Release_Analog_Servo>

    // Initialize LIN
    MS_LIN_Initialize(&My_Node_ID, p_My_Command_Data, p_My_Status_Data);
     cc8:	42 e3       	ldi	r20, 0x32	; 50
     cca:	51 e0       	ldi	r21, 0x01	; 1
     ccc:	65 e3       	ldi	r22, 0x35	; 53
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	88 e3       	ldi	r24, 0x38	; 56
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 49 04 	call	0x892	; 0x892 <MS_LIN_Initialize>
     cd8:	08 95       	ret

00000cda <Run_Slave_Service>:
    Description
        Processes events for the this slave node

****************************************************************************/
void Run_Slave_Service(uint32_t event_mask)
{
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
    switch(event_mask)
     ce0:	61 30       	cpi	r22, 0x01	; 1
     ce2:	71 05       	cpc	r23, r1
     ce4:	81 05       	cpc	r24, r1
     ce6:	91 05       	cpc	r25, r1
     ce8:	01 f1       	breq	.+64     	; 0xd2a <Run_Slave_Service+0x50>
     cea:	60 34       	cpi	r22, 0x40	; 64
     cec:	71 05       	cpc	r23, r1
     cee:	81 05       	cpc	r24, r1
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <Run_Slave_Service+0x1c>
     cf4:	65 c0       	rjmp	.+202    	; 0xdc0 <Run_Slave_Service+0xe6>
    {
        case EVT_SLAVE_NUM_SET:
            // A new ID has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
     cf6:	0e 94 3a 06 	call	0xc74	; 0xc74 <Get_Last_Set_Slave_Number>
     cfa:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <My_Node_ID>
     cfe:	96 95       	lsr	r25
     d00:	89 17       	cp	r24, r25
     d02:	09 f4       	brne	.+2      	; 0xd06 <Run_Slave_Service+0x2c>
     d04:	5d c0       	rjmp	.+186    	; 0xdc0 <Run_Slave_Service+0xe6>
                    &&
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
     d06:	0e 94 3a 06 	call	0xc74	; 0xc74 <Get_Last_Set_Slave_Number>
        case EVT_SLAVE_NUM_SET:
            // A new ID has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
                    &&
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	09 f4       	brne	.+2      	; 0xd10 <Run_Slave_Service+0x36>
     d0e:	58 c0       	rjmp	.+176    	; 0xdc0 <Run_Slave_Service+0xe6>
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
                )
            {
                // Set our ID based on the user set slave number
                My_Node_ID = GET_SLAVE_BASE_ID(Get_Last_Set_Slave_Number());
     d10:	0e 94 3a 06 	call	0xc74	; 0xc74 <Get_Last_Set_Slave_Number>
     d14:	88 0f       	add	r24, r24
     d16:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <My_Node_ID>

                // Save our new ID in flash memory
                Write_Data_To_EEPROM(0x0000, &My_Node_ID, 1);
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	68 e3       	ldi	r22, 0x38	; 56
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 2f 02 	call	0x45e	; 0x45e <Write_Data_To_EEPROM>
     d28:	4b c0       	rjmp	.+150    	; 0xdc0 <Run_Slave_Service+0xe6>

        case EVT_SLAVE_NEW_CMD:
            // We got a new command.

            // Process commands if we're not in the setting mode
            if (!In_Slave_Number_Setting_Mode())
     d2a:	0e 94 33 06 	call	0xc66	; 0xc66 <In_Slave_Number_Setting_Mode>
     d2e:	81 11       	cpse	r24, r1
     d30:	47 c0       	rjmp	.+142    	; 0xdc0 <Run_Slave_Service+0xe6>
****************************************************************************/
static void process_intensity_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d32:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d34:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (INTENSITY_NON_COMMAND != Get_Intensity_Data(p_My_Command_Data))
     d36:	85 e3       	ldi	r24, 0x35	; 53
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
     d3e:	8f 3f       	cpi	r24, 0xFF	; 255
     d40:	d1 f0       	breq	.+52     	; 0xd76 <Run_Slave_Service+0x9c>
        {
            // If command differs from our status execute intensity command
            if (Get_Intensity_Data(p_My_Status_Data) != Get_Intensity_Data(p_My_Command_Data))
     d42:	82 e3       	ldi	r24, 0x32	; 50
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
     d4a:	c8 2f       	mov	r28, r24
     d4c:	85 e3       	ldi	r24, 0x35	; 53
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
     d54:	c8 17       	cp	r28, r24
     d56:	79 f0       	breq	.+30     	; 0xd76 <Run_Slave_Service+0x9c>
            {
                // Update our status as the command
                Write_Intensity_Data(p_My_Status_Data, Get_Intensity_Data(p_My_Command_Data));
     d58:	85 e3       	ldi	r24, 0x35	; 53
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
     d60:	68 2f       	mov	r22, r24
     d62:	82 e3       	ldi	r24, 0x32	; 50
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>

                // Set light intensity
                Set_Light_Intensity(Get_Intensity_Data(p_My_Status_Data));
     d6a:	82 e3       	ldi	r24, 0x32	; 50
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
     d72:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Set_Light_Intensity>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d76:	df bf       	out	0x3f, r29	; 63
****************************************************************************/
static void process_position_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d78:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d7a:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (POSITION_NON_COMMAND != Get_Position_Data(p_My_Command_Data))
     d7c:	85 e3       	ldi	r24, 0x35	; 53
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	d9 f0       	breq	.+54     	; 0xdbe <Run_Slave_Service+0xe4>
        {
            // If command differs from our status and position is valid, execute move command
            if (Get_Position_Data(p_My_Status_Data) != Get_Position_Data(p_My_Command_Data))
     d88:	82 e3       	ldi	r24, 0x32	; 50
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
     d90:	ec 01       	movw	r28, r24
     d92:	85 e3       	ldi	r24, 0x35	; 53
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
     d9a:	c8 17       	cp	r28, r24
     d9c:	d9 07       	cpc	r29, r25
     d9e:	79 f0       	breq	.+30     	; 0xdbe <Run_Slave_Service+0xe4>
            {
                // Update our status as the command
                Write_Position_Data(p_My_Status_Data, Get_Position_Data(p_My_Command_Data));
     da0:	85 e3       	ldi	r24, 0x35	; 53
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
     da8:	bc 01       	movw	r22, r24
     daa:	82 e3       	ldi	r24, 0x32	; 50
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>

                // Change servo position, based on our new status
                Move_Analog_Servo_To_Position(Get_Position_Data(p_My_Status_Data));
     db2:	82 e3       	ldi	r24, 0x32	; 50
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
     dba:	0e 94 9d 00 	call	0x13a	; 0x13a <Move_Analog_Servo_To_Position>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dbe:	1f bf       	out	0x3f, r17	; 63
            break;

        default:
            break;
    }
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	08 95       	ret

00000dc8 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
     dc8:	e9 e3       	ldi	r30, 0x39	; 57
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	ad e3       	ldi	r26, 0x3D	; 61
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	81 ea       	ldi	r24, 0xA1	; 161
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	11 82       	std	Z+1, r1	; 0x01
     dd6:	10 82       	st	Z, r1
     dd8:	13 82       	std	Z+3, r1	; 0x03
     dda:	12 82       	std	Z+2, r1	; 0x02
     ddc:	1c 92       	st	X, r1
     dde:	15 82       	std	Z+5, r1	; 0x05
     de0:	16 82       	std	Z+6, r1	; 0x06
     de2:	17 82       	std	Z+7, r1	; 0x07
     de4:	10 86       	std	Z+8, r1	; 0x08
     de6:	11 86       	std	Z+9, r1	; 0x09
     de8:	12 86       	std	Z+10, r1	; 0x0a
     dea:	13 86       	std	Z+11, r1	; 0x0b
     dec:	14 86       	std	Z+12, r1	; 0x0c
     dee:	3d 96       	adiw	r30, 0x0d	; 13
     df0:	1d 96       	adiw	r26, 0x0d	; 13
     df2:	e8 17       	cp	r30, r24
     df4:	f9 07       	cpc	r31, r25
     df6:	71 f7       	brne	.-36     	; 0xdd4 <Init_Timer_Module+0xc>
     df8:	15 bc       	out	0x25, r1	; 37
     dfa:	16 bc       	out	0x26, r1	; 38
     dfc:	18 bc       	out	0x28, r1	; 40
     dfe:	88 b5       	in	r24, 0x28	; 40
     e00:	83 58       	subi	r24, 0x83	; 131
     e02:	88 bd       	out	0x28, r24	; 40
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e0a:	16 bc       	out	0x26, r1	; 38
     e0c:	86 b5       	in	r24, 0x26	; 38
     e0e:	83 60       	ori	r24, 0x03	; 3
     e10:	86 bd       	out	0x26, r24	; 38
     e12:	08 95       	ret

00000e14 <Register_Timer>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	c0 91 39 01 	lds	r28, 0x0139	; 0x800139 <Timers>
     e1c:	d0 91 3a 01 	lds	r29, 0x013A	; 0x80013a <Timers+0x1>
     e20:	c8 17       	cp	r28, r24
     e22:	d9 07       	cpc	r29, r25
     e24:	09 f4       	brne	.+2      	; 0xe28 <Register_Timer+0x14>
     e26:	40 c0       	rjmp	.+128    	; 0xea8 <Register_Timer+0x94>
     e28:	a9 e3       	ldi	r26, 0x39	; 57
     e2a:	b1 e0       	ldi	r27, 0x01	; 1
     e2c:	44 e9       	ldi	r20, 0x94	; 148
     e2e:	51 e0       	ldi	r21, 0x01	; 1
     e30:	fd 01       	movw	r30, r26
     e32:	25 85       	ldd	r18, Z+13	; 0x0d
     e34:	36 85       	ldd	r19, Z+14	; 0x0e
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	b1 f1       	breq	.+108    	; 0xea8 <Register_Timer+0x94>
     e3c:	3d 96       	adiw	r30, 0x0d	; 13
     e3e:	e4 17       	cp	r30, r20
     e40:	f5 07       	cpc	r31, r21
     e42:	b9 f7       	brne	.-18     	; 0xe32 <Register_Timer+0x1e>
     e44:	2c c0       	rjmp	.+88     	; 0xe9e <Register_Timer+0x8a>
     e46:	1d 96       	adiw	r26, 0x0d	; 13
     e48:	4d 91       	ld	r20, X+
     e4a:	5c 91       	ld	r21, X
     e4c:	1e 97       	sbiw	r26, 0x0e	; 14
     e4e:	45 2b       	or	r20, r21
     e50:	f9 f4       	brne	.+62     	; 0xe90 <Register_Timer+0x7c>
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <Register_Timer+0x44>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	f9 01       	movw	r30, r18
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	2e 0f       	add	r18, r30
     e6c:	3f 1f       	adc	r19, r31
     e6e:	f9 01       	movw	r30, r18
     e70:	e7 5c       	subi	r30, 0xC7	; 199
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
     e78:	73 83       	std	Z+3, r23	; 0x03
     e7a:	62 83       	std	Z+2, r22	; 0x02
     e7c:	14 82       	std	Z+4, r1	; 0x04
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	16 82       	std	Z+6, r1	; 0x06
     e82:	17 82       	std	Z+7, r1	; 0x07
     e84:	10 86       	std	Z+8, r1	; 0x08
     e86:	11 86       	std	Z+9, r1	; 0x09
     e88:	12 86       	std	Z+10, r1	; 0x0a
     e8a:	13 86       	std	Z+11, r1	; 0x0b
     e8c:	14 86       	std	Z+12, r1	; 0x0c
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <Register_Timer+0x94>
     e90:	2f 5f       	subi	r18, 0xFF	; 255
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	1d 96       	adiw	r26, 0x0d	; 13
     e96:	28 30       	cpi	r18, 0x08	; 8
     e98:	31 05       	cpc	r19, r1
     e9a:	a9 f6       	brne	.-86     	; 0xe46 <Register_Timer+0x32>
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <Register_Timer+0x94>
     e9e:	cd 2b       	or	r28, r29
     ea0:	c9 f2       	breq	.-78     	; 0xe54 <Register_Timer+0x40>
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	cf cf       	rjmp	.-98     	; 0xe46 <Register_Timer+0x32>
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <Start_Timer>:
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <Timers>
     eba:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <Timers+0x1>
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	51 f0       	breq	.+20     	; 0xed8 <Start_Timer+0x2a>
     ec4:	e9 e3       	ldi	r30, 0x39	; 57
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	a5 85       	ldd	r26, Z+13	; 0x0d
     ece:	b6 85       	ldd	r27, Z+14	; 0x0e
     ed0:	a8 17       	cp	r26, r24
     ed2:	b9 07       	cpc	r27, r25
     ed4:	11 f5       	brne	.+68     	; 0xf1a <Start_Timer+0x6c>
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Start_Timer+0x2e>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	2e 0f       	add	r18, r30
     ef0:	3f 1f       	adc	r19, r31
     ef2:	f9 01       	movw	r30, r18
     ef4:	e7 5c       	subi	r30, 0xC7	; 199
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	84 83       	std	Z+4, r24	; 0x04
     efc:	15 82       	std	Z+5, r1	; 0x05
     efe:	16 82       	std	Z+6, r1	; 0x06
     f00:	17 82       	std	Z+7, r1	; 0x07
     f02:	10 86       	std	Z+8, r1	; 0x08
     f04:	6a 01       	movw	r12, r20
     f06:	7b 01       	movw	r14, r22
     f08:	cc 0c       	add	r12, r12
     f0a:	dd 1c       	adc	r13, r13
     f0c:	ee 1c       	adc	r14, r14
     f0e:	ff 1c       	adc	r15, r15
     f10:	c1 86       	std	Z+9, r12	; 0x09
     f12:	d2 86       	std	Z+10, r13	; 0x0a
     f14:	e3 86       	std	Z+11, r14	; 0x0b
     f16:	f4 86       	std	Z+12, r15	; 0x0c
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <Start_Timer+0x78>
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	3d 96       	adiw	r30, 0x0d	; 13
     f20:	28 30       	cpi	r18, 0x08	; 8
     f22:	31 05       	cpc	r19, r1
     f24:	99 f6       	brne	.-90     	; 0xecc <Start_Timer+0x1e>
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	08 95       	ret

00000f30 <Stop_Timer>:
     f30:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <Timers>
     f34:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <Timers+0x1>
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	51 f0       	breq	.+20     	; 0xf52 <Stop_Timer+0x22>
     f3e:	e9 e3       	ldi	r30, 0x39	; 57
     f40:	f1 e0       	ldi	r31, 0x01	; 1
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	45 85       	ldd	r20, Z+13	; 0x0d
     f48:	56 85       	ldd	r21, Z+14	; 0x0e
     f4a:	48 17       	cp	r20, r24
     f4c:	59 07       	cpc	r21, r25
     f4e:	99 f4       	brne	.+38     	; 0xf76 <Stop_Timer+0x46>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <Stop_Timer+0x26>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	f9 01       	movw	r30, r18
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e2 0f       	add	r30, r18
     f5e:	f3 1f       	adc	r31, r19
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	2e 0f       	add	r18, r30
     f6a:	3f 1f       	adc	r19, r31
     f6c:	f9 01       	movw	r30, r18
     f6e:	e7 5c       	subi	r30, 0xC7	; 199
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	14 82       	std	Z+4, r1	; 0x04
     f74:	08 95       	ret
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	3d 96       	adiw	r30, 0x0d	; 13
     f7c:	28 30       	cpi	r18, 0x08	; 8
     f7e:	31 05       	cpc	r19, r1
     f80:	11 f7       	brne	.-60     	; 0xf46 <Stop_Timer+0x16>
     f82:	08 95       	ret

00000f84 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
     fb2:	88 b5       	in	r24, 0x28	; 40
     fb4:	83 58       	subi	r24, 0x83	; 131
     fb6:	88 bd       	out	0x28, r24	; 40
     fb8:	0d e3       	ldi	r16, 0x3D	; 61
     fba:	11 e0       	ldi	r17, 0x01	; 1
     fbc:	c9 e3       	ldi	r28, 0x39	; 57
     fbe:	d1 e0       	ldi	r29, 0x01	; 1
     fc0:	0f 2e       	mov	r0, r31
     fc2:	f1 ea       	ldi	r31, 0xA1	; 161
     fc4:	ef 2e       	mov	r14, r31
     fc6:	f1 e0       	ldi	r31, 0x01	; 1
     fc8:	ff 2e       	mov	r15, r31
     fca:	f0 2d       	mov	r31, r0
     fcc:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	81 f1       	breq	.+96     	; 0x1034 <__vector_10+0xb0>
     fd4:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	ab 85       	ldd	r26, Y+11	; 0x0b
     fdc:	bc 85       	ldd	r27, Y+12	; 0x0c
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	a1 05       	cpc	r26, r1
     fe2:	b1 05       	cpc	r27, r1
     fe4:	b9 f0       	breq	.+46     	; 0x1014 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
     fe6:	4d 81       	ldd	r20, Y+5	; 0x05
     fe8:	5e 81       	ldd	r21, Y+6	; 0x06
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	6f 4f       	sbci	r22, 0xFF	; 255
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	4d 83       	std	Y+5, r20	; 0x05
     ff8:	5e 83       	std	Y+6, r21	; 0x06
     ffa:	6f 83       	std	Y+7, r22	; 0x07
     ffc:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	a1 09       	sbc	r26, r1
    1002:	b1 09       	sbc	r27, r1
    1004:	89 87       	std	Y+9, r24	; 0x09
    1006:	9a 87       	std	Y+10, r25	; 0x0a
    1008:	ab 87       	std	Y+11, r26	; 0x0b
    100a:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
    100c:	89 2b       	or	r24, r25
    100e:	8a 2b       	or	r24, r26
    1010:	8b 2b       	or	r24, r27
    1012:	81 f4       	brne	.+32     	; 0x1034 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
    1014:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
    1016:	d9 01       	movw	r26, r18
    1018:	12 96       	adiw	r26, 0x02	; 2
    101a:	ed 91       	ld	r30, X+
    101c:	fc 91       	ld	r31, X
    101e:	13 97       	sbiw	r26, 0x03	; 3
    1020:	30 97       	sbiw	r30, 0x00	; 0
    1022:	41 f0       	breq	.+16     	; 0x1034 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	dc 01       	movw	r26, r24
    102a:	6d 91       	ld	r22, X+
    102c:	7d 91       	ld	r23, X+
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	09 95       	icall
    1034:	03 5f       	subi	r16, 0xF3	; 243
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    103a:	ce 15       	cp	r28, r14
    103c:	df 05       	cpc	r29, r15
    103e:	31 f6       	brne	.-116    	; 0xfcc <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__udivmodsi4>:
    106e:	a1 e2       	ldi	r26, 0x21	; 33
    1070:	1a 2e       	mov	r1, r26
    1072:	aa 1b       	sub	r26, r26
    1074:	bb 1b       	sub	r27, r27
    1076:	fd 01       	movw	r30, r26
    1078:	0d c0       	rjmp	.+26     	; 0x1094 <__udivmodsi4_ep>

0000107a <__udivmodsi4_loop>:
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	ee 1f       	adc	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	a2 17       	cp	r26, r18
    1084:	b3 07       	cpc	r27, r19
    1086:	e4 07       	cpc	r30, r20
    1088:	f5 07       	cpc	r31, r21
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__udivmodsi4_ep>
    108c:	a2 1b       	sub	r26, r18
    108e:	b3 0b       	sbc	r27, r19
    1090:	e4 0b       	sbc	r30, r20
    1092:	f5 0b       	sbc	r31, r21

00001094 <__udivmodsi4_ep>:
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	1a 94       	dec	r1
    109e:	69 f7       	brne	.-38     	; 0x107a <__udivmodsi4_loop>
    10a0:	60 95       	com	r22
    10a2:	70 95       	com	r23
    10a4:	80 95       	com	r24
    10a6:	90 95       	com	r25
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	bd 01       	movw	r22, r26
    10ae:	cf 01       	movw	r24, r30
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
