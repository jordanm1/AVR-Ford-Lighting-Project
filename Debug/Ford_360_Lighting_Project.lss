
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000014ba  0000154e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800110  00800110  0000155e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043fd  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d9e  00000000  00000000  00005e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026f0  00000000  00000000  00007bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aec  00000000  00000000  0000a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000116d  00000000  00000000  0000adb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000265e  00000000  00000000  0000bf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000e57f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
       4:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_1>
       8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
       c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_3>
      10:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_4>
      14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_9>
      28:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_10>
      2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      30:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_12>
      34:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_13>
      38:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_14>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_15>
      40:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_16>
      44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
      50:	11 24       	eor	r1, r1
      52:	1f be       	out	0x3f, r1	; 63
      54:	cf ef       	ldi	r28, 0xFF	; 255
      56:	d2 e0       	ldi	r29, 0x02	; 2
      58:	de bf       	out	0x3e, r29	; 62
      5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
      5c:	11 e0       	ldi	r17, 0x01	; 1
      5e:	a0 e0       	ldi	r26, 0x00	; 0
      60:	b1 e0       	ldi	r27, 0x01	; 1
      62:	ea eb       	ldi	r30, 0xBA	; 186
      64:	f4 e1       	ldi	r31, 0x14	; 20
      66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
      68:	05 90       	lpm	r0, Z+
      6a:	0d 92       	st	X+, r0
      6c:	a0 31       	cpi	r26, 0x10	; 16
      6e:	b1 07       	cpc	r27, r17
      70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
      72:	21 e0       	ldi	r18, 0x01	; 1
      74:	a0 e1       	ldi	r26, 0x10	; 16
      76:	b1 e0       	ldi	r27, 0x01	; 1
      78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
      7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
      7c:	ad 3d       	cpi	r26, 0xDD	; 221
      7e:	b2 07       	cpc	r27, r18
      80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
      82:	0e 94 f6 04 	call	0x9ec	; 0x9ec <main>
      86:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <_exit>

0000008a <__bad_interrupt>:
      8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Init_ADC_Module>:

****************************************************************************/
void Start_ADC_Measurement(void)
{
    // Writing this bit kicks off the ADC measurement
    ADCSRA |= (1<<ADSC);
      8e:	ec e7       	ldi	r30, 0x7C	; 124
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	80 81       	ld	r24, Z
      94:	8f 7b       	andi	r24, 0xBF	; 191
      96:	80 83       	st	Z, r24
      98:	a7 e7       	ldi	r26, 0x77	; 119
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	8c 91       	ld	r24, X
      9e:	8b 7f       	andi	r24, 0xFB	; 251
      a0:	8c 93       	st	X, r24
      a2:	80 81       	ld	r24, Z
      a4:	88 60       	ori	r24, 0x08	; 8
      a6:	80 83       	st	Z, r24
      a8:	80 81       	ld	r24, Z
      aa:	88 7f       	andi	r24, 0xF8	; 248
      ac:	80 83       	st	Z, r24
      ae:	ea e7       	ldi	r30, 0x7A	; 122
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	88 68       	ori	r24, 0x88	; 136
      b6:	80 83       	st	Z, r24
      b8:	80 81       	ld	r24, Z
      ba:	88 7f       	andi	r24, 0xF8	; 248
      bc:	80 83       	st	Z, r24
      be:	08 95       	ret

000000c0 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
      d2:	ea e7       	ldi	r30, 0x7A	; 122
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	80 61       	ori	r24, 0x10	; 16
      da:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
      dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
      e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
      e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
      ec:	ff 91       	pop	r31
      ee:	ef 91       	pop	r30
      f0:	9f 91       	pop	r25
      f2:	8f 91       	pop	r24
      f4:	0f 90       	pop	r0
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	0f 90       	pop	r0
      fa:	1f 90       	pop	r1
      fc:	18 95       	reti

000000fe <stop_signal>:
    }
    else
    {
        return true;
    }
}
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Set_PWM_Duty_Cycle>
     106:	08 95       	ret

00000108 <Init_Analog_Servo_Driver>:
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	cb 01       	movw	r24, r22
     10e:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
     112:	e3 e8       	ldi	r30, 0x83	; 131
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	8f 7d       	andi	r24, 0xDF	; 223
     11a:	80 83       	st	Z, r24
     11c:	2b 98       	cbi	0x05, 3	; 5
     11e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
     122:	ef e6       	ldi	r30, 0x6F	; 111
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	81 60       	ori	r24, 0x01	; 1
     12a:	80 83       	st	Z, r24
     12c:	6f e7       	ldi	r22, 0x7F	; 127
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	81 e1       	ldi	r24, 0x11	; 17
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 03 09 	call	0x1206	; 0x1206 <Register_Timer>
     138:	08 95       	ret

0000013a <Move_Analog_Servo_To_Position>:
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	8f 3f       	cpi	r24, 0xFF	; 255
     140:	0f ef       	ldi	r16, 0xFF	; 255
     142:	90 07       	cpc	r25, r16
     144:	09 f4       	brne	.+2      	; 0x148 <Move_Analog_Servo_To_Position+0xe>
     146:	66 c0       	rjmp	.+204    	; 0x214 <Move_Analog_Servo_To_Position+0xda>
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ac 01       	movw	r20, r24
     14e:	bd 01       	movw	r22, r26
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	66 1f       	adc	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	44 0f       	add	r20, r20
     15a:	55 1f       	adc	r21, r21
     15c:	66 1f       	adc	r22, r22
     15e:	77 1f       	adc	r23, r23
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	66 1f       	adc	r22, r22
     166:	77 1f       	adc	r23, r23
     168:	8a 01       	movw	r16, r20
     16a:	9b 01       	movw	r18, r22
     16c:	00 0f       	add	r16, r16
     16e:	11 1f       	adc	r17, r17
     170:	22 1f       	adc	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	00 0f       	add	r16, r16
     176:	11 1f       	adc	r17, r17
     178:	22 1f       	adc	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	40 0f       	add	r20, r16
     17e:	51 1f       	adc	r21, r17
     180:	62 1f       	adc	r22, r18
     182:	73 1f       	adc	r23, r19
     184:	8a 01       	movw	r16, r20
     186:	9b 01       	movw	r18, r22
     188:	00 0f       	add	r16, r16
     18a:	11 1f       	adc	r17, r17
     18c:	22 1f       	adc	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	00 0f       	add	r16, r16
     192:	11 1f       	adc	r17, r17
     194:	22 1f       	adc	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	40 0f       	add	r20, r16
     19a:	51 1f       	adc	r21, r17
     19c:	62 1f       	adc	r22, r18
     19e:	73 1f       	adc	r23, r19
     1a0:	8a 01       	movw	r16, r20
     1a2:	9b 01       	movw	r18, r22
     1a4:	00 0f       	add	r16, r16
     1a6:	11 1f       	adc	r17, r17
     1a8:	22 1f       	adc	r18, r18
     1aa:	33 1f       	adc	r19, r19
     1ac:	00 0f       	add	r16, r16
     1ae:	11 1f       	adc	r17, r17
     1b0:	22 1f       	adc	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	40 0f       	add	r20, r16
     1b6:	51 1f       	adc	r21, r17
     1b8:	62 1f       	adc	r22, r18
     1ba:	73 1f       	adc	r23, r19
     1bc:	8a 01       	movw	r16, r20
     1be:	9b 01       	movw	r18, r22
     1c0:	00 0f       	add	r16, r16
     1c2:	11 1f       	adc	r17, r17
     1c4:	22 1f       	adc	r18, r18
     1c6:	33 1f       	adc	r19, r19
     1c8:	00 0f       	add	r16, r16
     1ca:	11 1f       	adc	r17, r17
     1cc:	22 1f       	adc	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	40 0f       	add	r20, r16
     1d2:	51 1f       	adc	r21, r17
     1d4:	62 1f       	adc	r22, r18
     1d6:	73 1f       	adc	r23, r19
     1d8:	8a 01       	movw	r16, r20
     1da:	9b 01       	movw	r18, r22
     1dc:	08 1b       	sub	r16, r24
     1de:	19 0b       	sbc	r17, r25
     1e0:	2a 0b       	sbc	r18, r26
     1e2:	3b 0b       	sbc	r19, r27
     1e4:	c9 01       	movw	r24, r18
     1e6:	b8 01       	movw	r22, r16
     1e8:	28 e8       	ldi	r18, 0x88	; 136
     1ea:	33 e1       	ldi	r19, 0x13	; 19
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodsi4>
     1f4:	87 e8       	ldi	r24, 0x87	; 135
     1f6:	93 e1       	ldi	r25, 0x13	; 19
     1f8:	82 1b       	sub	r24, r18
     1fa:	93 0b       	sbc	r25, r19
     1fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     200:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
     204:	40 ed       	ldi	r20, 0xD0	; 208
     206:	57 e0       	ldi	r21, 0x07	; 7
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	81 e1       	ldi	r24, 0x11	; 17
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <Release_Analog_Servo>:
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	cb 01       	movw	r24, r22
     220:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
     224:	08 95       	ret

00000226 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	8f 93       	push	r24
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
     236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     23a:	88 23       	and	r24, r24
     23c:	19 f0       	breq	.+6      	; 0x244 <__vector_9+0x1e>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	39 f0       	breq	.+14     	; 0x250 <__vector_9+0x2a>
     242:	0c c0       	rjmp	.+24     	; 0x25c <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
     244:	e3 e8       	ldi	r30, 0x83	; 131
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 62       	ori	r24, 0x20	; 32
     24c:	80 83       	st	Z, r24
            break;
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
     250:	e3 e8       	ldi	r30, 0x83	; 131
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	8f 7d       	andi	r24, 0xDF	; 223
     258:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
     25a:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
     25c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     260:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
     262:	83 70       	andi	r24, 0x03	; 3
     264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	8f 91       	pop	r24
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <Init_Buttons>:
    #ifdef PB5_BUTTON_RISE_EVT || PB5_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB5);
    DDRB &= ~(1<<PINB5);
    #endif
    #ifdef PB6_BUTTON_RISE_EVT || PB6_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB6);
     278:	ec e6       	ldi	r30, 0x6C	; 108
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	80 64       	ori	r24, 0x40	; 64
     280:	80 83       	st	Z, r24
    DDRB &= ~(1<<PINB6);
     282:	26 98       	cbi	0x04, 6	; 4
    PCMSK1 |= (1<<PINB7);
    DDRB &= ~(1<<PINB7);
    #endif

    // Sample current state of pins
    Current_Port_A_State = PINA;
     284:	90 b1       	in	r25, 0x00	; 0
     286:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Current_Port_A_State>
    Current_Port_B_State = PINB;
     28a:	83 b1       	in	r24, 0x03	; 3
     28c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>

    // Save current pin state as last pin state
    Last_Port_A_State = Current_Port_A_State;
     290:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Last_Port_A_State>
    Last_Port_B_State = Current_Port_B_State;
     294:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

    // Register our debounce timer
    Register_Timer(&Debounce_Timer, Post_Event);
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	73 e0       	ldi	r23, 0x03	; 3
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 03 09 	call	0x1206	; 0x1206 <Register_Timer>

    // Enable the pin change interrupts for both ports
    PCICR |= ((1<<PCIE1)|(1<<PCIE0));
     2a4:	e8 e6       	ldi	r30, 0x68	; 104
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	83 60       	ori	r24, 0x03	; 3
     2ac:	80 83       	st	Z, r24
     2ae:	08 95       	ret

000002b0 <Run_Buttons>:
        This function runs events related to the buttons.

****************************************************************************/
void Run_Buttons(uint32_t event)
{
    switch (event)
     2b0:	61 15       	cp	r22, r1
     2b2:	70 42       	sbci	r23, 0x20	; 32
     2b4:	81 05       	cpc	r24, r1
     2b6:	91 05       	cpc	r25, r1
     2b8:	69 f5       	brne	.+90     	; 0x314 <__stack+0x15>
    {
        case EVT_BTN_DEBOUNCE_TIMEOUT:
            // The debounce period has ended.

            // Sample the pins
            Current_Port_A_State = PINA;
     2ba:	80 b1       	in	r24, 0x00	; 0
     2bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Current_Port_A_State>
            Current_Port_B_State = PINB;
     2c0:	83 b1       	in	r24, 0x03	; 3
     2c2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>
            }
            break;

        case B:
            if (    (RISE == change_type) &&
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
     2c6:	80 74       	andi	r24, 0x40	; 64
     2c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Last_Port_B_State>
     2cc:	90 74       	andi	r25, 0x40	; 64
    #ifdef PB5_BUTTON_FALL_EVT
    if (did_pin_change(B,5,FALL)) Post_Event(PB5_BUTTON_FALL_EVT);
    #endif
    // PB6
    #ifdef PB6_BUTTON_RISE_EVT
    if (did_pin_change(B,6,RISE)) Post_Event(PB6_BUTTON_RISE_EVT);
     2ce:	98 17       	cp	r25, r24
     2d0:	30 f4       	brcc	.+12     	; 0x2de <Run_Buttons+0x2e>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	78 e0       	ldi	r23, 0x08	; 8
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
            {
                return true;
            }
            else if ((FALL == change_type) &&
                    ((Current_Port_B_State&pin_mask) < (Last_Port_B_State&pin_mask))    )
     2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Current_Port_B_State>
     2e2:	90 74       	andi	r25, 0x40	; 64
     2e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Last_Port_B_State>
     2e8:	80 74       	andi	r24, 0x40	; 64
    // PB6
    #ifdef PB6_BUTTON_RISE_EVT
    if (did_pin_change(B,6,RISE)) Post_Event(PB6_BUTTON_RISE_EVT);
    #endif
    #ifdef PB6_BUTTON_FALL_EVT
    if (did_pin_change(B,6,FALL)) Post_Event(PB6_BUTTON_FALL_EVT);
     2ea:	98 17       	cp	r25, r24
     2ec:	30 f4       	brcc	.+12     	; 0x2fa <Run_Buttons+0x4a>
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e1       	ldi	r23, 0x10	; 16
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>

            // Check for differences, and post events for them
            handle_btn_evts();

            // Save current pin state as last pin state
            Last_Port_A_State = Current_Port_A_State;
     2fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Current_Port_A_State>
     2fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Last_Port_A_State>
            Last_Port_B_State = Current_Port_B_State;
     302:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Current_Port_B_State>
     306:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

            // Re-enable pin change interrupts for port A and port B
            PCICR |= ((1<<PCIE1)|(1<<PCIE0));
     30a:	e8 e6       	ldi	r30, 0x68	; 104
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	83 60       	ori	r24, 0x03	; 3
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
     338:	e8 e6       	ldi	r30, 0x68	; 104
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8e 7f       	andi	r24, 0xFE	; 254
     340:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     342:	4a e0       	ldi	r20, 0x0A	; 10
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
}
     352:	ff 91       	pop	r31
     354:	ef 91       	pop	r30
     356:	bf 91       	pop	r27
     358:	af 91       	pop	r26
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <__vector_4>:

ISR(PCINT1_vect)
{
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
     396:	e8 e6       	ldi	r30, 0x68	; 104
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     3a0:	4a e0       	ldi	r20, 0x0A	; 10
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	7f 91       	pop	r23
     3be:	6f 91       	pop	r22
     3c0:	5f 91       	pop	r21
     3c2:	4f 91       	pop	r20
     3c4:	3f 91       	pop	r19
     3c6:	2f 91       	pop	r18
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <CAN_Read>:
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
}
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <CAN_Read+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9b 01       	movw	r18, r22
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	99 83       	std	Y+1, r25	; 0x01
     3e2:	8a 83       	std	Y+2, r24	; 0x02
     3e4:	ae 01       	movw	r20, r28
     3e6:	4f 5f       	subi	r20, 0xFF	; 255
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Write_SPI>
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <CAN_Bit_Modify>:
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	95 e0       	ldi	r25, 0x05	; 5
     40a:	99 83       	std	Y+1, r25	; 0x01
     40c:	8a 83       	std	Y+2, r24	; 0x02
     40e:	6b 83       	std	Y+3, r22	; 0x03
     410:	fa 01       	movw	r30, r20
     412:	80 81       	ld	r24, Z
     414:	8c 83       	std	Y+4, r24	; 0x04
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	ae 01       	movw	r20, r28
     41c:	4f 5f       	subi	r20, 0xFF	; 255
     41e:	5f 4f       	sbci	r21, 0xFF	; 255
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Write_SPI>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(void)
{
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	16 e6       	ldi	r17, 0x66	; 102
     43e:	c0 e0       	ldi	r28, 0x00	; 0
     440:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
     442:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <a_p_Recv_List>
     446:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <a_p_Recv_List+0x1>
     44a:	6c 0f       	add	r22, r28
     44c:	7d 1f       	adc	r23, r29
     44e:	81 2f       	mov	r24, r17
     450:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <CAN_Read>
     454:	22 96       	adiw	r28, 0x02	; 2
     456:	1f 5f       	subi	r17, 0xFF	; 255

****************************************************************************/

void CAN_Read_Message(void)
{
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
     458:	ca 30       	cpi	r28, 0x0A	; 10
     45a:	d1 05       	cpc	r29, r1
     45c:	91 f7       	brne	.-28     	; 0x442 <CAN_Read_Message+0xc>
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
	}
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	08 95       	ret

00000466 <Get_Intensity_Data>:
intensity_data_t Get_Intensity_Data(uint8_t * p_LIN_packet)
{
    intensity_data_t result;
    memcpy(&result, p_LIN_packet+INTENSITY_DATA_INDEX, INTENSITY_DATA_LEN);
    return result;
}
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	08 95       	ret

0000046c <Get_Position_Data>:
position_data_t Get_Position_Data(uint8_t * p_LIN_packet)
{
    position_data_t result;
    memcpy(&result, p_LIN_packet+POSITION_DATA_INDEX, POSITION_DATA_LEN);
    return result;
}
     46c:	fc 01       	movw	r30, r24
     46e:	81 81       	ldd	r24, Z+1	; 0x01
     470:	92 81       	ldd	r25, Z+2	; 0x02
     472:	08 95       	ret

00000474 <Write_Intensity_Data>:

****************************************************************************/
void Write_Intensity_Data(uint8_t * p_LIN_packet, intensity_data_t data_to_write)
{
    intensity_data_t temp = data_to_write;
    memcpy(p_LIN_packet+INTENSITY_DATA_INDEX, &temp, INTENSITY_DATA_LEN);
     474:	fc 01       	movw	r30, r24
     476:	60 83       	st	Z, r22
     478:	08 95       	ret

0000047a <Write_Position_Data>:

****************************************************************************/
void Write_Position_Data(uint8_t * p_LIN_packet, position_data_t data_to_write)
{
    position_data_t temp = data_to_write;
    memcpy(p_LIN_packet+POSITION_DATA_INDEX, &temp, POSITION_DATA_LEN);
     47a:	fc 01       	movw	r30, r24
     47c:	72 83       	std	Z+2, r23	; 0x02
     47e:	61 83       	std	Z+1, r22	; 0x01
     480:	08 95       	ret

00000482 <Get_Pointer_To_Slave_Data>:
****************************************************************************/
uint8_t * Get_Pointer_To_Slave_Data(uint8_t * p_master_array, uint8_t slave_num)
{
    // This assumes the first section of the master array corresponds
    //  to the lowest slave number (the first slave)
    return (p_master_array+((slave_num-LOWEST_SLAVE_NUMBER)*LIN_PACKET_LEN));
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	61 50       	subi	r22, 0x01	; 1
     486:	71 09       	sbc	r23, r1
     488:	9b 01       	movw	r18, r22
     48a:	22 0f       	add	r18, r18
     48c:	33 1f       	adc	r19, r19
     48e:	62 0f       	add	r22, r18
     490:	73 1f       	adc	r23, r19
}
     492:	86 0f       	add	r24, r22
     494:	97 1f       	adc	r25, r23
     496:	08 95       	ret

00000498 <Read_Data_From_EEPROM>:

****************************************************************************/
void Read_Data_From_EEPROM(uint8_t * p_address_in_eeprom, uint8_t * p_values_to_read, uint8_t num_bytes)
{
    // If we're busy, we need to wait until the current task is finished
    if (IsBusy)
     498:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <IsBusy>
     49c:	21 11       	cpse	r18, r1
     49e:	19 c0       	rjmp	.+50     	; 0x4d2 <Read_Data_From_EEPROM+0x3a>
    {
        // @TODO:
    }
    else
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     4a0:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4a2:	f8 94       	cli
        {
            // Iterate for all bytes and copy the EEPROM data to the pointer
            //  of the caller
            IsBusy = true;
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <IsBusy>
            for (int byte_index = 0; num_bytes > byte_index; byte_index++)
     4aa:	44 23       	and	r20, r20
     4ac:	79 f0       	breq	.+30     	; 0x4cc <Read_Data_From_EEPROM+0x34>
     4ae:	28 2f       	mov	r18, r24
     4b0:	39 2f       	mov	r19, r25
     4b2:	fb 01       	movw	r30, r22
     4b4:	64 0f       	add	r22, r20
     4b6:	71 1d       	adc	r23, r1
            {
                EEAR = (uint16_t) (p_address_in_eeprom+byte_index);
     4b8:	32 bd       	out	0x22, r19	; 34
     4ba:	21 bd       	out	0x21, r18	; 33
                EECR |= (1<<EERE);
     4bc:	f8 9a       	sbi	0x1f, 0	; 31
                *(p_values_to_read+byte_index) = EEDR;
     4be:	80 b5       	in	r24, 0x20	; 32
     4c0:	81 93       	st	Z+, r24
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
        {
            // Iterate for all bytes and copy the EEPROM data to the pointer
            //  of the caller
            IsBusy = true;
            for (int byte_index = 0; num_bytes > byte_index; byte_index++)
     4c6:	e6 17       	cp	r30, r22
     4c8:	f7 07       	cpc	r31, r23
     4ca:	b1 f7       	brne	.-20     	; 0x4b8 <Read_Data_From_EEPROM+0x20>
            {
                EEAR = (uint16_t) (p_address_in_eeprom+byte_index);
                EECR |= (1<<EERE);
                *(p_values_to_read+byte_index) = EEDR;
            }
            IsBusy = false;
     4cc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <IsBusy>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4d0:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
     4d2:	08 95       	ret

000004d4 <start_eeprom_write_byte>:
    Description
        Initiates a write to EEPROM

****************************************************************************/
void start_eeprom_write_byte(uint8_t * p_eeprom, uint8_t * p_value)
{
     4d4:	9c 01       	movw	r18, r24
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     4d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4d8:	f8 94       	cli
    {
        // Set up address and data registers
        EEAR = (uint16_t) p_eeprom;
     4da:	32 bd       	out	0x22, r19	; 34
     4dc:	21 bd       	out	0x21, r18	; 33

        // Write one byte
        EEDR = *p_value;
     4de:	fb 01       	movw	r30, r22
     4e0:	80 81       	ld	r24, Z
     4e2:	80 bd       	out	0x20, r24	; 32

        // Set Programming mode to erase and write
        //  Erase and write takes 3.4 ms to execute
        EECR = (0<<EEPM1)|(0<<EEPM0);
     4e4:	1f ba       	out	0x1f, r1	; 31

        // Write logical one to EEMPE to enable master programming, this is
        //  cleared in hardware after 4 cpu cycles
        EECR |= (1<<EEMPE);
     4e6:	fa 9a       	sbi	0x1f, 2	; 31

        // Kick off EEPROM write by setting EEPE bit and enable the ready interrupt
        //  by setting EERIE bit
        EECR |= (1<<EERIE)|(1<<EEPE);
     4e8:	8f b3       	in	r24, 0x1f	; 31
     4ea:	8a 60       	ori	r24, 0x0A	; 10
     4ec:	8f bb       	out	0x1f, r24	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4ee:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     4f0:	08 95       	ret

000004f2 <Write_Data_To_EEPROM>:
    Description
        Writes data to EEPROM

****************************************************************************/
void Write_Data_To_EEPROM(uint8_t * p_address_in_eeprom, uint8_t * p_values_to_write, uint8_t num_bytes)
{
     4f2:	cf 93       	push	r28
    // If we're busy, we need to wait until the current task is finished
    if (IsBusy)
     4f4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <IsBusy>
     4f8:	21 11       	cpse	r18, r1
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <Write_Data_To_EEPROM+0x2c>
        // @TODO:
    }
    else
    {
        // Do housekeeping for the current write
        IsBusy = true;
     4fc:	c1 e0       	ldi	r28, 0x01	; 1
     4fe:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <IsBusy>
        p_Target_EEPROM_Address = p_address_in_eeprom;
     502:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <p_Target_EEPROM_Address+0x1>
     506:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <p_Target_EEPROM_Address>
        p_Caller_Values = p_values_to_write;
     50a:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <p_Caller_Values+0x1>
     50e:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <p_Caller_Values>
        Num_Bytes_Executed = 0;
        Num_Bytes_Requested = num_bytes;
     512:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <Num_Bytes_Requested>

        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     516:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     51a:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <Num_Bytes_Executed>
    }
}
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <__vector_16>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(EE_RDY_vect)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	cf 93       	push	r28
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
    // Disable the ready interrupts
    EECR &= ~(1<<EERIE);
     546:	fb 98       	cbi	0x1f, 3	; 31

    // Check if we've written all the requested values
    if (Num_Bytes_Requested <= Num_Bytes_Executed)
     548:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <Num_Bytes_Executed>
     54c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Num_Bytes_Requested>
     550:	c8 17       	cp	r28, r24
     552:	18 f0       	brcs	.+6      	; 0x55a <__vector_16+0x38>
    {
        // We are done writing all the bytes.
        IsBusy = false;
     554:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <IsBusy>
     558:	13 c0       	rjmp	.+38     	; 0x580 <__vector_16+0x5e>
    }
    else
    {
        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     55a:	8c 2f       	mov	r24, r28
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <p_Caller_Values>
     562:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <p_Caller_Values+0x1>
     566:	68 0f       	add	r22, r24
     568:	79 1f       	adc	r23, r25
     56a:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <p_Target_EEPROM_Address>
     56e:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <p_Target_EEPROM_Address+0x1>
     572:	82 0f       	add	r24, r18
     574:	93 1f       	adc	r25, r19
     576:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     57a:	cf 5f       	subi	r28, 0xFF	; 255
     57c:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <Num_Bytes_Executed>
    }
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	cf 91       	pop	r28
     586:	bf 91       	pop	r27
     588:	af 91       	pop	r26
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	7f 91       	pop	r23
     590:	6f 91       	pop	r22
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	8b 01       	movw	r16, r22
     5aa:	9c 01       	movw	r18, r24
    bool event_pending = false;

    // We must enter a critical section here, because it is possible that
    // while we are clearing the event, an interrupt may occur and post an 
    // event. In this situation, we would lose the new event that was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     5ac:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ae:	f8 94       	cli
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
     5b0:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <Pending_Events>
     5b4:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <Pending_Events+0x1>
     5b8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <Pending_Events+0x2>
     5bc:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <Pending_Events+0x3>
     5c0:	d9 01       	movw	r26, r18
     5c2:	c8 01       	movw	r24, r16
     5c4:	84 23       	and	r24, r20
     5c6:	95 23       	and	r25, r21
     5c8:	a6 23       	and	r26, r22
     5ca:	b7 23       	and	r27, r23
     5cc:	80 17       	cp	r24, r16
     5ce:	91 07       	cpc	r25, r17
     5d0:	a2 07       	cpc	r26, r18
     5d2:	b3 07       	cpc	r27, r19
     5d4:	91 f4       	brne	.+36     	; 0x5fa <process_event_if_pending+0x56>
        {
            // Set flag
            event_pending = true;

            // Clear the event
            Pending_Events &= ~event_mask;
     5d6:	80 95       	com	r24
     5d8:	90 95       	com	r25
     5da:	a0 95       	com	r26
     5dc:	b0 95       	com	r27
     5de:	84 23       	and	r24, r20
     5e0:	95 23       	and	r25, r21
     5e2:	a6 23       	and	r26, r22
     5e4:	b7 23       	and	r27, r23
     5e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Pending_Events>
     5ea:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Pending_Events+0x1>
     5ee:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <Pending_Events+0x2>
     5f2:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <Pending_Events+0x3>
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
        {
            // Set flag
            event_pending = true;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <process_event_if_pending+0x58>

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
    // Initialize event pending flag to false
    bool event_pending = false;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5fc:	ef bf       	out	0x3f, r30	; 63
            Pending_Events &= ~event_mask;
        }           
    }

    // If the event is pending, run all services to process the event.
    if (event_pending) Run_Services(event_mask);
     5fe:	88 23       	and	r24, r24
     600:	21 f0       	breq	.+8      	; 0x60a <process_event_if_pending+0x66>
     602:	c9 01       	movw	r24, r18
     604:	b8 01       	movw	r22, r16
     606:	0e 94 b6 03 	call	0x76c	; 0x76c <Run_Services>
}
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
    // We must enter a critical section here, because it is possible that
    // while we are modifying the pending events, an interrupt may occur and 
    // post an event. In this situation, we would lose the new event that 
    // was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     618:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     61a:	f8 94       	cli
    {
        // Set flag in event list
        Pending_Events |= event_mask;
     61c:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <Pending_Events>
     620:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <Pending_Events+0x1>
     624:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <Pending_Events+0x2>
     628:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <Pending_Events+0x3>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	8c 29       	or	r24, r12
     632:	9d 29       	or	r25, r13
     634:	ae 29       	or	r26, r14
     636:	bf 29       	or	r27, r15
     638:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Pending_Events>
     63c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Pending_Events+0x1>
     640:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <Pending_Events+0x2>
     644:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <Pending_Events+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     648:	2f bf       	out	0x3f, r18	; 63
    }
}
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
     66c:	64 e0       	ldi	r22, 0x04	; 4
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
     678:	68 e0       	ldi	r22, 0x08	; 8
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
     684:	60 e1       	ldi	r22, 0x10	; 16
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
     690:	60 e2       	ldi	r22, 0x20	; 32
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
     69c:	60 e4       	ldi	r22, 0x40	; 64
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
     6a8:	60 e8       	ldi	r22, 0x80	; 128
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	72 e0       	ldi	r23, 0x02	; 2
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	74 e0       	ldi	r23, 0x04	; 4
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	78 e0       	ldi	r23, 0x08	; 8
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e1       	ldi	r23, 0x10	; 16
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e2       	ldi	r23, 0x20	; 32
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e4       	ldi	r23, 0x40	; 64
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (16 <= NUM_EVENTS)
        process_event_if_pending(EVENT_16);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e8       	ldi	r23, 0x80	; 128
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (17 <= NUM_EVENTS)
        process_event_if_pending(EVENT_17);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (18 <= NUM_EVENTS)
        process_event_if_pending(EVENT_18);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (19 <= NUM_EVENTS)
        process_event_if_pending(EVENT_19);
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        #endif
        #if (20 <= NUM_EVENTS)
        process_event_if_pending(EVENT_20);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
     744:	87 cf       	rjmp	.-242    	; 0x654 <Run_Events>

00000746 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
     746:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
     74a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
     74e:	0e 94 d2 05 	call	0xba4	; 0xba4 <Init_PWM_Module>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
     752:	0e 94 cb 03 	call	0x796	; 0x796 <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
     756:	0e 94 47 00 	call	0x8e	; 0x8e <Init_ADC_Module>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
     75a:	0e 94 3c 01 	call	0x278	; 0x278 <Init_Buttons>
    #endif
    #ifdef INITIALIZER_06
    INITIALIZER_06();
     75e:	0e 94 84 00 	call	0x108	; 0x108 <Init_Analog_Servo_Driver>
    #endif
    #ifdef INITIALIZER_07
    INITIALIZER_07();
     762:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Init_Slave_Service>
    #endif
    #ifdef INITIALIZER_08
    INITIALIZER_08();
     766:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Init_Slave_Number_Setting_SM>
     76a:	08 95       	ret

0000076c <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
     778:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Run_Buttons>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	0e 94 28 07 	call	0xe50	; 0xe50 <Run_Slave_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <Run_Slave_Number_Setting_SM>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
     796:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
     798:	e9 e6       	ldi	r30, 0x69	; 105
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8e 7f       	andi	r24, 0xFE	; 254
     7a0:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
     7a2:	80 81       	ld	r24, Z
     7a4:	82 60       	ori	r24, 0x02	; 2
     7a6:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
     7a8:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
     7aa:	e0 9a       	sbi	0x1c, 0	; 28
     7ac:	08 95       	ret

000007ae <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
     7ae:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <counter>
     7b2:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <counter+0x1>
     7b6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <counter+0x2>
     7ba:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <counter+0x3>
}
     7be:	08 95       	ret

000007c0 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	1f 92       	push	r1
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	counter++;
     7ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <counter>
     7f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <counter+0x1>
     7f4:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <counter+0x2>
     7f8:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <counter+0x3>
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	a1 1d       	adc	r26, r1
     800:	b1 1d       	adc	r27, r1
     802:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <counter>
     806:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <counter+0x1>
     80a:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <counter+0x2>
     80e:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <counter+0x3>
    // RX_Data[0] = &interrupt_read;
	// Post_Event(EVT_MASTER_NEW_CAN_MSG);
    // CAN_Read(MCP_CANINTF, RX_Data);
    // Fill in message only if the interrupt is a receive interrupt
    // if (interrupt_read & (1<<MCP_STAT_RX0IF)) 
    CAN_Read_Message();
     812:	0e 94 1b 02 	call	0x436	; 0x436 <CAN_Read_Message>
    // CAN_Read(MCP_EFLG, RX_Data);
    uint8_t TX_Data[1] = {0};
     816:	19 82       	std	Y+1, r1	; 0x01
    CAN_Bit_Modify(MCP_EFLG, (1<<6), TX_Data);
     818:	ae 01       	movw	r20, r28
     81a:	4f 5f       	subi	r20, 0xFF	; 255
     81c:	5f 4f       	sbci	r21, 0xFF	; 255
     81e:	60 e4       	ldi	r22, 0x40	; 64
     820:	8d e2       	ldi	r24, 0x2D	; 45
     822:	0e 94 fe 01 	call	0x3fc	; 0x3fc <CAN_Bit_Modify>
    //CAN_Read(MCP_EFLG_TXEP, RX_Data);
    //CAN_Read(MCP_EFLG_RXEP, RX_Data);
    CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
     826:	ae 01       	movw	r20, r28
     828:	4f 5f       	subi	r20, 0xFF	; 255
     82a:	5f 4f       	sbci	r21, 0xFF	; 255
     82c:	6f ef       	ldi	r22, 0xFF	; 255
     82e:	8c e2       	ldi	r24, 0x2C	; 44
     830:	0e 94 fe 01 	call	0x3fc	; 0x3fc <CAN_Bit_Modify>
}
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <Set_Light_Intensity>:
****************************************************************************/
void Set_Light_Intensity(uint8_t requested_intensity)
{
    // Set intensity via PWM
    // If intensity if light off, set 0% duty cycle
    if (LIGHT_OFF == requested_intensity)
     85c:	81 11       	cpse	r24, r1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <Set_Light_Intensity+0xc>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, LIGHT_OFF);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Set_PWM_Duty_Cycle>
     866:	08 95       	ret
    else if ((LIGHT_OFF < requested_intensity) && (MIN_LIGHT_INTENSITY > requested_intensity))
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MIN_LIGHT_INTENSITY);
    }
    // If intensity is greater maximum, set maximum duty cycle
    else if (MAX_LIGHT_INTENSITY < requested_intensity)
     868:	85 36       	cpi	r24, 0x65	; 101
     86a:	28 f0       	brcs	.+10     	; 0x876 <Set_Light_Intensity+0x1a>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MAX_LIGHT_INTENSITY);
     86c:	64 e6       	ldi	r22, 0x64	; 100
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Set_PWM_Duty_Cycle>
     874:	08 95       	ret
    }
    // Otherwise, use the actual intensity parameter as duty cycle
    else
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, requested_intensity);
     876:	68 2f       	mov	r22, r24
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Set_PWM_Duty_Cycle>
     87e:	08 95       	ret

00000880 <lin_init>:
        return 0;
    }
    
    Lin_tx_header();            // Set command
    return 1;
}
     880:	08 98       	cbi	0x01, 0	; 1
     882:	09 98       	cbi	0x01, 1	; 1
     884:	10 9a       	sbi	0x02, 0	; 2
     886:	11 9a       	sbi	0x02, 1	; 2
     888:	90 e8       	ldi	r25, 0x80	; 128
     88a:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     88e:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
     892:	ed ec       	ldi	r30, 0xCD	; 205
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	10 82       	st	Z, r1
     898:	ae ec       	ldi	r26, 0xCE	; 206
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	1c 92       	st	X, r1
     89e:	25 2f       	mov	r18, r21
     8a0:	33 27       	eor	r19, r19
     8a2:	2c 93       	st	X, r18
     8a4:	40 83       	st	Z, r20
     8a6:	80 34       	cpi	r24, 0x40	; 64
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <lin_init+0x32>
     8aa:	88 e4       	ldi	r24, 0x48	; 72
     8ac:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <lin_init+0x3c>
     8b2:	81 11       	cpse	r24, r1
     8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <lin_init+0x46>
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
     8bc:	8f e0       	ldi	r24, 0x0F	; 15
     8be:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	08 95       	ret
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	08 95       	ret

000008ca <lin_rx_response>:
//
//  Warning: none
//------------------------------------------------------------------------------
unsigned char lin_rx_response (unsigned char l_type, unsigned char l_len) {                                                                                                         
                                                                                                                                                                      
    if (l_type == LIN_1X) {                                                                                                                                   
     8ca:	80 34       	cpi	r24, 0x40	; 64
     8cc:	31 f4       	brne	.+12     	; 0x8da <lin_rx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                        
     8ce:	e8 ec       	ldi	r30, 0xC8	; 200
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	80 83       	st	Z, r24
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <lin_rx_response+0x22>
    } else if (l_type == LIN_2X) {                                                                                                                            
     8da:	81 11       	cpse	r24, r1
     8dc:	11 c0       	rjmp	.+34     	; 0x900 <lin_rx_response+0x36>
        Lin_2x_set_type();              // Change is necessary                                        
     8de:	e8 ec       	ldi	r30, 0xC8	; 200
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	80 83       	st	Z, r24
        Lin_set_rx_len(l_len);                                                                                                                        
     8e6:	6f 70       	andi	r22, 0x0F	; 15
     8e8:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
     8ec:	e8 ec       	ldi	r30, 0xC8	; 200
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8c 7f       	andi	r24, 0xFC	; 252
     8f4:	80 83       	st	Z, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	82 60       	ori	r24, 0x02	; 2
     8fa:	80 83       	st	Z, r24
    return 1;                                                                                                                                                 
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                        
    } else if (l_type == LIN_2X) {                                                                                                                            
        Lin_2x_set_type();              // Change is necessary                                        
        Lin_set_rx_len(l_len);                                                                                                                        
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
     900:	80 e0       	ldi	r24, 0x00	; 0
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
    return 1;                                                                                                                                                 
}
     902:	08 95       	ret

00000904 <lin_tx_response>:
//------------------------------------------------------------------------------
unsigned char lin_tx_response (unsigned char l_type, unsigned char *l_data, unsigned char l_len) {                                                                                     
                                                                                                                                                                         
unsigned char i;                                                                                                                                                         
                                                                                                                                                                         
    if (l_type == LIN_1X) {                                                                                                                                      
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	31 f4       	brne	.+12     	; 0x914 <lin_tx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                           
     908:	e8 ec       	ldi	r30, 0xC8	; 200
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	80 64       	ori	r24, 0x40	; 64
     910:	80 83       	st	Z, r24
     912:	0b c0       	rjmp	.+22     	; 0x92a <lin_tx_response+0x26>
    } else if (l_type == LIN_2X) {                                                                                                                               
     914:	81 11       	cpse	r24, r1
     916:	25 c0       	rjmp	.+74     	; 0x962 <lin_tx_response+0x5e>
        Lin_2x_set_type();				// Change is necessary                                           
     918:	e8 ec       	ldi	r30, 0xC8	; 200
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	80 83       	st	Z, r24
        Lin_set_tx_len(l_len);                                                                                                                           
     920:	84 2f       	mov	r24, r20
     922:	82 95       	swap	r24
     924:	80 7f       	andi	r24, 0xF0	; 240
     926:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
     92a:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                                
     92e:	44 23       	and	r20, r20
     930:	71 f0       	breq	.+28     	; 0x94e <lin_tx_response+0x4a>
     932:	fb 01       	movw	r30, r22
     934:	41 50       	subi	r20, 0x01	; 1
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	4f 5f       	subi	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	64 0f       	add	r22, r20
     93e:	75 1f       	adc	r23, r21
        Lin_set_data(*l_data++);                                                                                                                         
     940:	a2 ed       	ldi	r26, 0xD2	; 210
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	81 91       	ld	r24, Z+
     946:	8c 93       	st	X, r24
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
    for (i = 0; i < l_len; i++) {                                                                                                                                
     948:	e6 17       	cp	r30, r22
     94a:	f7 07       	cpc	r31, r23
     94c:	d9 f7       	brne	.-10     	; 0x944 <lin_tx_response+0x40>
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
     94e:	e8 ec       	ldi	r30, 0xC8	; 200
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	8c 7f       	andi	r24, 0xFC	; 252
     956:	80 83       	st	Z, r24
     958:	80 81       	ld	r24, Z
     95a:	83 60       	ori	r24, 0x03	; 3
     95c:	80 83       	st	Z, r24
    return 1;                                                                                                                                                    
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                           
    } else if (l_type == LIN_2X) {                                                                                                                               
        Lin_2x_set_type();				// Change is necessary                                           
        Lin_set_tx_len(l_len);                                                                                                                           
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
     962:	80 e0       	ldi	r24, 0x00	; 0
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
    return 1;                                                                                                                                                    
}
     964:	08 95       	ret

00000966 <lin_get_response>:
//------------------------------------------------------------------------------
void lin_get_response (unsigned char *l_data) {                                                                                                                 
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
     966:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
     96a:	2f 70       	andi	r18, 0x0F	; 15
    Lin_clear_index();                                                                                                                                  
     96c:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                       
     970:	22 23       	and	r18, r18
     972:	71 f0       	breq	.+28     	; 0x990 <lin_get_response+0x2a>
     974:	fc 01       	movw	r30, r24
     976:	21 50       	subi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	82 0f       	add	r24, r18
     980:	93 1f       	adc	r25, r19
        (*l_data++) = Lin_get_data();                                                                                                           
     982:	a2 ed       	ldi	r26, 0xD2	; 210
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	2c 91       	ld	r18, X
     988:	21 93       	st	Z+, r18
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
    Lin_clear_index();                                                                                                                                  
    for (i = 0; i < l_len; i++) {                                                                                                                       
     98a:	e8 17       	cp	r30, r24
     98c:	f9 07       	cpc	r31, r25
     98e:	d9 f7       	brne	.-10     	; 0x986 <lin_get_response+0x20>
     990:	08 95       	ret

00000992 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
     992:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Parity>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	89 27       	eor	r24, r25
     99a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
     99e:	81 11       	cpse	r24, r1
     9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
     9a2:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
     9a4:	42 e0       	ldi	r20, 0x02	; 2
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	8b e2       	ldi	r24, 0x2B	; 43
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
     9b4:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
     9b6:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     9b8:	43 e2       	ldi	r20, 0x23	; 35
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	8b e2       	ldi	r24, 0x2B	; 43
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
     9c8:	08 95       	ret

000009ca <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
     9ca:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
     9cc:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
     9ce:	69 ec       	ldi	r22, 0xC9	; 201
     9d0:	74 e0       	ldi	r23, 0x04	; 4
     9d2:	8b e2       	ldi	r24, 0x2B	; 43
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 03 09 	call	0x1206	; 0x1206 <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     9da:	43 e2       	ldi	r20, 0x23	; 35
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	8b e2       	ldi	r24, 0x2B	; 43
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>
     9ea:	08 95       	ret

000009ec <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
     9ec:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
     9ee:	e1 e6       	ldi	r30, 0x61	; 97
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	80 83       	st	Z, r24
    CLKPR = 0;
     9f6:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
     9f8:	0e 94 a3 03 	call	0x746	; 0x746 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
     9fc:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
     9fe:	0e 94 2a 03 	call	0x654	; 0x654 <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	08 95       	ret

00000a08 <MS_LIN_Initialize>:

****************************************************************************/
void Master_LIN_Broadcast_ID(uint8_t slave_id)
{
    // Broadcast the LIN header
    lin_tx_header((OUR_LIN_SPEC), slave_id, 0);
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	7c 01       	movw	r14, r24
     a16:	8b 01       	movw	r16, r22
     a18:	ea 01       	movw	r28, r20
     a1a:	28 9a       	sbi	0x05, 0	; 5
     a1c:	20 9a       	sbi	0x04, 0	; 4
     a1e:	4c e0       	ldi	r20, 0x0C	; 12
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 40 04 	call	0x880	; 0x880 <lin_init>
     a2c:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <p_My_Node_ID+0x1>
     a30:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <p_My_Node_ID>
     a34:	10 93 33 01 	sts	0x0133, r17	; 0x800133 <p_My_Command_Data+0x1>
     a38:	00 93 32 01 	sts	0x0132, r16	; 0x800132 <p_My_Command_Data>
     a3c:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <p_My_Status_Data+0x1>
     a40:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <p_My_Status_Data>
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	08 95       	ret

00000a52 <__vector_12>:
    Description
        Handles LIN specific interrupts

****************************************************************************/
ISR(LIN_TC_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
    // Get interrupt cause
    switch (Lin_get_it())
     a74:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__vector_12+0x2e>
     a7e:	68 c0       	rjmp	.+208    	; 0xb50 <__vector_12+0xfe>
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	21 f0       	breq	.+8      	; 0xa8c <__vector_12+0x3a>
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	09 f0       	breq	.+2      	; 0xa8a <__vector_12+0x38>
     a88:	66 c0       	rjmp	.+204    	; 0xb56 <__vector_12+0x104>
     a8a:	36 c0       	rjmp	.+108    	; 0xaf8 <__vector_12+0xa6>

****************************************************************************/
static void lin_id_task(void)
{
    // Create copy of ID, make sure this gives only the lower 6 bits
    uint8_t temp_id = Lin_get_id();
     a8c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
     a90:	69 2f       	mov	r22, r25
     a92:	6f 73       	andi	r22, 0x3F	; 63

    // This ID matches my ID. It must be a command sent from the master.
    if (temp_id == *p_My_Node_ID)
     a94:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_My_Node_ID>
     a98:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_My_Node_ID+0x1>
     a9c:	80 81       	ld	r24, Z
     a9e:	68 13       	cpse	r22, r24
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <__vector_12+0x5a>
    {
        // Prepare LIN module for receive.
        lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 65 04 	call	0x8ca	; 0x8ca <lin_rx_response>
     aaa:	22 c0       	rjmp	.+68     	; 0xaf0 <__vector_12+0x9e>
    }

    // This ID matches my ID. It must be a status request from the master.
    else if (temp_id == ((*p_My_Node_ID)|REQUEST_MASK))
     aac:	28 2f       	mov	r18, r24
     aae:	21 60       	ori	r18, 0x01	; 1
     ab0:	62 13       	cpse	r22, r18
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <__vector_12+0x74>
    {
        // Prepare LIN module for transmit.
        // We must be a slave so My_Command_Data is LIN_PACKET_LEN bytes long only.
        lin_tx_response((OUR_LIN_SPEC), p_My_Status_Data, (LIN_PACKET_LEN));
     ab4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <p_My_Status_Data>
     ab8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <p_My_Status_Data+0x1>
     abc:	43 e0       	ldi	r20, 0x03	; 3
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 82 04 	call	0x904	; 0x904 <lin_tx_response>
     ac4:	15 c0       	rjmp	.+42     	; 0xaf0 <__vector_12+0x9e>

    // This ID doesn't match my ID.
    else
    {
        // If we're the master, we must have sent this ID
        if (MASTER_NODE_ID == *p_My_Node_ID)
     ac6:	81 11       	cpse	r24, r1
     ac8:	13 c0       	rjmp	.+38     	; 0xaf0 <__vector_12+0x9e>
        {
            // Prepare LIN module for transmit if we sent a command.
            if (0 == (temp_id & REQUEST_MASK))
     aca:	90 fd       	sbrc	r25, 0
     acc:	0d c0       	rjmp	.+26     	; 0xae8 <__vector_12+0x96>
            {
                // Make sure we send the right command based on the slave ID.
                // The master has a My_Command_Data array that is LIN_PACKET_LEN*n bytes long.
                // Where n is the number of slaves in the system.
                lin_tx_response((OUR_LIN_SPEC), Get_Pointer_To_Slave_Data(p_My_Command_Data, GET_SLAVE_NUMBER(temp_id)), (LIN_PACKET_LEN));
     ace:	66 95       	lsr	r22
     ad0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <p_My_Command_Data>
     ad4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <p_My_Command_Data+0x1>
     ad8:	0e 94 41 02 	call	0x482	; 0x482 <Get_Pointer_To_Slave_Data>
     adc:	43 e0       	ldi	r20, 0x03	; 3
     ade:	bc 01       	movw	r22, r24
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 82 04 	call	0x904	; 0x904 <lin_tx_response>
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__vector_12+0x9e>
            }
            // Prepare LIN module for receive if we sent a request.
            else
            {
                lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 65 04 	call	0x8ca	; 0x8ca <lin_rx_response>
    switch (Lin_get_it())
    {
        // We received an ID
        case LIN_IDOK:
            lin_id_task();
            Lin_clear_idok_it();
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
     af6:	2f c0       	rjmp	.+94     	; 0xb56 <__vector_12+0x104>
****************************************************************************/
static void lin_rx_task(void)
{
    // Copy the rx data to our appropriate data store
    // If we're the master, copy to our status array and post event
    if (MASTER_NODE_ID == *p_My_Node_ID)
     af8:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_My_Node_ID>
     afc:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_My_Node_ID+0x1>
     b00:	80 81       	ld	r24, Z
     b02:	81 11       	cpse	r24, r1
     b04:	15 c0       	rjmp	.+42     	; 0xb30 <__vector_12+0xde>
    {
        // TODO: Not entirely sure if the ID is saved during the receive...
        lin_get_response(Get_Pointer_To_Slave_Data(p_My_Status_Data, GET_SLAVE_NUMBER(Lin_get_id())));
     b06:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
     b0a:	6f 73       	andi	r22, 0x3F	; 63
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	75 95       	asr	r23
     b10:	67 95       	ror	r22
     b12:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <p_My_Status_Data>
     b16:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <p_My_Status_Data+0x1>
     b1a:	0e 94 41 02 	call	0x482	; 0x482 <Get_Pointer_To_Slave_Data>
     b1e:	0e 94 b3 04 	call	0x966	; 0x966 <lin_get_response>

        // Post event
        Post_Event(EVT_MASTER_NEW_STS);
     b22:	60 e4       	ldi	r22, 0x40	; 64
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
     b2e:	0c c0       	rjmp	.+24     	; 0xb48 <__vector_12+0xf6>
    }
    // If we're a slave, copy to our command array and post event
    else
    {
        // Copy command
        lin_get_response(p_My_Command_Data);
     b30:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <p_My_Command_Data>
     b34:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <p_My_Command_Data+0x1>
     b38:	0e 94 b3 04 	call	0x966	; 0x966 <lin_get_response>

        // Post event
        Post_Event(EVT_SLAVE_NEW_CMD);
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
            break;

        // We received a data packet
        case LIN_RXOK:
            lin_rx_task();
            Lin_clear_rxok_it();
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <__vector_12+0x104>

        // We transmitted a data packet
        case LIN_TXOK:
            lin_tx_task();
            Lin_clear_txok_it();
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>

        // The interrupt did not correspond to LIN
        default:
            break;
    } // End Switch
}
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <__vector_13>:

ISR(LIN_ERR_vect)
{
     b78:	1f 92       	push	r1
     b7a:	0f 92       	push	r0
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	8f 93       	push	r24
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
     b84:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__EEPROM_REGION_LENGTH__+0x7f00cb>

****************************************************************************/
static void lin_err_task(void)
{
    // Increment error count
    My_LIN_Error_Count++;
     b88:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <My_LIN_Error_Count>
     b8c:	8f 5f       	subi	r24, 0xFF	; 255
     b8e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <My_LIN_Error_Count>
ISR(LIN_ERR_vect)
{
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
    lin_err_task();
    Lin_clear_err_it();
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
     b98:	8f 91       	pop	r24
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <Init_PWM_Module>:
{
    // We need to ensure no interrupts occur when accessing 16-bit registers
    // (Just for safety, no ISR should be able to access these registers anyways.)
    // Even though the C code is one line for accessing 16-bit registers,
    //      in ASM it will be done in two cycles.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ba4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ba6:	f8 94       	cli
    {
        // Clear Control Register C
        // "However, for ensuring compatibility with future devices,
        //      these bits must be set to zero when TCCR1A is written 
        //      when operating in a PWM mode."
        TCCR1C = 0;
     ba8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>

        // Disable Timer1 interrupts
        TIMSK1 = 0;
     bac:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>

        // Set up pins for PWM output (p. 85)
        TCCR1D = ((1<<PWM_CH_A_PIN_ENABLE)|(1<<PWM_CH_B_PIN_ENABLE));
     bb0:	84 e2       	ldi	r24, 0x24	; 36
     bb2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <__EEPROM_REGION_LENGTH__+0x7f0083>
        DDRB |= ((1<<PWM_CH_A_PIN)|(1<<PWM_CH_B_PIN));
     bb6:	84 b1       	in	r24, 0x04	; 4
     bb8:	88 61       	ori	r24, 0x18	; 24
     bba:	84 b9       	out	0x04, r24	; 4

        // Set TOP values for A/B counters, executes in 1 asm lines
        ICR1 = TIMER_1_TOP;
     bbc:	87 e8       	ldi	r24, 0x87	; 135
     bbe:	93 e1       	ldi	r25, 0x13	; 19
     bc0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
     bc4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>

        // Set output compare to value that sets lines low (0% duty cycle)
        OCR1A = OCR_DC_ZERO;
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	9f ef       	ldi	r25, 0xFF	; 255
     bcc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     bd0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
        OCR1B = OCR_DC_ZERO;
     bd4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     bd8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
        // Set (COM1A/B[0:1]) for output pin high on match, low on TOP
        //      (Per Table 12-2 on p. 132)
        // Set WGM1[0:3]=1110b to define TOP in ICR1A register.
        //      Define TOP in ICR1 register, instead of OCR1A (explanation on p. 125)
        //      (Run at a fixed frequency with varying duty cycles)
        TCCR1A = ((1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0) \
     bdc:	82 ef       	ldi	r24, 0xF2	; 242
     bde:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
                    |(1<<WGM11)|(0<<WGM10));

        // Set WGM1[0:3]=1110b
        TCCR1B = ((1<<WGM13)|(1<<WGM12));
     be2:	e1 e8       	ldi	r30, 0x81	; 129
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	88 e1       	ldi	r24, 0x18	; 24
     be8:	80 83       	st	Z, r24

        // Start the clock by selecting a prescaler of f_clk/1 (CS10 set)
        // We want to aim for a frequency of 1 kHz
        // PWM freq is:
        //      f_pwm = f_clk/(prescale*(1+TOP))
        TCCR1B |= TIMER_1_PRESCALE;
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bf0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     bf2:	08 95       	ret

00000bf4 <Set_PWM_Duty_Cycle>:
void Set_PWM_Duty_Cycle(pwm_channel_t this_channel, uint8_t new_duty_cycle)
{
    // Set OCR1 for the requested channel
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
     bf4:	88 23       	and	r24, r24
     bf6:	19 f0       	breq	.+6      	; 0xbfe <Set_PWM_Duty_Cycle+0xa>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	49 f1       	breq	.+82     	; 0xc4e <Set_PWM_Duty_Cycle+0x5a>
     bfc:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
     bfe:	64 36       	cpi	r22, 0x64	; 100
     c00:	e0 f4       	brcc	.+56     	; 0xc3a <Set_PWM_Duty_Cycle+0x46>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	86 0f       	add	r24, r22
     c06:	83 36       	cpi	r24, 0x63	; 99
     c08:	d8 f4       	brcc	.+54     	; 0xc40 <Set_PWM_Duty_Cycle+0x4c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	cb 01       	movw	r24, r22
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	68 0f       	add	r22, r24
     c18:	79 1f       	adc	r23, r25
     c1a:	cb 01       	movw	r24, r22
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	68 0f       	add	r22, r24
     c26:	79 1f       	adc	r23, r25
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	88 27       	eor	r24, r24
     c2e:	99 27       	eor	r25, r25
     c30:	86 1b       	sub	r24, r22
     c32:	97 0b       	sbc	r25, r23
     c34:	88 57       	subi	r24, 0x78	; 120
     c36:	9c 4e       	sbci	r25, 0xEC	; 236
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <Set_PWM_Duty_Cycle+0x50>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Set_PWM_Duty_Cycle+0x50>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	9f ef       	ldi	r25, 0xFF	; 255
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
    {
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
     c44:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     c48:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
            break;
     c4c:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
     c4e:	64 36       	cpi	r22, 0x64	; 100
     c50:	e0 f4       	brcc	.+56     	; 0xc8a <Set_PWM_Duty_Cycle+0x96>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	86 0f       	add	r24, r22
     c56:	83 36       	cpi	r24, 0x63	; 99
     c58:	d8 f4       	brcc	.+54     	; 0xc90 <Set_PWM_Duty_Cycle+0x9c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cb 01       	movw	r24, r22
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	68 0f       	add	r22, r24
     c68:	79 1f       	adc	r23, r25
     c6a:	cb 01       	movw	r24, r22
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	68 0f       	add	r22, r24
     c76:	79 1f       	adc	r23, r25
     c78:	66 0f       	add	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	88 27       	eor	r24, r24
     c7e:	99 27       	eor	r25, r25
     c80:	86 1b       	sub	r24, r22
     c82:	97 0b       	sbc	r25, r23
     c84:	88 57       	subi	r24, 0x78	; 120
     c86:	9c 4e       	sbci	r25, 0xEC	; 236
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <Set_PWM_Duty_Cycle+0xa0>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <Set_PWM_Duty_Cycle+0xa0>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	9f ef       	ldi	r25, 0xFF	; 255
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
            break;

        case pwm_channel_b:
            OCR1B = calc_OCR_count(new_duty_cycle);
     c94:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     c98:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
     c9c:	08 95       	ret

00000c9e <Init_Slave_Number_Setting_SM>:

****************************************************************************/
void Init_Slave_Number_Setting_SM(void)
{
    // Register timers
    Register_Timer(&Main_Timer, Post_Event);
     c9e:	68 e0       	ldi	r22, 0x08	; 8
     ca0:	73 e0       	ldi	r23, 0x03	; 3
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 03 09 	call	0x1206	; 0x1206 <Register_Timer>
    Register_Timer(&Auxiliary_Timer, Post_Event);
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	73 e0       	ldi	r23, 0x03	; 3
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 03 09 	call	0x1206	; 0x1206 <Register_Timer>
     cb6:	08 95       	ret

00000cb8 <Run_Slave_Number_Setting_SM>:
        This processes events for the slave number setting state machine.

****************************************************************************/
void Run_Slave_Number_Setting_SM(uint32_t event)
{
    switch (Current_State)
     cb8:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <Current_State>
     cbc:	21 30       	cpi	r18, 0x01	; 1
     cbe:	b1 f0       	breq	.+44     	; 0xcec <Run_Slave_Number_Setting_SM+0x34>
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <Run_Slave_Number_Setting_SM+0x10>
     cc2:	22 30       	cpi	r18, 0x02	; 2
     cc4:	a1 f1       	breq	.+104    	; 0xd2e <Run_Slave_Number_Setting_SM+0x76>
     cc6:	08 95       	ret
    {
        case IDLE_STATE:

            switch (event)
     cc8:	61 15       	cp	r22, r1
     cca:	78 40       	sbci	r23, 0x08	; 8
     ccc:	81 05       	cpc	r24, r1
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <Run_Slave_Number_Setting_SM+0x1c>
     cd2:	83 c0       	rjmp	.+262    	; 0xdda <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_PRESS:

                    // Start hold time timer
                    Start_Timer(&Auxiliary_Timer, ENTER_MODE_HOLD_TIME_MS);
     cd4:	40 e1       	ldi	r20, 0x10	; 16
     cd6:	57 e2       	ldi	r21, 0x27	; 39
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>

                    // Change state to ENTERING_SETTING_MODE_STATE
                    Current_State = ENTERING_SETTING_MODE_STATE;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Current_State>

                    break;
     cea:	08 95       	ret

            break;

        case ENTERING_SETTING_MODE_STATE:

            switch (event)
     cec:	68 30       	cpi	r22, 0x08	; 8
     cee:	71 05       	cpc	r23, r1
     cf0:	81 05       	cpc	r24, r1
     cf2:	91 05       	cpc	r25, r1
     cf4:	69 f0       	breq	.+26     	; 0xd10 <Run_Slave_Number_Setting_SM+0x58>
     cf6:	61 15       	cp	r22, r1
     cf8:	70 41       	sbci	r23, 0x10	; 16
     cfa:	81 05       	cpc	r24, r1
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <Run_Slave_Number_Setting_SM+0x4a>
     d00:	6c c0       	rjmp	.+216    	; 0xdda <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_RELEASE:

                    // Stop hold time timer
                    Stop_Timer(&Auxiliary_Timer);
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 97 09 	call	0x132e	; 0x132e <Stop_Timer>

                    // Change state to IDLE_STATE
                    Current_State = IDLE_STATE;
     d0a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Current_State>

                    break;
     d0e:	08 95       	ret

                case EVT_SETTING_MODE_AUX_TIMEOUT:

                    // Start overall setting mode timer
                    Start_Timer(&Main_Timer, MAX_TIME_IN_MODE_MS);
     d10:	40 e6       	ldi	r20, 0x60	; 96
     d12:	5a ee       	ldi	r21, 0xEA	; 234
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
     d20:	8e e1       	ldi	r24, 0x1E	; 30
     d22:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

                    // Change state to SETTING_MODE_STATE
                    Current_State = SETTING_MODE_STATE;
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Current_State>

                    break;
     d2c:	08 95       	ret

            break;

        case SETTING_MODE_STATE:

            switch (event)
     d2e:	68 30       	cpi	r22, 0x08	; 8
     d30:	71 05       	cpc	r23, r1
     d32:	81 05       	cpc	r24, r1
     d34:	91 05       	cpc	r25, r1
     d36:	69 f1       	breq	.+90     	; 0xd92 <Run_Slave_Number_Setting_SM+0xda>
     d38:	38 f4       	brcc	.+14     	; 0xd48 <Run_Slave_Number_Setting_SM+0x90>
     d3a:	64 30       	cpi	r22, 0x04	; 4
     d3c:	71 05       	cpc	r23, r1
     d3e:	81 05       	cpc	r24, r1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <Run_Slave_Number_Setting_SM+0x8e>
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <Run_Slave_Number_Setting_SM+0x10c>
     d46:	08 95       	ret
     d48:	61 15       	cp	r22, r1
     d4a:	28 e0       	ldi	r18, 0x08	; 8
     d4c:	72 07       	cpc	r23, r18
     d4e:	81 05       	cpc	r24, r1
     d50:	91 05       	cpc	r25, r1
     d52:	31 f0       	breq	.+12     	; 0xd60 <Run_Slave_Number_Setting_SM+0xa8>
     d54:	61 15       	cp	r22, r1
     d56:	70 41       	sbci	r23, 0x10	; 16
     d58:	81 05       	cpc	r24, r1
     d5a:	91 05       	cpc	r25, r1
     d5c:	69 f0       	breq	.+26     	; 0xd78 <Run_Slave_Number_Setting_SM+0xc0>
     d5e:	08 95       	ret

                    // The user pressed the button. Turn on the LED
                    //  and start the timer to check for hold to exit.

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
     d60:	8e e1       	ldi	r24, 0x1E	; 30
     d62:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

                    // Start aux timer for exit hold time
                    Start_Timer(&Auxiliary_Timer, EXIT_MODE_HOLD_TIME_MS);
     d66:	48 e8       	ldi	r20, 0x88	; 136
     d68:	53 e1       	ldi	r21, 0x13	; 19
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	86 e0       	ldi	r24, 0x06	; 6
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Start_Timer>

                    break;
     d76:	08 95       	ret

                    // The user released the button. Turn off the LED,
                    //  increment our counter, and stop the hold timer.

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

                    // Increment release counter
                    Release_Counter++;
     d7e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Release_Counter>
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Release_Counter>

                    // Stop aux timer for exit hold time
                    Stop_Timer(&Auxiliary_Timer);
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 97 09 	call	0x132e	; 0x132e <Stop_Timer>

                    break;
     d90:	08 95       	ret
                    // The user held the button and wants
                    //  to exit the mode and set the slave number.

                    // If the Release Counter is greater than number of
                    //  NUM_UNAVOIDABLE_RELEASES, then we got a new slave number
                    if (NUM_UNAVOIDABLE_RELEASES < Release_Counter)
     d92:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Release_Counter>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	48 f0       	brcs	.+18     	; 0xdac <Run_Slave_Number_Setting_SM+0xf4>
                    {
                        // Save the count-1 as the last set slave number
                        // It is count-1 because we enter this state with the button pressed
                        // so the first release doesn't mean anything
                        Last_Set_Slave_Number = Release_Counter-NUM_UNAVOIDABLE_RELEASES;
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Last_Set_Slave_Number>

                        // Post event to slave service to alert that new
                        //  slave number has been set
                        Post_Event(EVT_SLAVE_NUM_SET);
     da0:	60 e1       	ldi	r22, 0x10	; 16
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
                    }

                    // Stop the main timer
                    Stop_Timer(&Main_Timer);
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 97 09 	call	0x132e	; 0x132e <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
     dba:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
     dbe:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Current_State>

                    break;
     dc2:	08 95       	ret
                    // The user did not exit the mode properly within
                    //  the max mode time. Just go back to idle and
                    //  clear the number counter.

                    // Stop the aux timer, in case it was running
                    Stop_Timer(&Auxiliary_Timer);
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 97 09 	call	0x132e	; 0x132e <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
     dd2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
     dd6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Current_State>
     dda:	08 95       	ret

00000ddc <In_Slave_Number_Setting_Mode>:
                to the LED.

****************************************************************************/
bool In_Slave_Number_Setting_Mode(void)
{
    if (SETTING_MODE_STATE == Current_State) return true;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Current_State>
     de2:	92 30       	cpi	r25, 0x02	; 2
     de4:	09 f0       	breq	.+2      	; 0xde8 <In_Slave_Number_Setting_Mode+0xc>
     de6:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
     de8:	08 95       	ret

00000dea <Get_Last_Set_Slave_Number>:
        This function returns the last set slave number.

****************************************************************************/
uint8_t Get_Last_Set_Slave_Number(void)
{
    if ((LOWEST_SLAVE_NUMBER <= Last_Set_Slave_Number) && (MAX_NUM_SLAVES >= Last_Set_Slave_Number))
     dea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Last_Set_Slave_Number>
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	98 0f       	add	r25, r24
     df2:	9d 31       	cpi	r25, 0x1D	; 29
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <Get_Last_Set_Slave_Number+0xe>
    {
        return Last_Set_Slave_Number;
    }
    else
    {
        return INVALID_SLAVE_NUMBER;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     df8:	08 95       	ret

00000dfa <Init_Slave_Service>:

****************************************************************************/
void Init_Slave_Service(void)
{
    // First, initialize light to LIGHT_OFF
    Set_Light_Intensity(LIGHT_OFF);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>

    // Second, release the servo so it does not move
    // (i.e. stop the PPM commands to the servo)
    Release_Analog_Servo();
     e00:	0e 94 0d 01 	call	0x21a	; 0x21a <Release_Analog_Servo>

    // Initialize command and status arrays to reflect our state
    Write_Intensity_Data(p_My_Command_Data, INTENSITY_NON_COMMAND);
     e04:	6f ef       	ldi	r22, 0xFF	; 255
     e06:	8b e3       	ldi	r24, 0x3B	; 59
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 3a 02 	call	0x474	; 0x474 <Write_Intensity_Data>
    Write_Position_Data(p_My_Command_Data, POSITION_NON_COMMAND);
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	8b e3       	ldi	r24, 0x3B	; 59
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 3d 02 	call	0x47a	; 0x47a <Write_Position_Data>
    Write_Intensity_Data(p_My_Status_Data, LIGHT_OFF);
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	88 e3       	ldi	r24, 0x38	; 56
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 3a 02 	call	0x474	; 0x474 <Write_Intensity_Data>
    Write_Position_Data(p_My_Status_Data, SERVO_STAY);
     e24:	6f ef       	ldi	r22, 0xFF	; 255
     e26:	7f ef       	ldi	r23, 0xFF	; 255
     e28:	88 e3       	ldi	r24, 0x38	; 56
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 3d 02 	call	0x47a	; 0x47a <Write_Position_Data>

    // Read our slave number from flash
    Read_Data_From_EEPROM(NODE_ID_ADDR, &My_Node_ID, NODE_ID_LEN);
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	6e e3       	ldi	r22, 0x3E	; 62
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 4c 02 	call	0x498	; 0x498 <Read_Data_From_EEPROM>

    // Initialize LIN
    MS_LIN_Initialize(&My_Node_ID, p_My_Command_Data, p_My_Status_Data);
     e3e:	48 e3       	ldi	r20, 0x38	; 56
     e40:	51 e0       	ldi	r21, 0x01	; 1
     e42:	6b e3       	ldi	r22, 0x3B	; 59
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	8e e3       	ldi	r24, 0x3E	; 62
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 04 05 	call	0xa08	; 0xa08 <MS_LIN_Initialize>
     e4e:	08 95       	ret

00000e50 <Run_Slave_Service>:
    Description
        Processes events for this slave node

****************************************************************************/
void Run_Slave_Service(uint32_t event_mask)
{
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
    switch(event_mask)
     e56:	61 30       	cpi	r22, 0x01	; 1
     e58:	71 05       	cpc	r23, r1
     e5a:	81 05       	cpc	r24, r1
     e5c:	91 05       	cpc	r25, r1
     e5e:	01 f1       	breq	.+64     	; 0xea0 <Run_Slave_Service+0x50>
     e60:	60 31       	cpi	r22, 0x10	; 16
     e62:	71 05       	cpc	r23, r1
     e64:	81 05       	cpc	r24, r1
     e66:	91 05       	cpc	r25, r1
     e68:	09 f0       	breq	.+2      	; 0xe6c <Run_Slave_Service+0x1c>
     e6a:	65 c0       	rjmp	.+202    	; 0xf36 <Run_Slave_Service+0xe6>
    {
        case EVT_SLAVE_NUM_SET:
            // A new slave number has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
     e6c:	0e 94 f5 06 	call	0xdea	; 0xdea <Get_Last_Set_Slave_Number>
     e70:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <My_Node_ID>
     e74:	96 95       	lsr	r25
     e76:	89 17       	cp	r24, r25
     e78:	09 f4       	brne	.+2      	; 0xe7c <Run_Slave_Service+0x2c>
     e7a:	5d c0       	rjmp	.+186    	; 0xf36 <Run_Slave_Service+0xe6>
                    &&
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
     e7c:	0e 94 f5 06 	call	0xdea	; 0xdea <Get_Last_Set_Slave_Number>
        case EVT_SLAVE_NUM_SET:
            // A new slave number has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
                    &&
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	09 f4       	brne	.+2      	; 0xe86 <Run_Slave_Service+0x36>
     e84:	58 c0       	rjmp	.+176    	; 0xf36 <Run_Slave_Service+0xe6>
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
                )
            {
                // Set our ID based on the user set slave number
                My_Node_ID = GET_SLAVE_BASE_ID(Get_Last_Set_Slave_Number());
     e86:	0e 94 f5 06 	call	0xdea	; 0xdea <Get_Last_Set_Slave_Number>
     e8a:	88 0f       	add	r24, r24
     e8c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <My_Node_ID>

                // Save our new ID in flash memory
                Write_Data_To_EEPROM(NODE_ID_ADDR, &My_Node_ID, NODE_ID_LEN);
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	6e e3       	ldi	r22, 0x3E	; 62
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Write_Data_To_EEPROM>
     e9e:	4b c0       	rjmp	.+150    	; 0xf36 <Run_Slave_Service+0xe6>

        case EVT_SLAVE_NEW_CMD:
            // We got a new command.

            // Process commands if we're not in the setting mode
            if (!In_Slave_Number_Setting_Mode())
     ea0:	0e 94 ee 06 	call	0xddc	; 0xddc <In_Slave_Number_Setting_Mode>
     ea4:	81 11       	cpse	r24, r1
     ea6:	47 c0       	rjmp	.+142    	; 0xf36 <Run_Slave_Service+0xe6>
****************************************************************************/
static void process_intensity_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ea8:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eaa:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (INTENSITY_NON_COMMAND != Get_Intensity_Data(p_My_Command_Data))
     eac:	8b e3       	ldi	r24, 0x3B	; 59
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 33 02 	call	0x466	; 0x466 <Get_Intensity_Data>
     eb4:	8f 3f       	cpi	r24, 0xFF	; 255
     eb6:	d1 f0       	breq	.+52     	; 0xeec <Run_Slave_Service+0x9c>
        {
            // If command differs from our status execute intensity command
            if (Get_Intensity_Data(p_My_Status_Data) != Get_Intensity_Data(p_My_Command_Data))
     eb8:	88 e3       	ldi	r24, 0x38	; 56
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 33 02 	call	0x466	; 0x466 <Get_Intensity_Data>
     ec0:	c8 2f       	mov	r28, r24
     ec2:	8b e3       	ldi	r24, 0x3B	; 59
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 33 02 	call	0x466	; 0x466 <Get_Intensity_Data>
     eca:	c8 17       	cp	r28, r24
     ecc:	79 f0       	breq	.+30     	; 0xeec <Run_Slave_Service+0x9c>
            {
                // Update our status as the command
                Write_Intensity_Data(p_My_Status_Data, Get_Intensity_Data(p_My_Command_Data));
     ece:	8b e3       	ldi	r24, 0x3B	; 59
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 33 02 	call	0x466	; 0x466 <Get_Intensity_Data>
     ed6:	68 2f       	mov	r22, r24
     ed8:	88 e3       	ldi	r24, 0x38	; 56
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 3a 02 	call	0x474	; 0x474 <Write_Intensity_Data>

                // Set light intensity
                Set_Light_Intensity(Get_Intensity_Data(p_My_Status_Data));
     ee0:	88 e3       	ldi	r24, 0x38	; 56
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 33 02 	call	0x466	; 0x466 <Get_Intensity_Data>
     ee8:	0e 94 2e 04 	call	0x85c	; 0x85c <Set_Light_Intensity>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eec:	df bf       	out	0x3f, r29	; 63
****************************************************************************/
static void process_position_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     eee:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ef0:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (POSITION_NON_COMMAND != Get_Position_Data(p_My_Command_Data))
     ef2:	8b e3       	ldi	r24, 0x3B	; 59
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	0e 94 36 02 	call	0x46c	; 0x46c <Get_Position_Data>
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	d9 f0       	breq	.+54     	; 0xf34 <Run_Slave_Service+0xe4>
        {
            // If command differs from our status and position is valid, execute move command
            if (Get_Position_Data(p_My_Status_Data) != Get_Position_Data(p_My_Command_Data))
     efe:	88 e3       	ldi	r24, 0x38	; 56
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 36 02 	call	0x46c	; 0x46c <Get_Position_Data>
     f06:	ec 01       	movw	r28, r24
     f08:	8b e3       	ldi	r24, 0x3B	; 59
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 36 02 	call	0x46c	; 0x46c <Get_Position_Data>
     f10:	c8 17       	cp	r28, r24
     f12:	d9 07       	cpc	r29, r25
     f14:	79 f0       	breq	.+30     	; 0xf34 <Run_Slave_Service+0xe4>
            {
                // Update our status as the command
                Write_Position_Data(p_My_Status_Data, Get_Position_Data(p_My_Command_Data));
     f16:	8b e3       	ldi	r24, 0x3B	; 59
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 36 02 	call	0x46c	; 0x46c <Get_Position_Data>
     f1e:	bc 01       	movw	r22, r24
     f20:	88 e3       	ldi	r24, 0x38	; 56
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 3d 02 	call	0x47a	; 0x47a <Write_Position_Data>

                // Change servo position, based on our new status
                Move_Analog_Servo_To_Position(Get_Position_Data(p_My_Status_Data));
     f28:	88 e3       	ldi	r24, 0x38	; 56
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 36 02 	call	0x46c	; 0x46c <Get_Position_Data>
     f30:	0e 94 9d 00 	call	0x13a	; 0x13a <Move_Analog_Servo_To_Position>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f34:	1f bf       	out	0x3f, r17	; 63
            break;

        default:
            break;
    }
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
     f3e:	af 92       	push	r10
     f40:	bf 92       	push	r11
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	d8 2e       	mov	r13, r24
     f54:	c6 2e       	mov	r12, r22
     f56:	ea 01       	movw	r28, r20
     f58:	79 01       	movw	r14, r18
	counter_value = query_counter();
     f5a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <query_counter>
     f5e:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <counter_value>
     f62:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <counter_value+0x1>
     f66:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <counter_value+0x2>
     f6a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     f6e:	8d 2d       	mov	r24, r13
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	8c 01       	movw	r16, r24
     f74:	0e 5f       	subi	r16, 0xFE	; 254
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     f78:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <Next_Available_Row>
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	de 01       	movw	r26, r28
     f80:	12 97       	sbiw	r26, 0x02	; 2
     f82:	c9 01       	movw	r24, r18
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     f94:	9c 01       	movw	r18, r24
     f96:	22 5a       	subi	r18, 0xA2	; 162
     f98:	3e 4f       	sbci	r19, 0xFE	; 254
     f9a:	59 01       	movw	r10, r18
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
     fa0:	30 97       	sbiw	r30, 0x00	; 0
     fa2:	19 f4       	brne	.+6      	; 0xfaa <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     fa4:	e5 01       	movw	r28, r10
     fa6:	d8 82       	st	Y, r13
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
     faa:	e1 30       	cpi	r30, 0x01	; 1
     fac:	f1 05       	cpc	r31, r1
     fae:	19 f4       	brne	.+6      	; 0xfb6 <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     fb0:	e9 01       	movw	r28, r18
     fb2:	c8 82       	st	Y, r12
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
     fb6:	6c 91       	ld	r22, X
     fb8:	af 01       	movw	r20, r30
     fba:	48 0f       	add	r20, r24
     fbc:	59 1f       	adc	r21, r25
     fbe:	42 5a       	subi	r20, 0xA2	; 162
     fc0:	5e 4f       	sbci	r21, 0xFE	; 254
     fc2:	ea 01       	movw	r28, r20
     fc4:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     fc6:	31 96       	adiw	r30, 0x01	; 1
     fc8:	11 96       	adiw	r26, 0x01	; 1
     fca:	e0 17       	cp	r30, r16
     fcc:	f1 07       	cpc	r31, r17
     fce:	44 f3       	brlt	.-48     	; 0xfa0 <Write_SPI+0x62>
     fd0:	32 c0       	rjmp	.+100    	; 0x1036 <Write_SPI+0xf8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
     fd2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Next_Available_Row>
     fd6:	89 30       	cpi	r24, 0x09	; 9
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
     fda:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <Next_Available_Row>
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
     fe6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <Query_SPI_State>
     fea:	81 11       	cpse	r24, r1
     fec:	27 c0       	rjmp	.+78     	; 0x103c <Write_SPI+0xfe>
     fee:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Buffer_Index>
     ff2:	82 2f       	mov	r24, r18
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	82 0f       	add	r24, r18
     ff8:	91 1d       	adc	r25, r1
     ffa:	82 0f       	add	r24, r18
     ffc:	91 1d       	adc	r25, r1
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e2 5a       	subi	r30, 0xA2	; 162
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	8f 3f       	cpi	r24, 0xFF	; 255
    100c:	b9 f0       	breq	.+46     	; 0x103c <Write_SPI+0xfe>
    {
        Post_Event(EVT_SPI_START);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e4       	ldi	r23, 0x40	; 64
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
    101a:	10 c0       	rjmp	.+32     	; 0x103c <Write_SPI+0xfe>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
    101c:	f7 01       	movw	r30, r14
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Next_Available_Row>
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	e6 5b       	subi	r30, 0xB6	; 182
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	ce cf       	rjmp	.-100    	; 0xfd2 <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
    1036:	c1 10       	cpse	r12, r1
    1038:	f1 cf       	rjmp	.-30     	; 0x101c <Write_SPI+0xde>
    103a:	cb cf       	rjmp	.-106    	; 0xfd2 <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
    {
        Post_Event(EVT_SPI_START);
    }
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	08 95       	ret

00001052 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
    1074:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Master_Slave_Identifier>
    1078:	81 11       	cpse	r24, r1
    107a:	8b c0       	rjmp	.+278    	; 0x1192 <__vector_14+0x140>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
    107c:	8d b5       	in	r24, 0x2d	; 45
        // Do nothing if statement to "use" the variable
        if (SPSR_Status);
		
		// Once a transmit has been completed
		if (In_Tx)
    107e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <In_Tx>
    1082:	88 23       	and	r24, r24
    1084:	e1 f0       	breq	.+56     	; 0x10be <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
    1086:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <TX_Index>
    108a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Expected_TX_Length>
    108e:	89 17       	cp	r24, r25
    1090:	a0 f0       	brcs	.+40     	; 0x10ba <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
    1092:	98 13       	cpse	r25, r24
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <__vector_14+0x52>
    1096:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Expected_RX_Length>
    109a:	81 11       	cpse	r24, r1
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <__vector_14+0x52>
				{
					In_Tx = false;									
    109e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <In_Tx>
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e8       	ldi	r23, 0x80	; 128
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
    10b0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <In_Tx>
    10b4:	81 11       	cpse	r24, r1
    10b6:	6d c0       	rjmp	.+218    	; 0x1192 <__vector_14+0x140>
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
    10ba:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
    10be:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <Expected_RX_Length>
    10c2:	99 23       	and	r25, r25
    10c4:	09 f1       	breq	.+66     	; 0x1108 <__vector_14+0xb6>
			{
                if (Receive_List[Buffer_Index][RX_Index] == NULL)
    10c6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <RX_Index>
    10ca:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Buffer_Index>
    10ce:	e8 2f       	mov	r30, r24
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	e2 0f       	add	r30, r18
    10d4:	f1 1d       	adc	r31, r1
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	e6 5b       	subi	r30, 0xB6	; 182
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	01 90       	ld	r0, Z+
    10e0:	f0 81       	ld	r31, Z
    10e2:	e0 2d       	mov	r30, r0
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__vector_14+0x9a>
                {
                    if (SPDR);
    10e8:	2e b5       	in	r18, 0x2e	; 46
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <__vector_14+0x9e>
                }
                else
                {
                    *(Receive_List[Buffer_Index][RX_Index]) = SPDR;
    10ec:	2e b5       	in	r18, 0x2e	; 46
    10ee:	20 83       	st	Z, r18
                }
				RX_Index++;				
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
    10f6:	89 17       	cp	r24, r25
    10f8:	38 f4       	brcc	.+14     	; 0x1108 <__vector_14+0xb6>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
    1106:	45 c0       	rjmp	.+138    	; 0x1192 <__vector_14+0x140>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
    1108:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <Buffer_Index>
    110c:	83 2f       	mov	r24, r19
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	ac 01       	movw	r20, r24
    1112:	44 0f       	add	r20, r20
    1114:	55 1f       	adc	r21, r21
    1116:	fa 01       	movw	r30, r20
    1118:	e8 0f       	add	r30, r24
    111a:	f9 1f       	adc	r31, r25
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	e2 5a       	subi	r30, 0xA2	; 162
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	20 83       	st	Z, r18
    1128:	21 83       	std	Z+1, r18	; 0x01
    112a:	22 83       	std	Z+2, r18	; 0x02
    112c:	23 83       	std	Z+3, r18	; 0x03
    112e:	24 83       	std	Z+4, r18	; 0x04
    1130:	fa 01       	movw	r30, r20
    1132:	e8 0f       	add	r30, r24
    1134:	f9 1f       	adc	r31, r25
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e2 5a       	subi	r30, 0xA2	; 162
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
    1140:	fa 01       	movw	r30, r20
    1142:	e6 5b       	subi	r30, 0xB6	; 182
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	11 82       	std	Z+1, r1	; 0x01
    1148:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
    114a:	39 30       	cpi	r19, 0x09	; 9
    114c:	19 f4       	brne	.+6      	; 0x1154 <__vector_14+0x102>
    {
        Buffer_Index = 0;
    114e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <Buffer_Index>
    1152:	03 c0       	rjmp	.+6      	; 0x115a <__vector_14+0x108>
    }
    else
    {
        Buffer_Index++;
    1154:	3f 5f       	subi	r19, 0xFF	; 255
    1156:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
    115a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Buffer_Index>
    115e:	82 2f       	mov	r24, r18
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	82 0f       	add	r24, r18
    1164:	91 1d       	adc	r25, r1
    1166:	82 0f       	add	r24, r18
    1168:	91 1d       	adc	r25, r1
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	fc 01       	movw	r30, r24
    1170:	e2 5a       	subi	r30, 0xA2	; 162
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	80 81       	ld	r24, Z
    1176:	8f 3f       	cpi	r24, 0xFF	; 255
    1178:	31 f0       	breq	.+12     	; 0x1186 <__vector_14+0x134>
    {
        Post_Event(EVT_SPI_START);
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e4       	ldi	r23, 0x40	; 64
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 08 03 	call	0x610	; 0x610 <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
    11b4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Current_State>
    11b8:	08 95       	ret

000011ba <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
    11ba:	ec e9       	ldi	r30, 0x9C	; 156
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	a0 ea       	ldi	r26, 0xA0	; 160
    11c0:	b1 e0       	ldi	r27, 0x01	; 1
    11c2:	8d ed       	ldi	r24, 0xDD	; 221
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	11 82       	std	Z+1, r1	; 0x01
    11c8:	10 82       	st	Z, r1
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	12 82       	std	Z+2, r1	; 0x02
    11ce:	1c 92       	st	X, r1
    11d0:	15 82       	std	Z+5, r1	; 0x05
    11d2:	16 82       	std	Z+6, r1	; 0x06
    11d4:	17 82       	std	Z+7, r1	; 0x07
    11d6:	10 86       	std	Z+8, r1	; 0x08
    11d8:	11 86       	std	Z+9, r1	; 0x09
    11da:	12 86       	std	Z+10, r1	; 0x0a
    11dc:	13 86       	std	Z+11, r1	; 0x0b
    11de:	14 86       	std	Z+12, r1	; 0x0c
    11e0:	3d 96       	adiw	r30, 0x0d	; 13
    11e2:	1d 96       	adiw	r26, 0x0d	; 13
    11e4:	e8 17       	cp	r30, r24
    11e6:	f9 07       	cpc	r31, r25
    11e8:	71 f7       	brne	.-36     	; 0x11c6 <Init_Timer_Module+0xc>
    11ea:	15 bc       	out	0x25, r1	; 37
    11ec:	16 bc       	out	0x26, r1	; 38
    11ee:	18 bc       	out	0x28, r1	; 40
    11f0:	88 b5       	in	r24, 0x28	; 40
    11f2:	83 58       	subi	r24, 0x83	; 131
    11f4:	88 bd       	out	0x28, r24	; 40
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    11fc:	16 bc       	out	0x26, r1	; 38
    11fe:	86 b5       	in	r24, 0x26	; 38
    1200:	83 60       	ori	r24, 0x03	; 3
    1202:	86 bd       	out	0x26, r24	; 38
    1204:	08 95       	ret

00001206 <Register_Timer>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	c0 91 9c 01 	lds	r28, 0x019C	; 0x80019c <Timers>
    120e:	d0 91 9d 01 	lds	r29, 0x019D	; 0x80019d <Timers+0x1>
    1212:	c8 17       	cp	r28, r24
    1214:	d9 07       	cpc	r29, r25
    1216:	09 f4       	brne	.+2      	; 0x121a <Register_Timer+0x14>
    1218:	43 c0       	rjmp	.+134    	; 0x12a0 <Register_Timer+0x9a>
    121a:	ac e9       	ldi	r26, 0x9C	; 156
    121c:	b1 e0       	ldi	r27, 0x01	; 1
    121e:	40 ed       	ldi	r20, 0xD0	; 208
    1220:	51 e0       	ldi	r21, 0x01	; 1
    1222:	fd 01       	movw	r30, r26
    1224:	25 85       	ldd	r18, Z+13	; 0x0d
    1226:	36 85       	ldd	r19, Z+14	; 0x0e
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	c9 f1       	breq	.+114    	; 0x12a0 <Register_Timer+0x9a>
    122e:	3d 96       	adiw	r30, 0x0d	; 13
    1230:	e4 17       	cp	r30, r20
    1232:	f5 07       	cpc	r31, r21
    1234:	b9 f7       	brne	.-18     	; 0x1224 <Register_Timer+0x1e>
    1236:	2f c0       	rjmp	.+94     	; 0x1296 <Register_Timer+0x90>
    1238:	1d 96       	adiw	r26, 0x0d	; 13
    123a:	4d 91       	ld	r20, X+
    123c:	5c 91       	ld	r21, X
    123e:	1e 97       	sbiw	r26, 0x0e	; 14
    1240:	45 2b       	or	r20, r21
    1242:	11 f5       	brne	.+68     	; 0x1288 <Register_Timer+0x82>
    1244:	02 c0       	rjmp	.+4      	; 0x124a <Register_Timer+0x44>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4f b7       	in	r20, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	f9 01       	movw	r30, r18
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	2e 0f       	add	r18, r30
    1262:	3f 1f       	adc	r19, r31
    1264:	f9 01       	movw	r30, r18
    1266:	e4 56       	subi	r30, 0x64	; 100
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	73 83       	std	Z+3, r23	; 0x03
    1270:	62 83       	std	Z+2, r22	; 0x02
    1272:	14 82       	std	Z+4, r1	; 0x04
    1274:	15 82       	std	Z+5, r1	; 0x05
    1276:	16 82       	std	Z+6, r1	; 0x06
    1278:	17 82       	std	Z+7, r1	; 0x07
    127a:	10 86       	std	Z+8, r1	; 0x08
    127c:	11 86       	std	Z+9, r1	; 0x09
    127e:	12 86       	std	Z+10, r1	; 0x0a
    1280:	13 86       	std	Z+11, r1	; 0x0b
    1282:	14 86       	std	Z+12, r1	; 0x0c
    1284:	4f bf       	out	0x3f, r20	; 63
    1286:	0c c0       	rjmp	.+24     	; 0x12a0 <Register_Timer+0x9a>
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	1d 96       	adiw	r26, 0x0d	; 13
    128e:	25 30       	cpi	r18, 0x05	; 5
    1290:	31 05       	cpc	r19, r1
    1292:	91 f6       	brne	.-92     	; 0x1238 <Register_Timer+0x32>
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <Register_Timer+0x9a>
    1296:	cd 2b       	or	r28, r29
    1298:	b1 f2       	breq	.-84     	; 0x1246 <Register_Timer+0x40>
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	cc cf       	rjmp	.-104    	; 0x1238 <Register_Timer+0x32>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <Start_Timer>:
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <Timers>
    12b2:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <Timers+0x1>
    12b6:	28 17       	cp	r18, r24
    12b8:	39 07       	cpc	r19, r25
    12ba:	51 f0       	breq	.+20     	; 0x12d0 <Start_Timer+0x2a>
    12bc:	ec e9       	ldi	r30, 0x9C	; 156
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	a5 85       	ldd	r26, Z+13	; 0x0d
    12c6:	b6 85       	ldd	r27, Z+14	; 0x0e
    12c8:	a8 17       	cp	r26, r24
    12ca:	b9 07       	cpc	r27, r25
    12cc:	29 f5       	brne	.+74     	; 0x1318 <Start_Timer+0x72>
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <Start_Timer+0x2e>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	8f b7       	in	r24, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	f9 01       	movw	r30, r18
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	e2 0f       	add	r30, r18
    12e0:	f3 1f       	adc	r31, r19
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	2e 0f       	add	r18, r30
    12ec:	3f 1f       	adc	r19, r31
    12ee:	f9 01       	movw	r30, r18
    12f0:	e4 56       	subi	r30, 0x64	; 100
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	94 83       	std	Z+4, r25	; 0x04
    12f8:	15 82       	std	Z+5, r1	; 0x05
    12fa:	16 82       	std	Z+6, r1	; 0x06
    12fc:	17 82       	std	Z+7, r1	; 0x07
    12fe:	10 86       	std	Z+8, r1	; 0x08
    1300:	6a 01       	movw	r12, r20
    1302:	7b 01       	movw	r14, r22
    1304:	cc 0c       	add	r12, r12
    1306:	dd 1c       	adc	r13, r13
    1308:	ee 1c       	adc	r14, r14
    130a:	ff 1c       	adc	r15, r15
    130c:	c1 86       	std	Z+9, r12	; 0x09
    130e:	d2 86       	std	Z+10, r13	; 0x0a
    1310:	e3 86       	std	Z+11, r14	; 0x0b
    1312:	f4 86       	std	Z+12, r15	; 0x0c
    1314:	8f bf       	out	0x3f, r24	; 63
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <Start_Timer+0x7e>
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	3d 96       	adiw	r30, 0x0d	; 13
    131e:	25 30       	cpi	r18, 0x05	; 5
    1320:	31 05       	cpc	r19, r1
    1322:	81 f6       	brne	.-96     	; 0x12c4 <Start_Timer+0x1e>
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	08 95       	ret

0000132e <Stop_Timer>:
    132e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <Timers>
    1332:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <Timers+0x1>
    1336:	28 17       	cp	r18, r24
    1338:	39 07       	cpc	r19, r25
    133a:	51 f0       	breq	.+20     	; 0x1350 <Stop_Timer+0x22>
    133c:	ec e9       	ldi	r30, 0x9C	; 156
    133e:	f1 e0       	ldi	r31, 0x01	; 1
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	45 85       	ldd	r20, Z+13	; 0x0d
    1346:	56 85       	ldd	r21, Z+14	; 0x0e
    1348:	48 17       	cp	r20, r24
    134a:	59 07       	cpc	r21, r25
    134c:	b1 f4       	brne	.+44     	; 0x137a <Stop_Timer+0x4c>
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <Stop_Timer+0x26>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8f b7       	in	r24, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	f9 01       	movw	r30, r18
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	e2 0f       	add	r30, r18
    1360:	f3 1f       	adc	r31, r19
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	2e 0f       	add	r18, r30
    136c:	3f 1f       	adc	r19, r31
    136e:	f9 01       	movw	r30, r18
    1370:	e4 56       	subi	r30, 0x64	; 100
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	14 82       	std	Z+4, r1	; 0x04
    1376:	8f bf       	out	0x3f, r24	; 63
    1378:	08 95       	ret
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	3d 96       	adiw	r30, 0x0d	; 13
    1380:	25 30       	cpi	r18, 0x05	; 5
    1382:	31 05       	cpc	r19, r1
    1384:	f9 f6       	brne	.-66     	; 0x1344 <Stop_Timer+0x16>
    1386:	08 95       	ret

00001388 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
    1388:	1f 92       	push	r1
    138a:	0f 92       	push	r0
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	0f 92       	push	r0
    1390:	11 24       	eor	r1, r1
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
    13b6:	88 b5       	in	r24, 0x28	; 40
    13b8:	83 58       	subi	r24, 0x83	; 131
    13ba:	88 bd       	out	0x28, r24	; 40
    13bc:	00 ea       	ldi	r16, 0xA0	; 160
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	cc e9       	ldi	r28, 0x9C	; 156
    13c2:	d1 e0       	ldi	r29, 0x01	; 1
    13c4:	0f 2e       	mov	r0, r31
    13c6:	fd ed       	ldi	r31, 0xDD	; 221
    13c8:	ef 2e       	mov	r14, r31
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	ff 2e       	mov	r15, r31
    13ce:	f0 2d       	mov	r31, r0
    13d0:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	81 f1       	breq	.+96     	; 0x1438 <__vector_10+0xb0>
    13d8:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	ab 85       	ldd	r26, Y+11	; 0x0b
    13e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	b9 f0       	breq	.+46     	; 0x1418 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
    13ea:	4d 81       	ldd	r20, Y+5	; 0x05
    13ec:	5e 81       	ldd	r21, Y+6	; 0x06
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	4f 5f       	subi	r20, 0xFF	; 255
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	6f 4f       	sbci	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	4d 83       	std	Y+5, r20	; 0x05
    13fc:	5e 83       	std	Y+6, r21	; 0x06
    13fe:	6f 83       	std	Y+7, r22	; 0x07
    1400:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	a1 09       	sbc	r26, r1
    1406:	b1 09       	sbc	r27, r1
    1408:	89 87       	std	Y+9, r24	; 0x09
    140a:	9a 87       	std	Y+10, r25	; 0x0a
    140c:	ab 87       	std	Y+11, r26	; 0x0b
    140e:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
    1410:	89 2b       	or	r24, r25
    1412:	8a 2b       	or	r24, r26
    1414:	8b 2b       	or	r24, r27
    1416:	81 f4       	brne	.+32     	; 0x1438 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
    1418:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
    141a:	d9 01       	movw	r26, r18
    141c:	12 96       	adiw	r26, 0x02	; 2
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	13 97       	sbiw	r26, 0x03	; 3
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	41 f0       	breq	.+16     	; 0x1438 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
    1428:	8d 91       	ld	r24, X+
    142a:	9c 91       	ld	r25, X
    142c:	dc 01       	movw	r26, r24
    142e:	6d 91       	ld	r22, X+
    1430:	7d 91       	ld	r23, X+
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	09 95       	icall
    1438:	03 5f       	subi	r16, 0xF3	; 243
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    143e:	ce 15       	cp	r28, r14
    1440:	df 05       	cpc	r29, r15
    1442:	31 f6       	brne	.-116    	; 0x13d0 <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__udivmodsi4>:
    1472:	a1 e2       	ldi	r26, 0x21	; 33
    1474:	1a 2e       	mov	r1, r26
    1476:	aa 1b       	sub	r26, r26
    1478:	bb 1b       	sub	r27, r27
    147a:	fd 01       	movw	r30, r26
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <__udivmodsi4_ep>

0000147e <__udivmodsi4_loop>:
    147e:	aa 1f       	adc	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	ee 1f       	adc	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	a2 17       	cp	r26, r18
    1488:	b3 07       	cpc	r27, r19
    148a:	e4 07       	cpc	r30, r20
    148c:	f5 07       	cpc	r31, r21
    148e:	20 f0       	brcs	.+8      	; 0x1498 <__udivmodsi4_ep>
    1490:	a2 1b       	sub	r26, r18
    1492:	b3 0b       	sbc	r27, r19
    1494:	e4 0b       	sbc	r30, r20
    1496:	f5 0b       	sbc	r31, r21

00001498 <__udivmodsi4_ep>:
    1498:	66 1f       	adc	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	1a 94       	dec	r1
    14a2:	69 f7       	brne	.-38     	; 0x147e <__udivmodsi4_loop>
    14a4:	60 95       	com	r22
    14a6:	70 95       	com	r23
    14a8:	80 95       	com	r24
    14aa:	90 95       	com	r25
    14ac:	9b 01       	movw	r18, r22
    14ae:	ac 01       	movw	r20, r24
    14b0:	bd 01       	movw	r22, r26
    14b2:	cf 01       	movw	r24, r30
    14b4:	08 95       	ret

000014b6 <_exit>:
    14b6:	f8 94       	cli

000014b8 <__stop_program>:
    14b8:	ff cf       	rjmp	.-2      	; 0x14b8 <__stop_program>
