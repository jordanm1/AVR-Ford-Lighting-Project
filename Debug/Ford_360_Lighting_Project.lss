
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800110  00800110  00001038  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002de3  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016d0  00000000  00000000  000041bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a77  00000000  00000000  0000588f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  00007308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d07  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000153e  00000000  00000000  00008717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00009c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_3>
  10:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_4>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_9>
  28:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_10>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_12>
  34:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_13>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_15>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e4 e9       	ldi	r30, 0x94	; 148
  64:	ff e0       	ldi	r31, 0x0F	; 15
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a0 31       	cpi	r26, 0x10	; 16
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	a0 e1       	ldi	r26, 0x10	; 16
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	aa 39       	cpi	r26, 0x9A	; 154
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 b5 03 	call	0x76a	; 0x76a <main>
  86:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Init_ADC_Module>:

****************************************************************************/
void Start_ADC_Measurement(void)
{
    // Writing this bit kicks off the ADC measurement
    ADCSRA |= (1<<ADSC);
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	80 83       	st	Z, r24
  98:	a7 e7       	ldi	r26, 0x77	; 119
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	8c 91       	ld	r24, X
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	8c 93       	st	X, r24
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	80 83       	st	Z, r24
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 68       	ori	r24, 0x88	; 136
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
  e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <stop_signal>:
    }
    else
    {
        return true;
    }
}
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 b9 04 	call	0x972	; 0x972 <Set_PWM_Duty_Cycle>
 106:	08 95       	ret

00000108 <Init_Analog_Servo_Driver>:
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	cb 01       	movw	r24, r22
 10e:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
 112:	e3 e8       	ldi	r30, 0x83	; 131
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	80 83       	st	Z, r24
 11c:	2b 98       	cbi	0x05, 3	; 5
 11e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
 12c:	6f e7       	ldi	r22, 0x7F	; 127
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 e1       	ldi	r24, 0x11	; 17
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Register_Timer>
 138:	08 95       	ret

0000013a <Move_Analog_Servo_To_Position>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	0f ef       	ldi	r16, 0xFF	; 255
 142:	90 07       	cpc	r25, r16
 144:	09 f4       	brne	.+2      	; 0x148 <Move_Analog_Servo_To_Position+0xe>
 146:	66 c0       	rjmp	.+204    	; 0x214 <Move_Analog_Servo_To_Position+0xda>
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ac 01       	movw	r20, r24
 14e:	bd 01       	movw	r22, r26
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	66 1f       	adc	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	66 1f       	adc	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	66 1f       	adc	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	8a 01       	movw	r16, r20
 16a:	9b 01       	movw	r18, r22
 16c:	00 0f       	add	r16, r16
 16e:	11 1f       	adc	r17, r17
 170:	22 1f       	adc	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	00 0f       	add	r16, r16
 176:	11 1f       	adc	r17, r17
 178:	22 1f       	adc	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	40 0f       	add	r20, r16
 17e:	51 1f       	adc	r21, r17
 180:	62 1f       	adc	r22, r18
 182:	73 1f       	adc	r23, r19
 184:	8a 01       	movw	r16, r20
 186:	9b 01       	movw	r18, r22
 188:	00 0f       	add	r16, r16
 18a:	11 1f       	adc	r17, r17
 18c:	22 1f       	adc	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
 194:	22 1f       	adc	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	40 0f       	add	r20, r16
 19a:	51 1f       	adc	r21, r17
 19c:	62 1f       	adc	r22, r18
 19e:	73 1f       	adc	r23, r19
 1a0:	8a 01       	movw	r16, r20
 1a2:	9b 01       	movw	r18, r22
 1a4:	00 0f       	add	r16, r16
 1a6:	11 1f       	adc	r17, r17
 1a8:	22 1f       	adc	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	00 0f       	add	r16, r16
 1ae:	11 1f       	adc	r17, r17
 1b0:	22 1f       	adc	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	40 0f       	add	r20, r16
 1b6:	51 1f       	adc	r21, r17
 1b8:	62 1f       	adc	r22, r18
 1ba:	73 1f       	adc	r23, r19
 1bc:	8a 01       	movw	r16, r20
 1be:	9b 01       	movw	r18, r22
 1c0:	00 0f       	add	r16, r16
 1c2:	11 1f       	adc	r17, r17
 1c4:	22 1f       	adc	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	00 0f       	add	r16, r16
 1ca:	11 1f       	adc	r17, r17
 1cc:	22 1f       	adc	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	40 0f       	add	r20, r16
 1d2:	51 1f       	adc	r21, r17
 1d4:	62 1f       	adc	r22, r18
 1d6:	73 1f       	adc	r23, r19
 1d8:	8a 01       	movw	r16, r20
 1da:	9b 01       	movw	r18, r22
 1dc:	08 1b       	sub	r16, r24
 1de:	19 0b       	sbc	r17, r25
 1e0:	2a 0b       	sbc	r18, r26
 1e2:	3b 0b       	sbc	r19, r27
 1e4:	c9 01       	movw	r24, r18
 1e6:	b8 01       	movw	r22, r16
 1e8:	28 e8       	ldi	r18, 0x88	; 136
 1ea:	33 e1       	ldi	r19, 0x13	; 19
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__udivmodsi4>
 1f4:	87 e8       	ldi	r24, 0x87	; 135
 1f6:	93 e1       	ldi	r25, 0x13	; 19
 1f8:	82 1b       	sub	r24, r18
 1fa:	93 0b       	sbc	r25, r19
 1fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 200:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
 204:	40 ed       	ldi	r20, 0xD0	; 208
 206:	57 e0       	ldi	r21, 0x07	; 7
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <Release_Analog_Servo>:
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	cb 01       	movw	r24, r22
 220:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
 224:	08 95       	ret

00000226 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
 236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 23a:	88 23       	and	r24, r24
 23c:	19 f0       	breq	.+6      	; 0x244 <__vector_9+0x1e>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	39 f0       	breq	.+14     	; 0x250 <__vector_9+0x2a>
 242:	0c c0       	rjmp	.+24     	; 0x25c <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
 244:	e3 e8       	ldi	r30, 0x83	; 131
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 62       	ori	r24, 0x20	; 32
 24c:	80 83       	st	Z, r24
            break;
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
 250:	e3 e8       	ldi	r30, 0x83	; 131
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
 25a:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
 25c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 260:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
 262:	83 70       	andi	r24, 0x03	; 3
 264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <Init_Buttons>:
    #ifdef PB1_BUTTON_RISE_EVT || PB1_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB1);
    DDRB &= ~(1<<PINB1);
    #endif
    #ifdef PB2_BUTTON_RISE_EVT || PB2_BUTTON_FALL_EVT
    PCMSK1 |= (1<<PINB2);
 278:	ec e6       	ldi	r30, 0x6C	; 108
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
    DDRB &= ~(1<<PINB2);
 282:	22 98       	cbi	0x04, 2	; 4
    PCMSK1 |= (1<<PINB7);
    DDRB &= ~(1<<PINB7);
    #endif

    // Sample current state of pins
    Current_Port_A_State = PINA;
 284:	90 b1       	in	r25, 0x00	; 0
 286:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Current_Port_A_State>
    Current_Port_B_State = PINB;
 28a:	83 b1       	in	r24, 0x03	; 3
 28c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>

    // Save current pin state as last pin state
    Last_Port_A_State = Current_Port_A_State;
 290:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Last_Port_A_State>
    Last_Port_B_State = Current_Port_B_State;
 294:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

    // Register our debounce timer
    Register_Timer(&Debounce_Timer, Post_Event);
 298:	66 e3       	ldi	r22, 0x36	; 54
 29a:	72 e0       	ldi	r23, 0x02	; 2
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Register_Timer>

    // Enable the pin change interrupts for both ports
    PCICR |= ((1<<PCIE1)|(1<<PCIE0));
 2a4:	e8 e6       	ldi	r30, 0x68	; 104
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	83 60       	ori	r24, 0x03	; 3
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <Run_Buttons>:
        This function runs events related to the buttons.

****************************************************************************/
void Run_Buttons(uint32_t event)
{
    switch (event)
 2b0:	61 15       	cp	r22, r1
 2b2:	70 42       	sbci	r23, 0x20	; 32
 2b4:	81 05       	cpc	r24, r1
 2b6:	91 05       	cpc	r25, r1
 2b8:	69 f5       	brne	.+90     	; 0x314 <__stack+0x15>
    {
        case EVT_BTN_DEBOUNCE_TIMEOUT:
            // The debounce period has ended.

            // Sample the pins
            Current_Port_A_State = PINA;
 2ba:	80 b1       	in	r24, 0x00	; 0
 2bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Current_Port_A_State>
            Current_Port_B_State = PINB;
 2c0:	83 b1       	in	r24, 0x03	; 3
 2c2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Current_Port_B_State>
            }
            break;

        case B:
            if (    (RISE == change_type) &&
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
 2c6:	84 70       	andi	r24, 0x04	; 4
 2c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Last_Port_B_State>
 2cc:	94 70       	andi	r25, 0x04	; 4
    #ifdef PB1_BUTTON_FALL_EVT
    if (did_pin_change(B,1,FALL)) Post_Event(PB1_BUTTON_FALL_EVT);
    #endif
    // PB2
    #ifdef PB2_BUTTON_RISE_EVT
    if (did_pin_change(B,2,RISE)) Post_Event(PB2_BUTTON_RISE_EVT);
 2ce:	98 17       	cp	r25, r24
 2d0:	30 f4       	brcc	.+12     	; 0x2de <Run_Buttons+0x2e>
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	78 e0       	ldi	r23, 0x08	; 8
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 36 02 	call	0x46c	; 0x46c <Post_Event>
                    ((Current_Port_B_State&pin_mask) > (Last_Port_B_State&pin_mask))    )
            {
                return true;
            }
            else if ((FALL == change_type) &&
                    ((Current_Port_B_State&pin_mask) < (Last_Port_B_State&pin_mask))    )
 2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Current_Port_B_State>
 2e2:	94 70       	andi	r25, 0x04	; 4
 2e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Last_Port_B_State>
 2e8:	84 70       	andi	r24, 0x04	; 4
    // PB2
    #ifdef PB2_BUTTON_RISE_EVT
    if (did_pin_change(B,2,RISE)) Post_Event(PB2_BUTTON_RISE_EVT);
    #endif
    #ifdef PB2_BUTTON_FALL_EVT
    if (did_pin_change(B,2,FALL)) Post_Event(PB2_BUTTON_FALL_EVT);
 2ea:	98 17       	cp	r25, r24
 2ec:	30 f4       	brcc	.+12     	; 0x2fa <Run_Buttons+0x4a>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e1       	ldi	r23, 0x10	; 16
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 36 02 	call	0x46c	; 0x46c <Post_Event>

            // Check for differences, and post events for them
            handle_btn_evts();

            // Save current pin state as last pin state
            Last_Port_A_State = Current_Port_A_State;
 2fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Current_Port_A_State>
 2fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Last_Port_A_State>
            Last_Port_B_State = Current_Port_B_State;
 302:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Current_Port_B_State>
 306:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Last_Port_B_State>

            // Re-enable pin change interrupts for port A and port B
            PCICR |= ((1<<PCIE1)|(1<<PCIE0));
 30a:	e8 e6       	ldi	r30, 0x68	; 104
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	83 60       	ori	r24, 0x03	; 3
 312:	80 83       	st	Z, r24
 314:	08 95       	ret

00000316 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
 338:	e8 e6       	ldi	r30, 0x68	; 104
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <__vector_4>:

ISR(PCINT1_vect)
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
 396:	e8 e6       	ldi	r30, 0x68	; 104
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	8d 7f       	andi	r24, 0xFD	; 253
 39e:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
 3a0:	4a e0       	ldi	r20, 0x0A	; 10
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <Get_Intensity_Data>:
intensity_data_t Get_Intensity_Data(uint8_t * p_LIN_packet)
{
    intensity_data_t result;
    memcpy(&result, p_LIN_packet+INTENSITY_DATA_INDEX, INTENSITY_DATA_LEN);
    return result;
}
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	08 95       	ret

000003d8 <Get_Position_Data>:
position_data_t Get_Position_Data(uint8_t * p_LIN_packet)
{
    position_data_t result;
    memcpy(&result, p_LIN_packet+POSITION_DATA_INDEX, POSITION_DATA_LEN);
    return result;
}
 3d8:	fc 01       	movw	r30, r24
 3da:	81 81       	ldd	r24, Z+1	; 0x01
 3dc:	92 81       	ldd	r25, Z+2	; 0x02
 3de:	08 95       	ret

000003e0 <Write_Intensity_Data>:

****************************************************************************/
void Write_Intensity_Data(uint8_t * p_LIN_packet, intensity_data_t data_to_write)
{
    intensity_data_t temp = data_to_write;
    memcpy(p_LIN_packet+INTENSITY_DATA_INDEX, &temp, INTENSITY_DATA_LEN);
 3e0:	fc 01       	movw	r30, r24
 3e2:	60 83       	st	Z, r22
 3e4:	08 95       	ret

000003e6 <Write_Position_Data>:

****************************************************************************/
void Write_Position_Data(uint8_t * p_LIN_packet, position_data_t data_to_write)
{
    position_data_t temp = data_to_write;
    memcpy(p_LIN_packet+POSITION_DATA_INDEX, &temp, POSITION_DATA_LEN);
 3e6:	fc 01       	movw	r30, r24
 3e8:	72 83       	std	Z+2, r23	; 0x02
 3ea:	61 83       	std	Z+1, r22	; 0x01
 3ec:	08 95       	ret

000003ee <Get_Pointer_To_Slave_Data>:
****************************************************************************/
uint8_t * Get_Pointer_To_Slave_Data(uint8_t * p_master_array, uint8_t slave_num)
{
    // This assumes the first section of the master array corresponds
    //  to the lowest slave number (the first slave)
    return (p_master_array+((slave_num-LOWEST_SLAVE_NUMBER)*LIN_PACKET_LEN));
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	61 50       	subi	r22, 0x01	; 1
 3f2:	71 09       	sbc	r23, r1
 3f4:	9b 01       	movw	r18, r22
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	62 0f       	add	r22, r18
 3fc:	73 1f       	adc	r23, r19
}
 3fe:	86 0f       	add	r24, r22
 400:	97 1f       	adc	r25, r23
 402:	08 95       	ret

00000404 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
 404:	cf 92       	push	r12
 406:	df 92       	push	r13
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17

****************************************************************************/
static bool is_event_pending(uint32_t event_mask)
{
    // If this event is pending
    if (event_mask == (Pending_Events & event_mask))
 410:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <Pending_Events>
 414:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <Pending_Events+0x1>
 418:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <Pending_Events+0x2>
 41c:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <Pending_Events+0x3>
 420:	6b 01       	movw	r12, r22
 422:	7c 01       	movw	r14, r24
 424:	c0 22       	and	r12, r16
 426:	d1 22       	and	r13, r17
 428:	e2 22       	and	r14, r18
 42a:	f3 22       	and	r15, r19
 42c:	6c 15       	cp	r22, r12
 42e:	7d 05       	cpc	r23, r13
 430:	8e 05       	cpc	r24, r14
 432:	9f 05       	cpc	r25, r15
 434:	a1 f4       	brne	.+40     	; 0x45e <process_event_if_pending+0x5a>
    {
        // Clear Event
        Pending_Events &= ~event_mask;
 436:	6b 01       	movw	r12, r22
 438:	7c 01       	movw	r14, r24
 43a:	c0 94       	com	r12
 43c:	d0 94       	com	r13
 43e:	e0 94       	com	r14
 440:	f0 94       	com	r15
 442:	0c 21       	and	r16, r12
 444:	1d 21       	and	r17, r13
 446:	2e 21       	and	r18, r14
 448:	3f 21       	and	r19, r15
 44a:	00 93 19 01 	sts	0x0119, r16	; 0x800119 <Pending_Events>
 44e:	10 93 1a 01 	sts	0x011A, r17	; 0x80011a <Pending_Events+0x1>
 452:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <Pending_Events+0x2>
 456:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <Pending_Events+0x3>
{
    // If event is pending
    if (is_event_pending(event_mask))
    {
        // Run the services with this event
        Run_Services(event_mask);
 45a:	0e 94 b9 02 	call	0x572	; 0x572 <Run_Services>
    }
}
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	08 95       	ret

0000046c <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
    // Set flag in event list
    Pending_Events |= event_mask;
 470:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <Pending_Events>
 474:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <Pending_Events+0x1>
 478:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <Pending_Events+0x2>
 47c:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <Pending_Events+0x3>
 480:	dc 01       	movw	r26, r24
 482:	cb 01       	movw	r24, r22
 484:	80 2b       	or	r24, r16
 486:	91 2b       	or	r25, r17
 488:	a2 2b       	or	r26, r18
 48a:	b3 2b       	or	r27, r19
 48c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Pending_Events>
 490:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Pending_Events+0x1>
 494:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <Pending_Events+0x2>
 498:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <Pending_Events+0x3>
}
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
 4c6:	68 e0       	ldi	r22, 0x08	; 8
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
 4d2:	60 e1       	ldi	r22, 0x10	; 16
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
 4de:	60 e2       	ldi	r22, 0x20	; 32
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
 4ea:	60 e4       	ldi	r22, 0x40	; 64
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
 4f6:	60 e8       	ldi	r22, 0x80	; 128
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	71 e0       	ldi	r23, 0x01	; 1
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	72 e0       	ldi	r23, 0x02	; 2
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	74 e0       	ldi	r23, 0x04	; 4
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	78 e0       	ldi	r23, 0x08	; 8
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e1       	ldi	r23, 0x10	; 16
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	70 e2       	ldi	r23, 0x20	; 32
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 02 02 	call	0x404	; 0x404 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
 54a:	ab cf       	rjmp	.-170    	; 0x4a2 <Run_Events>

0000054c <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
 54c:	0e 94 53 06 	call	0xca6	; 0xca6 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
 550:	0e 94 a4 03 	call	0x748	; 0x748 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
 554:	0e 94 91 04 	call	0x922	; 0x922 <Init_PWM_Module>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
 558:	0e 94 ce 02 	call	0x59c	; 0x59c <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
 55c:	0e 94 47 00 	call	0x8e	; 0x8e <Init_ADC_Module>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
 560:	0e 94 84 00 	call	0x108	; 0x108 <Init_Analog_Servo_Driver>
    #endif
    #ifdef INITIALIZER_06
    INITIALIZER_06();
 564:	0e 94 3c 01 	call	0x278	; 0x278 <Init_Buttons>
    #endif
    #ifdef INITIALIZER_07
    INITIALIZER_07();
 568:	0e 94 bc 05 	call	0xb78	; 0xb78 <Init_Slave_Service>
    #endif
    #ifdef INITIALIZER_08
    INITIALIZER_08();
 56c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Init_Slave_Number_Setting_SM>
 570:	08 95       	ret

00000572 <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
 572:	cf 92       	push	r12
 574:	df 92       	push	r13
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
 57e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Run_Buttons>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
 582:	c7 01       	movw	r24, r14
 584:	b6 01       	movw	r22, r12
 586:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <Run_Slave_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
 58a:	c7 01       	movw	r24, r14
 58c:	b6 01       	movw	r22, r12
 58e:	0e 94 1b 05 	call	0xa36	; 0xa36 <Run_Slave_Number_Setting_SM>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	08 95       	ret

0000059c <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
 59c:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC01);
 59e:	e9 e6       	ldi	r30, 0x69	; 105
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	8d 7f       	andi	r24, 0xFD	; 253
 5a6:	80 83       	st	Z, r24
    EICRA |= (1<<ISC00);
 5a8:	80 81       	ld	r24, Z
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
 5ae:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
 5b0:	e0 9a       	sbi	0x1c, 0	; 28
 5b2:	08 95       	ret

000005b4 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1

    // Disable button interrupts to buttons for a set amount of debounce
    // time

    // Start debounce timer, who's cb function reenables the button ints
}
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <Set_Light_Intensity>:
****************************************************************************/
void Set_Light_Intensity(uint8_t requested_intensity)
{
    // Set intensity via PWM
    // If intensity if light off, set 0% duty cycle
    if (LIGHT_OFF == requested_intensity)
 5c8:	81 11       	cpse	r24, r1
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <Set_Light_Intensity+0xc>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, LIGHT_OFF);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	0e 94 b9 04 	call	0x972	; 0x972 <Set_PWM_Duty_Cycle>
 5d2:	08 95       	ret
    }
    // If intensity is non-zero and less than minimum, set minimum duty cycle
    else if ((LIGHT_OFF < requested_intensity) && (MIN_LIGHT_INTENSITY > requested_intensity))
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	98 0f       	add	r25, r24
 5d8:	9d 31       	cpi	r25, 0x1D	; 29
 5da:	28 f4       	brcc	.+10     	; 0x5e6 <Set_Light_Intensity+0x1e>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MIN_LIGHT_INTENSITY);
 5dc:	6e e1       	ldi	r22, 0x1E	; 30
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 b9 04 	call	0x972	; 0x972 <Set_PWM_Duty_Cycle>
 5e4:	08 95       	ret
    }
    // If intensity is greater maximum, set maximum duty cycle
    else if (MAX_LIGHT_INTENSITY < requested_intensity)
 5e6:	85 36       	cpi	r24, 0x65	; 101
 5e8:	28 f0       	brcs	.+10     	; 0x5f4 <Set_Light_Intensity+0x2c>
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, MAX_LIGHT_INTENSITY);
 5ea:	64 e6       	ldi	r22, 0x64	; 100
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 b9 04 	call	0x972	; 0x972 <Set_PWM_Duty_Cycle>
 5f2:	08 95       	ret
    }
    // Otherwise, use the actual intensity parameter as duty cycle
    else
    {
        Set_PWM_Duty_Cycle(LED_PWM_CHANNEL, requested_intensity);
 5f4:	68 2f       	mov	r22, r24
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 b9 04 	call	0x972	; 0x972 <Set_PWM_Duty_Cycle>
 5fc:	08 95       	ret

000005fe <lin_init>:
        return 0;
    }
    
    Lin_tx_header();            // Set command
    return 1;
}
 5fe:	08 98       	cbi	0x01, 0	; 1
 600:	09 98       	cbi	0x01, 1	; 1
 602:	10 9a       	sbi	0x02, 0	; 2
 604:	11 9a       	sbi	0x02, 1	; 2
 606:	90 e8       	ldi	r25, 0x80	; 128
 608:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 60c:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 610:	ed ec       	ldi	r30, 0xCD	; 205
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	10 82       	st	Z, r1
 616:	ae ec       	ldi	r26, 0xCE	; 206
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	1c 92       	st	X, r1
 61c:	25 2f       	mov	r18, r21
 61e:	33 27       	eor	r19, r19
 620:	2c 93       	st	X, r18
 622:	40 83       	st	Z, r20
 624:	80 34       	cpi	r24, 0x40	; 64
 626:	21 f4       	brne	.+8      	; 0x630 <lin_init+0x32>
 628:	88 e4       	ldi	r24, 0x48	; 72
 62a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 62e:	05 c0       	rjmp	.+10     	; 0x63a <lin_init+0x3c>
 630:	81 11       	cpse	r24, r1
 632:	08 c0       	rjmp	.+16     	; 0x644 <lin_init+0x46>
 634:	88 e0       	ldi	r24, 0x08	; 8
 636:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 63a:	8f e0       	ldi	r24, 0x0F	; 15
 63c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	08 95       	ret

00000648 <lin_rx_response>:
//
//  Warning: none
//------------------------------------------------------------------------------
unsigned char lin_rx_response (unsigned char l_type, unsigned char l_len) {                                                                                                         
                                                                                                                                                                      
    if (l_type == LIN_1X) {                                                                                                                                   
 648:	80 34       	cpi	r24, 0x40	; 64
 64a:	31 f4       	brne	.+12     	; 0x658 <lin_rx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                        
 64c:	e8 ec       	ldi	r30, 0xC8	; 200
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	80 64       	ori	r24, 0x40	; 64
 654:	80 83       	st	Z, r24
 656:	09 c0       	rjmp	.+18     	; 0x66a <lin_rx_response+0x22>
    } else if (l_type == LIN_2X) {                                                                                                                            
 658:	81 11       	cpse	r24, r1
 65a:	11 c0       	rjmp	.+34     	; 0x67e <lin_rx_response+0x36>
        Lin_2x_set_type();              // Change is necessary                                        
 65c:	e8 ec       	ldi	r30, 0xC8	; 200
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	80 83       	st	Z, r24
        Lin_set_rx_len(l_len);                                                                                                                        
 664:	6f 70       	andi	r22, 0x0F	; 15
 666:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
 66a:	e8 ec       	ldi	r30, 0xC8	; 200
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	8c 7f       	andi	r24, 0xFC	; 252
 672:	80 83       	st	Z, r24
 674:	80 81       	ld	r24, Z
 676:	82 60       	ori	r24, 0x02	; 2
 678:	80 83       	st	Z, r24
    return 1;                                                                                                                                                 
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                        
    } else if (l_type == LIN_2X) {                                                                                                                            
        Lin_2x_set_type();              // Change is necessary                                        
        Lin_set_rx_len(l_len);                                                                                                                        
    } else {                                                                                                                                                  
        return 0;                                                                                                                                     
 67e:	80 e0       	ldi	r24, 0x00	; 0
    }                                                                                                                                                         
                                                                                                                                                              
    Lin_rx_response();          // Set command                                                
    return 1;                                                                                                                                                 
}
 680:	08 95       	ret

00000682 <lin_tx_response>:
//------------------------------------------------------------------------------
unsigned char lin_tx_response (unsigned char l_type, unsigned char *l_data, unsigned char l_len) {                                                                                     
                                                                                                                                                                         
unsigned char i;                                                                                                                                                         
                                                                                                                                                                         
    if (l_type == LIN_1X) {                                                                                                                                      
 682:	80 34       	cpi	r24, 0x40	; 64
 684:	31 f4       	brne	.+12     	; 0x692 <lin_tx_response+0x10>
        Lin_1x_set_type();              // Change is necessary                                           
 686:	e8 ec       	ldi	r30, 0xC8	; 200
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	80 64       	ori	r24, 0x40	; 64
 68e:	80 83       	st	Z, r24
 690:	0b c0       	rjmp	.+22     	; 0x6a8 <lin_tx_response+0x26>
    } else if (l_type == LIN_2X) {                                                                                                                               
 692:	81 11       	cpse	r24, r1
 694:	25 c0       	rjmp	.+74     	; 0x6e0 <lin_tx_response+0x5e>
        Lin_2x_set_type();				// Change is necessary                                           
 696:	e8 ec       	ldi	r30, 0xC8	; 200
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	80 83       	st	Z, r24
        Lin_set_tx_len(l_len);                                                                                                                           
 69e:	84 2f       	mov	r24, r20
 6a0:	82 95       	swap	r24
 6a2:	80 7f       	andi	r24, 0xF0	; 240
 6a4:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
 6a8:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                                
 6ac:	44 23       	and	r20, r20
 6ae:	71 f0       	breq	.+28     	; 0x6cc <lin_tx_response+0x4a>
 6b0:	fb 01       	movw	r30, r22
 6b2:	41 50       	subi	r20, 0x01	; 1
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	4f 5f       	subi	r20, 0xFF	; 255
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ba:	64 0f       	add	r22, r20
 6bc:	75 1f       	adc	r23, r21
        Lin_set_data(*l_data++);                                                                                                                         
 6be:	a2 ed       	ldi	r26, 0xD2	; 210
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	81 91       	ld	r24, Z+
 6c4:	8c 93       	st	X, r24
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_clear_index();                  // Data processing                                               
    for (i = 0; i < l_len; i++) {                                                                                                                                
 6c6:	e6 17       	cp	r30, r22
 6c8:	f7 07       	cpc	r31, r23
 6ca:	d9 f7       	brne	.-10     	; 0x6c2 <lin_tx_response+0x40>
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
 6cc:	e8 ec       	ldi	r30, 0xC8	; 200
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	8c 7f       	andi	r24, 0xFC	; 252
 6d4:	80 83       	st	Z, r24
 6d6:	80 81       	ld	r24, Z
 6d8:	83 60       	ori	r24, 0x03	; 3
 6da:	80 83       	st	Z, r24
    return 1;                                                                                                                                                    
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	08 95       	ret
        Lin_1x_set_type();              // Change is necessary                                           
    } else if (l_type == LIN_2X) {                                                                                                                               
        Lin_2x_set_type();				// Change is necessary                                           
        Lin_set_tx_len(l_len);                                                                                                                           
    } else {                                                                                                                                                     
        return 0;                                                                                                                                        
 6e0:	80 e0       	ldi	r24, 0x00	; 0
        Lin_set_data(*l_data++);                                                                                                                         
    }                                                                                                                                                            
                                                                                                                                                                 
    Lin_tx_response();          // Set command                                                   
    return 1;                                                                                                                                                    
}
 6e2:	08 95       	ret

000006e4 <lin_get_response>:
//------------------------------------------------------------------------------
void lin_get_response (unsigned char *l_data) {                                                                                                                 
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
 6e4:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
 6e8:	2f 70       	andi	r18, 0x0F	; 15
    Lin_clear_index();                                                                                                                                  
 6ea:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
    for (i = 0; i < l_len; i++) {                                                                                                                       
 6ee:	22 23       	and	r18, r18
 6f0:	71 f0       	breq	.+28     	; 0x70e <lin_get_response+0x2a>
 6f2:	fc 01       	movw	r30, r24
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
        (*l_data++) = Lin_get_data();                                                                                                           
 700:	a2 ed       	ldi	r26, 0xD2	; 210
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	2c 91       	ld	r18, X
 706:	21 93       	st	Z+, r18
                                                                                                                                                                
unsigned char i, l_len;                                                                                                                                         
                                                                                                                                                                
    l_len = Lin_get_len();                                                                                                                        
    Lin_clear_index();                                                                                                                                  
    for (i = 0; i < l_len; i++) {                                                                                                                       
 708:	e8 17       	cp	r30, r24
 70a:	f9 07       	cpc	r31, r25
 70c:	d9 f7       	brne	.-10     	; 0x704 <lin_get_response+0x20>
 70e:	08 95       	ret

00000710 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
 710:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Parity>
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	89 27       	eor	r24, r25
 718:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
 71c:	81 11       	cpse	r24, r1
 71e:	0a c0       	rjmp	.+20     	; 0x734 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
 720:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
 722:	42 e0       	ldi	r20, 0x02	; 2
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	8e e1       	ldi	r24, 0x1E	; 30
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
 732:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
 734:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 736:	43 e2       	ldi	r20, 0x23	; 35
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	8e e1       	ldi	r24, 0x1E	; 30
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
 746:	08 95       	ret

00000748 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
 748:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
 74a:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
 74c:	68 e8       	ldi	r22, 0x88	; 136
 74e:	73 e0       	ldi	r23, 0x03	; 3
 750:	8e e1       	ldi	r24, 0x1E	; 30
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 758:	43 e2       	ldi	r20, 0x23	; 35
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	8e e1       	ldi	r24, 0x1E	; 30
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>
 768:	08 95       	ret

0000076a <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
 76a:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
 76c:	e1 e6       	ldi	r30, 0x61	; 97
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 e8       	ldi	r24, 0x80	; 128
 772:	80 83       	st	Z, r24
    CLKPR = 0;
 774:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
 776:	0e 94 a6 02 	call	0x54c	; 0x54c <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
 77a:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
 77c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	08 95       	ret

00000786 <MS_LIN_Initialize>:

****************************************************************************/
void Master_LIN_Broadcast_ID(uint8_t slave_id)
{
    // Broadcast the LIN header
    lin_tx_header((OUR_LIN_SPEC), slave_id, 0);
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	7c 01       	movw	r14, r24
 794:	8b 01       	movw	r16, r22
 796:	ea 01       	movw	r28, r20
 798:	14 9a       	sbi	0x02, 4	; 2
 79a:	0c 9a       	sbi	0x01, 4	; 1
 79c:	4c e0       	ldi	r20, 0x0C	; 12
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lin_init>
 7aa:	f0 92 28 01 	sts	0x0128, r15	; 0x800128 <p_My_Node_ID+0x1>
 7ae:	e0 92 27 01 	sts	0x0127, r14	; 0x800127 <p_My_Node_ID>
 7b2:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <p_My_Command_Data+0x1>
 7b6:	00 93 25 01 	sts	0x0125, r16	; 0x800125 <p_My_Command_Data>
 7ba:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <p_My_Status_Data+0x1>
 7be:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <p_My_Status_Data>
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	08 95       	ret

000007d0 <__vector_12>:
    Description
        Handles LIN specific interrupts

****************************************************************************/
ISR(LIN_TC_vect)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
    // Get interrupt cause
    switch (Lin_get_it())
 7f2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 7f6:	8f 70       	andi	r24, 0x0F	; 15
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	09 f4       	brne	.+2      	; 0x7fe <__vector_12+0x2e>
 7fc:	68 c0       	rjmp	.+208    	; 0x8ce <__vector_12+0xfe>
 7fe:	84 30       	cpi	r24, 0x04	; 4
 800:	21 f0       	breq	.+8      	; 0x80a <__vector_12+0x3a>
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	09 f0       	breq	.+2      	; 0x808 <__vector_12+0x38>
 806:	66 c0       	rjmp	.+204    	; 0x8d4 <__vector_12+0x104>
 808:	36 c0       	rjmp	.+108    	; 0x876 <__vector_12+0xa6>

****************************************************************************/
static void lin_id_task(void)
{
    // Create copy of ID, make sure this gives only the lower 6 bits
    uint8_t temp_id = Lin_get_id();
 80a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
 80e:	69 2f       	mov	r22, r25
 810:	6f 73       	andi	r22, 0x3F	; 63

    // This ID matches my ID. It must be a command sent from the master.
    if (temp_id == *p_My_Node_ID)
 812:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <p_My_Node_ID>
 816:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <p_My_Node_ID+0x1>
 81a:	80 81       	ld	r24, Z
 81c:	68 13       	cpse	r22, r24
 81e:	05 c0       	rjmp	.+10     	; 0x82a <__vector_12+0x5a>
    {
        // Prepare LIN module for receive.
        lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
 820:	63 e0       	ldi	r22, 0x03	; 3
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0e 94 24 03 	call	0x648	; 0x648 <lin_rx_response>
 828:	22 c0       	rjmp	.+68     	; 0x86e <__vector_12+0x9e>
    }

    // This ID matches my ID. It must be a status request from the master.
    else if (temp_id == ((*p_My_Node_ID)|REQUEST_MASK))
 82a:	28 2f       	mov	r18, r24
 82c:	21 60       	ori	r18, 0x01	; 1
 82e:	62 13       	cpse	r22, r18
 830:	09 c0       	rjmp	.+18     	; 0x844 <__vector_12+0x74>
    {
        // Prepare LIN module for transmit.
        // We must be a slave so My_Command_Data is LIN_PACKET_LEN bytes long only.
        lin_tx_response((OUR_LIN_SPEC), p_My_Status_Data, (LIN_PACKET_LEN));
 832:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <p_My_Status_Data>
 836:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <p_My_Status_Data+0x1>
 83a:	43 e0       	ldi	r20, 0x03	; 3
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	0e 94 41 03 	call	0x682	; 0x682 <lin_tx_response>
 842:	15 c0       	rjmp	.+42     	; 0x86e <__vector_12+0x9e>

    // This ID doesn't match my ID.
    else
    {
        // If we're the master, we must have sent this ID
        if (MASTER_NODE_ID == *p_My_Node_ID)
 844:	81 11       	cpse	r24, r1
 846:	13 c0       	rjmp	.+38     	; 0x86e <__vector_12+0x9e>
        {
            // Prepare LIN module for transmit if we sent a command.
            if (0 == (temp_id & REQUEST_MASK))
 848:	90 fd       	sbrc	r25, 0
 84a:	0d c0       	rjmp	.+26     	; 0x866 <__vector_12+0x96>
            {
                // Make sure we send the right command based on the slave ID.
                // The master has a My_Command_Data array that is LIN_PACKET_LEN*n bytes long.
                // Where n is the number of slaves in the system.
                lin_tx_response((OUR_LIN_SPEC), Get_Pointer_To_Slave_Data(p_My_Command_Data, GET_SLAVE_NUMBER(temp_id)), (LIN_PACKET_LEN));
 84c:	66 95       	lsr	r22
 84e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <p_My_Command_Data>
 852:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <p_My_Command_Data+0x1>
 856:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Get_Pointer_To_Slave_Data>
 85a:	43 e0       	ldi	r20, 0x03	; 3
 85c:	bc 01       	movw	r22, r24
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	0e 94 41 03 	call	0x682	; 0x682 <lin_tx_response>
 864:	04 c0       	rjmp	.+8      	; 0x86e <__vector_12+0x9e>
            }
            // Prepare LIN module for receive if we sent a request.
            else
            {
                lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
 866:	63 e0       	ldi	r22, 0x03	; 3
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 24 03 	call	0x648	; 0x648 <lin_rx_response>
    switch (Lin_get_it())
    {
        // We received an ID
        case LIN_IDOK:
            lin_id_task();
            Lin_clear_idok_it();
 86e:	84 e0       	ldi	r24, 0x04	; 4
 870:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
 874:	2f c0       	rjmp	.+94     	; 0x8d4 <__vector_12+0x104>
****************************************************************************/
static void lin_rx_task(void)
{
    // Copy the rx data to our appropriate data store
    // If we're the master, copy to our status array and post event
    if (MASTER_NODE_ID == *p_My_Node_ID)
 876:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <p_My_Node_ID>
 87a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <p_My_Node_ID+0x1>
 87e:	80 81       	ld	r24, Z
 880:	81 11       	cpse	r24, r1
 882:	15 c0       	rjmp	.+42     	; 0x8ae <__vector_12+0xde>
    {
        // TODO: Not entirely sure if the ID is saved during the receive...
        lin_get_response(Get_Pointer_To_Slave_Data(p_My_Status_Data, GET_SLAVE_NUMBER(Lin_get_id())));
 884:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
 888:	6f 73       	andi	r22, 0x3F	; 63
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	75 95       	asr	r23
 88e:	67 95       	ror	r22
 890:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <p_My_Status_Data>
 894:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <p_My_Status_Data+0x1>
 898:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Get_Pointer_To_Slave_Data>
 89c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <lin_get_response>

        // Post event
        Post_Event(EVT_MASTER_NEW_STS);
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	71 e0       	ldi	r23, 0x01	; 1
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 36 02 	call	0x46c	; 0x46c <Post_Event>
 8ac:	0c c0       	rjmp	.+24     	; 0x8c6 <__vector_12+0xf6>
    }
    // If we're a slave, copy to our command array and post event
    else
    {
        // Copy command
        lin_get_response(p_My_Command_Data);
 8ae:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <p_My_Command_Data>
 8b2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <p_My_Command_Data+0x1>
 8b6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <lin_get_response>

        // Post event
        Post_Event(EVT_SLAVE_NEW_CMD);
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 36 02 	call	0x46c	; 0x46c <Post_Event>
            break;

        // We received a data packet
        case LIN_RXOK:
            lin_rx_task();
            Lin_clear_rxok_it();
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <__vector_12+0x104>

        // We transmitted a data packet
        case LIN_TXOK:
            lin_tx_task();
            Lin_clear_txok_it();
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>

        // The interrupt did not correspond to LIN
        default:
            break;
    } // End Switch
}
 8d4:	ff 91       	pop	r31
 8d6:	ef 91       	pop	r30
 8d8:	bf 91       	pop	r27
 8da:	af 91       	pop	r26
 8dc:	9f 91       	pop	r25
 8de:	8f 91       	pop	r24
 8e0:	7f 91       	pop	r23
 8e2:	6f 91       	pop	r22
 8e4:	5f 91       	pop	r21
 8e6:	4f 91       	pop	r20
 8e8:	3f 91       	pop	r19
 8ea:	2f 91       	pop	r18
 8ec:	0f 90       	pop	r0
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	0f 90       	pop	r0
 8f2:	1f 90       	pop	r1
 8f4:	18 95       	reti

000008f6 <__vector_13>:

ISR(LIN_ERR_vect)
{
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	8f 93       	push	r24
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
 902:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__EEPROM_REGION_LENGTH__+0x7f00cb>

****************************************************************************/
static void lin_err_task(void)
{
    // Increment error count
    My_LIN_Error_Count++;
 906:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <My_LIN_Error_Count>
 90a:	8f 5f       	subi	r24, 0xFF	; 255
 90c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <My_LIN_Error_Count>
ISR(LIN_ERR_vect)
{
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
    lin_err_task();
    Lin_clear_err_it();
 910:	88 e0       	ldi	r24, 0x08	; 8
 912:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 916:	8f 91       	pop	r24
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <Init_PWM_Module>:
{
    // We need to ensure no interrupts occur when accessing 16-bit registers
    // (Just for safety, no ISR should be able to access these registers anyways.)
    // Even though the C code is one line for accessing 16-bit registers,
    //      in ASM it will be done in two cycles.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 922:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 924:	f8 94       	cli
    {
        // Clear Control Register C
        // "However, for ensuring compatibility with future devices,
        //      these bits must be set to zero when TCCR1A is written 
        //      when operating in a PWM mode."
        TCCR1C = 0;
 926:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>

        // Disable Timer1 interrupts
        TIMSK1 = 0;
 92a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>

        // Set up pins for PWM output (p. 85)
        TCCR1D = ((1<<PWM_CH_A_PIN_ENABLE)|(1<<PWM_CH_B_PIN_ENABLE));
 92e:	84 e2       	ldi	r24, 0x24	; 36
 930:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <__EEPROM_REGION_LENGTH__+0x7f0083>
        DDRB |= ((1<<PWM_CH_A_PIN)|(1<<PWM_CH_B_PIN));
 934:	84 b1       	in	r24, 0x04	; 4
 936:	88 61       	ori	r24, 0x18	; 24
 938:	84 b9       	out	0x04, r24	; 4

        // Set TOP values for A/B counters, executes in 1 asm lines
        ICR1 = TIMER_1_TOP;
 93a:	87 e8       	ldi	r24, 0x87	; 135
 93c:	93 e1       	ldi	r25, 0x13	; 19
 93e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
 942:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>

        // Set output compare to value that sets lines low (0% duty cycle)
        OCR1A = OCR_DC_ZERO;
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	9f ef       	ldi	r25, 0xFF	; 255
 94a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 94e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
        OCR1B = OCR_DC_ZERO;
 952:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 956:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
        // Set (COM1A/B[0:1]) for output pin high on match, low on TOP
        //      (Per Table 12-2 on p. 132)
        // Set WGM1[0:3]=1110b to define TOP in ICR1A register.
        //      Define TOP in ICR1 register, instead of OCR1A (explanation on p. 125)
        //      (Run at a fixed frequency with varying duty cycles)
        TCCR1A = ((1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0) \
 95a:	82 ef       	ldi	r24, 0xF2	; 242
 95c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
                    |(1<<WGM11)|(0<<WGM10));

        // Set WGM1[0:3]=1110b
        TCCR1B = ((1<<WGM13)|(1<<WGM12));
 960:	e1 e8       	ldi	r30, 0x81	; 129
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	88 e1       	ldi	r24, 0x18	; 24
 966:	80 83       	st	Z, r24

        // Start the clock by selecting a prescaler of f_clk/1 (CS10 set)
        // We want to aim for a frequency of 1 kHz
        // PWM freq is:
        //      f_pwm = f_clk/(prescale*(1+TOP))
        TCCR1B |= TIMER_1_PRESCALE;
 968:	80 81       	ld	r24, Z
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 96e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 970:	08 95       	ret

00000972 <Set_PWM_Duty_Cycle>:
void Set_PWM_Duty_Cycle(pwm_channel_t this_channel, uint8_t new_duty_cycle)
{
    // Set OCR1 for the requested channel
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
 972:	88 23       	and	r24, r24
 974:	19 f0       	breq	.+6      	; 0x97c <Set_PWM_Duty_Cycle+0xa>
 976:	81 30       	cpi	r24, 0x01	; 1
 978:	49 f1       	breq	.+82     	; 0x9cc <Set_PWM_Duty_Cycle+0x5a>
 97a:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
 97c:	64 36       	cpi	r22, 0x64	; 100
 97e:	e0 f4       	brcc	.+56     	; 0x9b8 <Set_PWM_Duty_Cycle+0x46>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	86 0f       	add	r24, r22
 984:	83 36       	cpi	r24, 0x63	; 99
 986:	d8 f4       	brcc	.+54     	; 0x9be <Set_PWM_Duty_Cycle+0x4c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	cb 01       	movw	r24, r22
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	68 0f       	add	r22, r24
 996:	79 1f       	adc	r23, r25
 998:	cb 01       	movw	r24, r22
 99a:	88 0f       	add	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	68 0f       	add	r22, r24
 9a4:	79 1f       	adc	r23, r25
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 27       	eor	r24, r24
 9ac:	99 27       	eor	r25, r25
 9ae:	86 1b       	sub	r24, r22
 9b0:	97 0b       	sbc	r25, r23
 9b2:	88 57       	subi	r24, 0x78	; 120
 9b4:	9c 4e       	sbci	r25, 0xEC	; 236
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <Set_PWM_Duty_Cycle+0x50>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <Set_PWM_Duty_Cycle+0x50>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	9f ef       	ldi	r25, 0xFF	; 255
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
    {
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
 9c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 9c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
            break;
 9ca:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
 9cc:	64 36       	cpi	r22, 0x64	; 100
 9ce:	e0 f4       	brcc	.+56     	; 0xa08 <Set_PWM_Duty_Cycle+0x96>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	86 0f       	add	r24, r22
 9d4:	83 36       	cpi	r24, 0x63	; 99
 9d6:	d8 f4       	brcc	.+54     	; 0xa0e <Set_PWM_Duty_Cycle+0x9c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	cb 01       	movw	r24, r22
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	68 0f       	add	r22, r24
 9e6:	79 1f       	adc	r23, r25
 9e8:	cb 01       	movw	r24, r22
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	68 0f       	add	r22, r24
 9f4:	79 1f       	adc	r23, r25
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 27       	eor	r24, r24
 9fc:	99 27       	eor	r25, r25
 9fe:	86 1b       	sub	r24, r22
 a00:	97 0b       	sbc	r25, r23
 a02:	88 57       	subi	r24, 0x78	; 120
 a04:	9c 4e       	sbci	r25, 0xEC	; 236
 a06:	05 c0       	rjmp	.+10     	; 0xa12 <Set_PWM_Duty_Cycle+0xa0>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <Set_PWM_Duty_Cycle+0xa0>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	9f ef       	ldi	r25, 0xFF	; 255
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
            break;

        case pwm_channel_b:
            OCR1B = calc_OCR_count(new_duty_cycle);
 a12:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 a16:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
 a1a:	08 95       	ret

00000a1c <Init_Slave_Number_Setting_SM>:

****************************************************************************/
void Init_Slave_Number_Setting_SM(void)
{
    // Register timers
    Register_Timer(&Main_Timer, Post_Event);
 a1c:	66 e3       	ldi	r22, 0x36	; 54
 a1e:	72 e0       	ldi	r23, 0x02	; 2
 a20:	8a e0       	ldi	r24, 0x0A	; 10
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Register_Timer>
    Register_Timer(&Auxiliary_Timer, Post_Event);
 a28:	66 e3       	ldi	r22, 0x36	; 54
 a2a:	72 e0       	ldi	r23, 0x02	; 2
 a2c:	86 e0       	ldi	r24, 0x06	; 6
 a2e:	91 e0       	ldi	r25, 0x01	; 1
 a30:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Register_Timer>
 a34:	08 95       	ret

00000a36 <Run_Slave_Number_Setting_SM>:
        This processes events for the slave number setting state machine.

****************************************************************************/
void Run_Slave_Number_Setting_SM(uint32_t event)
{
    switch (Current_State)
 a36:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <Current_State>
 a3a:	21 30       	cpi	r18, 0x01	; 1
 a3c:	b1 f0       	breq	.+44     	; 0xa6a <Run_Slave_Number_Setting_SM+0x34>
 a3e:	18 f0       	brcs	.+6      	; 0xa46 <Run_Slave_Number_Setting_SM+0x10>
 a40:	22 30       	cpi	r18, 0x02	; 2
 a42:	a1 f1       	breq	.+104    	; 0xaac <Run_Slave_Number_Setting_SM+0x76>
 a44:	08 95       	ret
    {
        case IDLE_STATE:

            switch (event)
 a46:	61 15       	cp	r22, r1
 a48:	78 40       	sbci	r23, 0x08	; 8
 a4a:	81 05       	cpc	r24, r1
 a4c:	91 05       	cpc	r25, r1
 a4e:	09 f0       	breq	.+2      	; 0xa52 <Run_Slave_Number_Setting_SM+0x1c>
 a50:	83 c0       	rjmp	.+262    	; 0xb58 <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_PRESS:

                    // Start hold time timer
                    Start_Timer(&Auxiliary_Timer, ENTER_MODE_HOLD_TIME_MS);
 a52:	40 e1       	ldi	r20, 0x10	; 16
 a54:	57 e2       	ldi	r21, 0x27	; 39
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	86 e0       	ldi	r24, 0x06	; 6
 a5c:	91 e0       	ldi	r25, 0x01	; 1
 a5e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>

                    // Change state to ENTERING_SETTING_MODE_STATE
                    Current_State = ENTERING_SETTING_MODE_STATE;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Current_State>

                    break;
 a68:	08 95       	ret

            break;

        case ENTERING_SETTING_MODE_STATE:

            switch (event)
 a6a:	68 30       	cpi	r22, 0x08	; 8
 a6c:	71 05       	cpc	r23, r1
 a6e:	81 05       	cpc	r24, r1
 a70:	91 05       	cpc	r25, r1
 a72:	69 f0       	breq	.+26     	; 0xa8e <Run_Slave_Number_Setting_SM+0x58>
 a74:	61 15       	cp	r22, r1
 a76:	70 41       	sbci	r23, 0x10	; 16
 a78:	81 05       	cpc	r24, r1
 a7a:	91 05       	cpc	r25, r1
 a7c:	09 f0       	breq	.+2      	; 0xa80 <Run_Slave_Number_Setting_SM+0x4a>
 a7e:	6c c0       	rjmp	.+216    	; 0xb58 <Run_Slave_Number_Setting_SM+0x122>
            {
                case EVT_BTN_MISC_RELEASE:

                    // Stop hold time timer
                    Stop_Timer(&Auxiliary_Timer);
 a80:	86 e0       	ldi	r24, 0x06	; 6
 a82:	91 e0       	ldi	r25, 0x01	; 1
 a84:	0e 94 07 07 	call	0xe0e	; 0xe0e <Stop_Timer>

                    // Change state to IDLE_STATE
                    Current_State = IDLE_STATE;
 a88:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <Current_State>

                    break;
 a8c:	08 95       	ret

                case EVT_SETTING_MODE_AUX_TIMEOUT:

                    // Start overall setting mode timer
                    Start_Timer(&Main_Timer, MAX_TIME_IN_MODE_MS);
 a8e:	40 e6       	ldi	r20, 0x60	; 96
 a90:	5a ee       	ldi	r21, 0xEA	; 234
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	8a e0       	ldi	r24, 0x0A	; 10
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
 a9e:	8e e1       	ldi	r24, 0x1E	; 30
 aa0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

                    // Change state to SETTING_MODE_STATE
                    Current_State = SETTING_MODE_STATE;
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Current_State>

                    break;
 aaa:	08 95       	ret

            break;

        case SETTING_MODE_STATE:

            switch (event)
 aac:	68 30       	cpi	r22, 0x08	; 8
 aae:	71 05       	cpc	r23, r1
 ab0:	81 05       	cpc	r24, r1
 ab2:	91 05       	cpc	r25, r1
 ab4:	69 f1       	breq	.+90     	; 0xb10 <Run_Slave_Number_Setting_SM+0xda>
 ab6:	38 f4       	brcc	.+14     	; 0xac6 <Run_Slave_Number_Setting_SM+0x90>
 ab8:	64 30       	cpi	r22, 0x04	; 4
 aba:	71 05       	cpc	r23, r1
 abc:	81 05       	cpc	r24, r1
 abe:	91 05       	cpc	r25, r1
 ac0:	09 f4       	brne	.+2      	; 0xac4 <Run_Slave_Number_Setting_SM+0x8e>
 ac2:	3f c0       	rjmp	.+126    	; 0xb42 <Run_Slave_Number_Setting_SM+0x10c>
 ac4:	08 95       	ret
 ac6:	61 15       	cp	r22, r1
 ac8:	28 e0       	ldi	r18, 0x08	; 8
 aca:	72 07       	cpc	r23, r18
 acc:	81 05       	cpc	r24, r1
 ace:	91 05       	cpc	r25, r1
 ad0:	31 f0       	breq	.+12     	; 0xade <Run_Slave_Number_Setting_SM+0xa8>
 ad2:	61 15       	cp	r22, r1
 ad4:	70 41       	sbci	r23, 0x10	; 16
 ad6:	81 05       	cpc	r24, r1
 ad8:	91 05       	cpc	r25, r1
 ada:	69 f0       	breq	.+26     	; 0xaf6 <Run_Slave_Number_Setting_SM+0xc0>
 adc:	08 95       	ret

                    // The user pressed the button. Turn on the LED
                    //  and start the timer to check for hold to exit.

                    // Turn on LED
                    Set_Light_Intensity(SETTING_MODE_LIGHT_INTENSITY);
 ade:	8e e1       	ldi	r24, 0x1E	; 30
 ae0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

                    // Start aux timer for exit hold time
                    Start_Timer(&Auxiliary_Timer, EXIT_MODE_HOLD_TIME_MS);
 ae4:	48 e8       	ldi	r20, 0x88	; 136
 ae6:	53 e1       	ldi	r21, 0x13	; 19
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	86 e0       	ldi	r24, 0x06	; 6
 aee:	91 e0       	ldi	r25, 0x01	; 1
 af0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Start_Timer>

                    break;
 af4:	08 95       	ret

                    // The user released the button. Turn off the LED,
                    //  increment our counter, and stop the hold timer.

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

                    // Increment release counter
                    Release_Counter++;
 afc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Release_Counter>
 b00:	8f 5f       	subi	r24, 0xFF	; 255
 b02:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Release_Counter>

                    // Stop aux timer for exit hold time
                    Stop_Timer(&Auxiliary_Timer);
 b06:	86 e0       	ldi	r24, 0x06	; 6
 b08:	91 e0       	ldi	r25, 0x01	; 1
 b0a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Stop_Timer>

                    break;
 b0e:	08 95       	ret
                    // The user held the button and wants
                    //  to exit the mode and set the slave number.

                    // If the Release Counter is greater than number of
                    //  NUM_UNAVOIDABLE_RELEASES, then we got a new slave number
                    if (NUM_UNAVOIDABLE_RELEASES < Release_Counter)
 b10:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Release_Counter>
 b14:	82 30       	cpi	r24, 0x02	; 2
 b16:	48 f0       	brcs	.+18     	; 0xb2a <Run_Slave_Number_Setting_SM+0xf4>
                    {
                        // Save the count-1 as the last set slave number
                        // It is count-1 because we enter this state with the button pressed
                        // so the first release doesn't mean anything
                        Last_Set_Slave_Number = Release_Counter-NUM_UNAVOIDABLE_RELEASES;
 b18:	81 50       	subi	r24, 0x01	; 1
 b1a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Last_Set_Slave_Number>

                        // Post event to slave service to alert that new
                        //  slave number has been set
                        Post_Event(EVT_SLAVE_NUM_SET);
 b1e:	60 e4       	ldi	r22, 0x40	; 64
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0e 94 36 02 	call	0x46c	; 0x46c <Post_Event>
                    }

                    // Stop the main timer
                    Stop_Timer(&Main_Timer);
 b2a:	8a e0       	ldi	r24, 0x0A	; 10
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
 b38:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
 b3c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <Current_State>

                    break;
 b40:	08 95       	ret
                    // The user did not exit the mode properly within
                    //  the max mode time. Just go back to idle and
                    //  clear the number counter.

                    // Stop the aux timer, in case it was running
                    Stop_Timer(&Auxiliary_Timer);
 b42:	86 e0       	ldi	r24, 0x06	; 6
 b44:	91 e0       	ldi	r25, 0x01	; 1
 b46:	0e 94 07 07 	call	0xe0e	; 0xe0e <Stop_Timer>

                    // Turn off LED
                    Set_Light_Intensity(LIGHT_OFF);
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

                    // Clear the number counter
                    Release_Counter = 0;
 b50:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Release_Counter>

                    // Change state to IDLE_STATE:
                    Current_State = IDLE_STATE;
 b54:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <Current_State>
 b58:	08 95       	ret

00000b5a <In_Slave_Number_Setting_Mode>:
                to the LED.

****************************************************************************/
bool In_Slave_Number_Setting_Mode(void)
{
    if (SETTING_MODE_STATE == Current_State) return true;
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Current_State>
 b60:	92 30       	cpi	r25, 0x02	; 2
 b62:	09 f0       	breq	.+2      	; 0xb66 <In_Slave_Number_Setting_Mode+0xc>
 b64:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 b66:	08 95       	ret

00000b68 <Get_Last_Set_Slave_Number>:
        This function returns the last set slave number.

****************************************************************************/
uint8_t Get_Last_Set_Slave_Number(void)
{
    if ((LOWEST_SLAVE_NUMBER <= Last_Set_Slave_Number) && (MAX_NUM_SLAVES >= Last_Set_Slave_Number))
 b68:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Last_Set_Slave_Number>
 b6c:	9f ef       	ldi	r25, 0xFF	; 255
 b6e:	98 0f       	add	r25, r24
 b70:	9d 31       	cpi	r25, 0x1D	; 29
 b72:	08 f0       	brcs	.+2      	; 0xb76 <Get_Last_Set_Slave_Number+0xe>
    {
        return Last_Set_Slave_Number;
    }
    else
    {
        return INVALID_SLAVE_NUMBER;
 b74:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
 b76:	08 95       	ret

00000b78 <Init_Slave_Service>:

****************************************************************************/
void Init_Slave_Service(void)
{
    // Initialize command and status arrays
    Write_Intensity_Data(p_My_Command_Data, INTENSITY_NON_COMMAND);
 b78:	6f ef       	ldi	r22, 0xFF	; 255
 b7a:	8e e2       	ldi	r24, 0x2E	; 46
 b7c:	91 e0       	ldi	r25, 0x01	; 1
 b7e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>
    Write_Position_Data(p_My_Command_Data, POSITION_NON_COMMAND);
 b82:	6f ef       	ldi	r22, 0xFF	; 255
 b84:	7f ef       	ldi	r23, 0xFF	; 255
 b86:	8e e2       	ldi	r24, 0x2E	; 46
 b88:	91 e0       	ldi	r25, 0x01	; 1
 b8a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>
    Write_Intensity_Data(p_My_Status_Data, LIGHT_OFF);
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	8b e2       	ldi	r24, 0x2B	; 43
 b92:	91 e0       	ldi	r25, 0x01	; 1
 b94:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>
    Write_Position_Data(p_My_Status_Data, SERVO_STAY);
 b98:	6f ef       	ldi	r22, 0xFF	; 255
 b9a:	7f ef       	ldi	r23, 0xFF	; 255
 b9c:	8b e2       	ldi	r24, 0x2B	; 43
 b9e:	91 e0       	ldi	r25, 0x01	; 1
 ba0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>

    // Read our slave number from flash
    // @TODO:
    My_Node_ID = GET_SLAVE_BASE_ID(1);
 ba4:	82 e0       	ldi	r24, 0x02	; 2
 ba6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <My_Node_ID>

    // Initialize light to LIGHT_OFF
    Set_Light_Intensity(LIGHT_OFF);
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>

    // Release the servo so it does not move
    Release_Analog_Servo();
 bb0:	0e 94 0d 01 	call	0x21a	; 0x21a <Release_Analog_Servo>

    // Initialize LIN
    MS_LIN_Initialize(&My_Node_ID, p_My_Command_Data, p_My_Status_Data);
 bb4:	4b e2       	ldi	r20, 0x2B	; 43
 bb6:	51 e0       	ldi	r21, 0x01	; 1
 bb8:	6e e2       	ldi	r22, 0x2E	; 46
 bba:	71 e0       	ldi	r23, 0x01	; 1
 bbc:	81 e3       	ldi	r24, 0x31	; 49
 bbe:	91 e0       	ldi	r25, 0x01	; 1
 bc0:	0e 94 c3 03 	call	0x786	; 0x786 <MS_LIN_Initialize>
 bc4:	08 95       	ret

00000bc6 <Run_Slave_Service>:
    Description
        Processes events for the this slave node

****************************************************************************/
void Run_Slave_Service(uint32_t event_mask)
{
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
    switch(event_mask)
 bcc:	61 30       	cpi	r22, 0x01	; 1
 bce:	71 05       	cpc	r23, r1
 bd0:	81 05       	cpc	r24, r1
 bd2:	91 05       	cpc	r25, r1
 bd4:	c9 f0       	breq	.+50     	; 0xc08 <Run_Slave_Service+0x42>
 bd6:	60 34       	cpi	r22, 0x40	; 64
 bd8:	71 05       	cpc	r23, r1
 bda:	81 05       	cpc	r24, r1
 bdc:	91 05       	cpc	r25, r1
 bde:	09 f0       	breq	.+2      	; 0xbe2 <Run_Slave_Service+0x1c>
 be0:	5e c0       	rjmp	.+188    	; 0xc9e <Run_Slave_Service+0xd8>
    {
        case EVT_SLAVE_NUM_SET:
            // A new ID has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
 be2:	0e 94 b4 05 	call	0xb68	; 0xb68 <Get_Last_Set_Slave_Number>
 be6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <My_Node_ID>
 bea:	96 95       	lsr	r25
 bec:	89 17       	cp	r24, r25
 bee:	09 f4       	brne	.+2      	; 0xbf2 <Run_Slave_Service+0x2c>
 bf0:	56 c0       	rjmp	.+172    	; 0xc9e <Run_Slave_Service+0xd8>
                    &&
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
 bf2:	0e 94 b4 05 	call	0xb68	; 0xb68 <Get_Last_Set_Slave_Number>
        case EVT_SLAVE_NUM_SET:
            // A new ID has been set for us.

            // Only do something if the # is different than our current #
            if  (   (Get_Last_Set_Slave_Number() != GET_SLAVE_NUMBER(My_Node_ID))
                    &&
 bf6:	8f 3f       	cpi	r24, 0xFF	; 255
 bf8:	09 f4       	brne	.+2      	; 0xbfc <Run_Slave_Service+0x36>
 bfa:	51 c0       	rjmp	.+162    	; 0xc9e <Run_Slave_Service+0xd8>
                    (INVALID_SLAVE_NUMBER != Get_Last_Set_Slave_Number())
                )
            {
                // Set our ID based on the user set slave number
                My_Node_ID = GET_SLAVE_BASE_ID(Get_Last_Set_Slave_Number());
 bfc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Get_Last_Set_Slave_Number>
 c00:	88 0f       	add	r24, r24
 c02:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <My_Node_ID>
 c06:	4b c0       	rjmp	.+150    	; 0xc9e <Run_Slave_Service+0xd8>

        case EVT_SLAVE_NEW_CMD:
            // We got a new command.

            // Process commands if we're not in the setting mode
            if (!In_Slave_Number_Setting_Mode())
 c08:	0e 94 ad 05 	call	0xb5a	; 0xb5a <In_Slave_Number_Setting_Mode>
 c0c:	81 11       	cpse	r24, r1
 c0e:	47 c0       	rjmp	.+142    	; 0xc9e <Run_Slave_Service+0xd8>
****************************************************************************/
static void process_intensity_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 c10:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c12:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (INTENSITY_NON_COMMAND != Get_Intensity_Data(p_My_Command_Data))
 c14:	8e e2       	ldi	r24, 0x2E	; 46
 c16:	91 e0       	ldi	r25, 0x01	; 1
 c18:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
 c1c:	8f 3f       	cpi	r24, 0xFF	; 255
 c1e:	d1 f0       	breq	.+52     	; 0xc54 <Run_Slave_Service+0x8e>
        {
            // If command differs from our status execute intensity command
            if (Get_Intensity_Data(p_My_Status_Data) != Get_Intensity_Data(p_My_Command_Data))
 c20:	8b e2       	ldi	r24, 0x2B	; 43
 c22:	91 e0       	ldi	r25, 0x01	; 1
 c24:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
 c28:	c8 2f       	mov	r28, r24
 c2a:	8e e2       	ldi	r24, 0x2E	; 46
 c2c:	91 e0       	ldi	r25, 0x01	; 1
 c2e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
 c32:	c8 17       	cp	r28, r24
 c34:	79 f0       	breq	.+30     	; 0xc54 <Run_Slave_Service+0x8e>
            {
                // Update our status as the command
                Write_Intensity_Data(p_My_Status_Data, Get_Intensity_Data(p_My_Command_Data));
 c36:	8e e2       	ldi	r24, 0x2E	; 46
 c38:	91 e0       	ldi	r25, 0x01	; 1
 c3a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
 c3e:	68 2f       	mov	r22, r24
 c40:	8b e2       	ldi	r24, 0x2B	; 43
 c42:	91 e0       	ldi	r25, 0x01	; 1
 c44:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_Intensity_Data>

                // Set light intensity
                Set_Light_Intensity(Get_Intensity_Data(p_My_Status_Data));
 c48:	8b e2       	ldi	r24, 0x2B	; 43
 c4a:	91 e0       	ldi	r25, 0x01	; 1
 c4c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Get_Intensity_Data>
 c50:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Set_Light_Intensity>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 c54:	df bf       	out	0x3f, r29	; 63
****************************************************************************/
static void process_position_cmd(void)
{
    // Enter critical section so when we are copying data, we know the data
    //      we are copying is the same data we checked.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 c56:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c58:	f8 94       	cli
    {
        // General Flow:
        // If the command is valid, then we copy the command to our status
        //      then we execute whatever is in our status
        if (POSITION_NON_COMMAND != Get_Position_Data(p_My_Command_Data))
 c5a:	8e e2       	ldi	r24, 0x2E	; 46
 c5c:	91 e0       	ldi	r25, 0x01	; 1
 c5e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	d9 f0       	breq	.+54     	; 0xc9c <Run_Slave_Service+0xd6>
        {
            // If command differs from our status and position is valid, execute move command
            if (Get_Position_Data(p_My_Status_Data) != Get_Position_Data(p_My_Command_Data))
 c66:	8b e2       	ldi	r24, 0x2B	; 43
 c68:	91 e0       	ldi	r25, 0x01	; 1
 c6a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
 c6e:	ec 01       	movw	r28, r24
 c70:	8e e2       	ldi	r24, 0x2E	; 46
 c72:	91 e0       	ldi	r25, 0x01	; 1
 c74:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
 c78:	c8 17       	cp	r28, r24
 c7a:	d9 07       	cpc	r29, r25
 c7c:	79 f0       	breq	.+30     	; 0xc9c <Run_Slave_Service+0xd6>
            {
                // Update our status as the command
                Write_Position_Data(p_My_Status_Data, Get_Position_Data(p_My_Command_Data));
 c7e:	8e e2       	ldi	r24, 0x2E	; 46
 c80:	91 e0       	ldi	r25, 0x01	; 1
 c82:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
 c86:	bc 01       	movw	r22, r24
 c88:	8b e2       	ldi	r24, 0x2B	; 43
 c8a:	91 e0       	ldi	r25, 0x01	; 1
 c8c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Write_Position_Data>

                // Change servo position, based on our new status
                Move_Analog_Servo_To_Position(Get_Position_Data(p_My_Status_Data));
 c90:	8b e2       	ldi	r24, 0x2B	; 43
 c92:	91 e0       	ldi	r25, 0x01	; 1
 c94:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Get_Position_Data>
 c98:	0e 94 9d 00 	call	0x13a	; 0x13a <Move_Analog_Servo_To_Position>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 c9c:	1f bf       	out	0x3f, r17	; 63
            break;

        default:
            break;
    }
}
 c9e:	df 91       	pop	r29
 ca0:	cf 91       	pop	r28
 ca2:	1f 91       	pop	r17
 ca4:	08 95       	ret

00000ca6 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
 ca6:	e2 e3       	ldi	r30, 0x32	; 50
 ca8:	f1 e0       	ldi	r31, 0x01	; 1
 caa:	a6 e3       	ldi	r26, 0x36	; 54
 cac:	b1 e0       	ldi	r27, 0x01	; 1
 cae:	8a e9       	ldi	r24, 0x9A	; 154
 cb0:	91 e0       	ldi	r25, 0x01	; 1
 cb2:	11 82       	std	Z+1, r1	; 0x01
 cb4:	10 82       	st	Z, r1
 cb6:	13 82       	std	Z+3, r1	; 0x03
 cb8:	12 82       	std	Z+2, r1	; 0x02
 cba:	1c 92       	st	X, r1
 cbc:	15 82       	std	Z+5, r1	; 0x05
 cbe:	16 82       	std	Z+6, r1	; 0x06
 cc0:	17 82       	std	Z+7, r1	; 0x07
 cc2:	10 86       	std	Z+8, r1	; 0x08
 cc4:	11 86       	std	Z+9, r1	; 0x09
 cc6:	12 86       	std	Z+10, r1	; 0x0a
 cc8:	13 86       	std	Z+11, r1	; 0x0b
 cca:	14 86       	std	Z+12, r1	; 0x0c
 ccc:	3d 96       	adiw	r30, 0x0d	; 13
 cce:	1d 96       	adiw	r26, 0x0d	; 13
 cd0:	e8 17       	cp	r30, r24
 cd2:	f9 07       	cpc	r31, r25
 cd4:	71 f7       	brne	.-36     	; 0xcb2 <Init_Timer_Module+0xc>
 cd6:	15 bc       	out	0x25, r1	; 37
 cd8:	16 bc       	out	0x26, r1	; 38
 cda:	18 bc       	out	0x28, r1	; 40
 cdc:	88 b5       	in	r24, 0x28	; 40
 cde:	83 58       	subi	r24, 0x83	; 131
 ce0:	88 bd       	out	0x28, r24	; 40
 ce2:	82 e0       	ldi	r24, 0x02	; 2
 ce4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 ce8:	16 bc       	out	0x26, r1	; 38
 cea:	86 b5       	in	r24, 0x26	; 38
 cec:	83 60       	ori	r24, 0x03	; 3
 cee:	86 bd       	out	0x26, r24	; 38
 cf0:	08 95       	ret

00000cf2 <Register_Timer>:
 cf2:	cf 93       	push	r28
 cf4:	df 93       	push	r29
 cf6:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <Timers>
 cfa:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <Timers+0x1>
 cfe:	c8 17       	cp	r28, r24
 d00:	d9 07       	cpc	r29, r25
 d02:	09 f4       	brne	.+2      	; 0xd06 <Register_Timer+0x14>
 d04:	40 c0       	rjmp	.+128    	; 0xd86 <Register_Timer+0x94>
 d06:	a2 e3       	ldi	r26, 0x32	; 50
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	4d e8       	ldi	r20, 0x8D	; 141
 d0c:	51 e0       	ldi	r21, 0x01	; 1
 d0e:	fd 01       	movw	r30, r26
 d10:	25 85       	ldd	r18, Z+13	; 0x0d
 d12:	36 85       	ldd	r19, Z+14	; 0x0e
 d14:	28 17       	cp	r18, r24
 d16:	39 07       	cpc	r19, r25
 d18:	b1 f1       	breq	.+108    	; 0xd86 <Register_Timer+0x94>
 d1a:	3d 96       	adiw	r30, 0x0d	; 13
 d1c:	e4 17       	cp	r30, r20
 d1e:	f5 07       	cpc	r31, r21
 d20:	b9 f7       	brne	.-18     	; 0xd10 <Register_Timer+0x1e>
 d22:	2c c0       	rjmp	.+88     	; 0xd7c <Register_Timer+0x8a>
 d24:	1d 96       	adiw	r26, 0x0d	; 13
 d26:	4d 91       	ld	r20, X+
 d28:	5c 91       	ld	r21, X
 d2a:	1e 97       	sbiw	r26, 0x0e	; 14
 d2c:	45 2b       	or	r20, r21
 d2e:	f9 f4       	brne	.+62     	; 0xd6e <Register_Timer+0x7c>
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <Register_Timer+0x44>
 d32:	20 e0       	ldi	r18, 0x00	; 0
 d34:	30 e0       	ldi	r19, 0x00	; 0
 d36:	f9 01       	movw	r30, r18
 d38:	ee 0f       	add	r30, r30
 d3a:	ff 1f       	adc	r31, r31
 d3c:	e2 0f       	add	r30, r18
 d3e:	f3 1f       	adc	r31, r19
 d40:	ee 0f       	add	r30, r30
 d42:	ff 1f       	adc	r31, r31
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	2e 0f       	add	r18, r30
 d4a:	3f 1f       	adc	r19, r31
 d4c:	f9 01       	movw	r30, r18
 d4e:	ee 5c       	subi	r30, 0xCE	; 206
 d50:	fe 4f       	sbci	r31, 0xFE	; 254
 d52:	91 83       	std	Z+1, r25	; 0x01
 d54:	80 83       	st	Z, r24
 d56:	73 83       	std	Z+3, r23	; 0x03
 d58:	62 83       	std	Z+2, r22	; 0x02
 d5a:	14 82       	std	Z+4, r1	; 0x04
 d5c:	15 82       	std	Z+5, r1	; 0x05
 d5e:	16 82       	std	Z+6, r1	; 0x06
 d60:	17 82       	std	Z+7, r1	; 0x07
 d62:	10 86       	std	Z+8, r1	; 0x08
 d64:	11 86       	std	Z+9, r1	; 0x09
 d66:	12 86       	std	Z+10, r1	; 0x0a
 d68:	13 86       	std	Z+11, r1	; 0x0b
 d6a:	14 86       	std	Z+12, r1	; 0x0c
 d6c:	0c c0       	rjmp	.+24     	; 0xd86 <Register_Timer+0x94>
 d6e:	2f 5f       	subi	r18, 0xFF	; 255
 d70:	3f 4f       	sbci	r19, 0xFF	; 255
 d72:	1d 96       	adiw	r26, 0x0d	; 13
 d74:	28 30       	cpi	r18, 0x08	; 8
 d76:	31 05       	cpc	r19, r1
 d78:	a9 f6       	brne	.-86     	; 0xd24 <Register_Timer+0x32>
 d7a:	05 c0       	rjmp	.+10     	; 0xd86 <Register_Timer+0x94>
 d7c:	cd 2b       	or	r28, r29
 d7e:	c9 f2       	breq	.-78     	; 0xd32 <Register_Timer+0x40>
 d80:	21 e0       	ldi	r18, 0x01	; 1
 d82:	30 e0       	ldi	r19, 0x00	; 0
 d84:	cf cf       	rjmp	.-98     	; 0xd24 <Register_Timer+0x32>
 d86:	df 91       	pop	r29
 d88:	cf 91       	pop	r28
 d8a:	08 95       	ret

00000d8c <Start_Timer>:
 d8c:	cf 92       	push	r12
 d8e:	df 92       	push	r13
 d90:	ef 92       	push	r14
 d92:	ff 92       	push	r15
 d94:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Timers>
 d98:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <Timers+0x1>
 d9c:	28 17       	cp	r18, r24
 d9e:	39 07       	cpc	r19, r25
 da0:	51 f0       	breq	.+20     	; 0xdb6 <Start_Timer+0x2a>
 da2:	e2 e3       	ldi	r30, 0x32	; 50
 da4:	f1 e0       	ldi	r31, 0x01	; 1
 da6:	21 e0       	ldi	r18, 0x01	; 1
 da8:	30 e0       	ldi	r19, 0x00	; 0
 daa:	a5 85       	ldd	r26, Z+13	; 0x0d
 dac:	b6 85       	ldd	r27, Z+14	; 0x0e
 dae:	a8 17       	cp	r26, r24
 db0:	b9 07       	cpc	r27, r25
 db2:	11 f5       	brne	.+68     	; 0xdf8 <Start_Timer+0x6c>
 db4:	02 c0       	rjmp	.+4      	; 0xdba <Start_Timer+0x2e>
 db6:	20 e0       	ldi	r18, 0x00	; 0
 db8:	30 e0       	ldi	r19, 0x00	; 0
 dba:	f9 01       	movw	r30, r18
 dbc:	ee 0f       	add	r30, r30
 dbe:	ff 1f       	adc	r31, r31
 dc0:	e2 0f       	add	r30, r18
 dc2:	f3 1f       	adc	r31, r19
 dc4:	ee 0f       	add	r30, r30
 dc6:	ff 1f       	adc	r31, r31
 dc8:	ee 0f       	add	r30, r30
 dca:	ff 1f       	adc	r31, r31
 dcc:	2e 0f       	add	r18, r30
 dce:	3f 1f       	adc	r19, r31
 dd0:	f9 01       	movw	r30, r18
 dd2:	ee 5c       	subi	r30, 0xCE	; 206
 dd4:	fe 4f       	sbci	r31, 0xFE	; 254
 dd6:	81 e0       	ldi	r24, 0x01	; 1
 dd8:	84 83       	std	Z+4, r24	; 0x04
 dda:	15 82       	std	Z+5, r1	; 0x05
 ddc:	16 82       	std	Z+6, r1	; 0x06
 dde:	17 82       	std	Z+7, r1	; 0x07
 de0:	10 86       	std	Z+8, r1	; 0x08
 de2:	6a 01       	movw	r12, r20
 de4:	7b 01       	movw	r14, r22
 de6:	cc 0c       	add	r12, r12
 de8:	dd 1c       	adc	r13, r13
 dea:	ee 1c       	adc	r14, r14
 dec:	ff 1c       	adc	r15, r15
 dee:	c1 86       	std	Z+9, r12	; 0x09
 df0:	d2 86       	std	Z+10, r13	; 0x0a
 df2:	e3 86       	std	Z+11, r14	; 0x0b
 df4:	f4 86       	std	Z+12, r15	; 0x0c
 df6:	06 c0       	rjmp	.+12     	; 0xe04 <Start_Timer+0x78>
 df8:	2f 5f       	subi	r18, 0xFF	; 255
 dfa:	3f 4f       	sbci	r19, 0xFF	; 255
 dfc:	3d 96       	adiw	r30, 0x0d	; 13
 dfe:	28 30       	cpi	r18, 0x08	; 8
 e00:	31 05       	cpc	r19, r1
 e02:	99 f6       	brne	.-90     	; 0xdaa <Start_Timer+0x1e>
 e04:	ff 90       	pop	r15
 e06:	ef 90       	pop	r14
 e08:	df 90       	pop	r13
 e0a:	cf 90       	pop	r12
 e0c:	08 95       	ret

00000e0e <Stop_Timer>:
 e0e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Timers>
 e12:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <Timers+0x1>
 e16:	28 17       	cp	r18, r24
 e18:	39 07       	cpc	r19, r25
 e1a:	51 f0       	breq	.+20     	; 0xe30 <Stop_Timer+0x22>
 e1c:	e2 e3       	ldi	r30, 0x32	; 50
 e1e:	f1 e0       	ldi	r31, 0x01	; 1
 e20:	21 e0       	ldi	r18, 0x01	; 1
 e22:	30 e0       	ldi	r19, 0x00	; 0
 e24:	45 85       	ldd	r20, Z+13	; 0x0d
 e26:	56 85       	ldd	r21, Z+14	; 0x0e
 e28:	48 17       	cp	r20, r24
 e2a:	59 07       	cpc	r21, r25
 e2c:	99 f4       	brne	.+38     	; 0xe54 <Stop_Timer+0x46>
 e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Stop_Timer+0x26>
 e30:	20 e0       	ldi	r18, 0x00	; 0
 e32:	30 e0       	ldi	r19, 0x00	; 0
 e34:	f9 01       	movw	r30, r18
 e36:	ee 0f       	add	r30, r30
 e38:	ff 1f       	adc	r31, r31
 e3a:	e2 0f       	add	r30, r18
 e3c:	f3 1f       	adc	r31, r19
 e3e:	ee 0f       	add	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	2e 0f       	add	r18, r30
 e48:	3f 1f       	adc	r19, r31
 e4a:	f9 01       	movw	r30, r18
 e4c:	ee 5c       	subi	r30, 0xCE	; 206
 e4e:	fe 4f       	sbci	r31, 0xFE	; 254
 e50:	14 82       	std	Z+4, r1	; 0x04
 e52:	08 95       	ret
 e54:	2f 5f       	subi	r18, 0xFF	; 255
 e56:	3f 4f       	sbci	r19, 0xFF	; 255
 e58:	3d 96       	adiw	r30, 0x0d	; 13
 e5a:	28 30       	cpi	r18, 0x08	; 8
 e5c:	31 05       	cpc	r19, r1
 e5e:	11 f7       	brne	.-60     	; 0xe24 <Stop_Timer+0x16>
 e60:	08 95       	ret

00000e62 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 e62:	1f 92       	push	r1
 e64:	0f 92       	push	r0
 e66:	0f b6       	in	r0, 0x3f	; 63
 e68:	0f 92       	push	r0
 e6a:	11 24       	eor	r1, r1
 e6c:	ef 92       	push	r14
 e6e:	ff 92       	push	r15
 e70:	0f 93       	push	r16
 e72:	1f 93       	push	r17
 e74:	2f 93       	push	r18
 e76:	3f 93       	push	r19
 e78:	4f 93       	push	r20
 e7a:	5f 93       	push	r21
 e7c:	6f 93       	push	r22
 e7e:	7f 93       	push	r23
 e80:	8f 93       	push	r24
 e82:	9f 93       	push	r25
 e84:	af 93       	push	r26
 e86:	bf 93       	push	r27
 e88:	cf 93       	push	r28
 e8a:	df 93       	push	r29
 e8c:	ef 93       	push	r30
 e8e:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
 e90:	88 b5       	in	r24, 0x28	; 40
 e92:	83 58       	subi	r24, 0x83	; 131
 e94:	88 bd       	out	0x28, r24	; 40
 e96:	06 e3       	ldi	r16, 0x36	; 54
 e98:	11 e0       	ldi	r17, 0x01	; 1
 e9a:	c2 e3       	ldi	r28, 0x32	; 50
 e9c:	d1 e0       	ldi	r29, 0x01	; 1
 e9e:	0f 2e       	mov	r0, r31
 ea0:	fa e9       	ldi	r31, 0x9A	; 154
 ea2:	ef 2e       	mov	r14, r31
 ea4:	f1 e0       	ldi	r31, 0x01	; 1
 ea6:	ff 2e       	mov	r15, r31
 ea8:	f0 2d       	mov	r31, r0
 eaa:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
 eac:	80 81       	ld	r24, Z
 eae:	88 23       	and	r24, r24
 eb0:	81 f1       	breq	.+96     	; 0xf12 <__vector_10+0xb0>
 eb2:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
 eb4:	89 85       	ldd	r24, Y+9	; 0x09
 eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
 eb8:	ab 85       	ldd	r26, Y+11	; 0x0b
 eba:	bc 85       	ldd	r27, Y+12	; 0x0c
 ebc:	00 97       	sbiw	r24, 0x00	; 0
 ebe:	a1 05       	cpc	r26, r1
 ec0:	b1 05       	cpc	r27, r1
 ec2:	b9 f0       	breq	.+46     	; 0xef2 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
 ec4:	4d 81       	ldd	r20, Y+5	; 0x05
 ec6:	5e 81       	ldd	r21, Y+6	; 0x06
 ec8:	6f 81       	ldd	r22, Y+7	; 0x07
 eca:	78 85       	ldd	r23, Y+8	; 0x08
 ecc:	4f 5f       	subi	r20, 0xFF	; 255
 ece:	5f 4f       	sbci	r21, 0xFF	; 255
 ed0:	6f 4f       	sbci	r22, 0xFF	; 255
 ed2:	7f 4f       	sbci	r23, 0xFF	; 255
 ed4:	4d 83       	std	Y+5, r20	; 0x05
 ed6:	5e 83       	std	Y+6, r21	; 0x06
 ed8:	6f 83       	std	Y+7, r22	; 0x07
 eda:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
 edc:	01 97       	sbiw	r24, 0x01	; 1
 ede:	a1 09       	sbc	r26, r1
 ee0:	b1 09       	sbc	r27, r1
 ee2:	89 87       	std	Y+9, r24	; 0x09
 ee4:	9a 87       	std	Y+10, r25	; 0x0a
 ee6:	ab 87       	std	Y+11, r26	; 0x0b
 ee8:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
 eea:	89 2b       	or	r24, r25
 eec:	8a 2b       	or	r24, r26
 eee:	8b 2b       	or	r24, r27
 ef0:	81 f4       	brne	.+32     	; 0xf12 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
 ef2:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
 ef4:	d9 01       	movw	r26, r18
 ef6:	12 96       	adiw	r26, 0x02	; 2
 ef8:	ed 91       	ld	r30, X+
 efa:	fc 91       	ld	r31, X
 efc:	13 97       	sbiw	r26, 0x03	; 3
 efe:	30 97       	sbiw	r30, 0x00	; 0
 f00:	41 f0       	breq	.+16     	; 0xf12 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
 f02:	8d 91       	ld	r24, X+
 f04:	9c 91       	ld	r25, X
 f06:	dc 01       	movw	r26, r24
 f08:	6d 91       	ld	r22, X+
 f0a:	7d 91       	ld	r23, X+
 f0c:	8d 91       	ld	r24, X+
 f0e:	9c 91       	ld	r25, X
 f10:	09 95       	icall
 f12:	03 5f       	subi	r16, 0xF3	; 243
 f14:	1f 4f       	sbci	r17, 0xFF	; 255
 f16:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
 f18:	ce 15       	cp	r28, r14
 f1a:	df 05       	cpc	r29, r15
 f1c:	31 f6       	brne	.-116    	; 0xeaa <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
 f1e:	ff 91       	pop	r31
 f20:	ef 91       	pop	r30
 f22:	df 91       	pop	r29
 f24:	cf 91       	pop	r28
 f26:	bf 91       	pop	r27
 f28:	af 91       	pop	r26
 f2a:	9f 91       	pop	r25
 f2c:	8f 91       	pop	r24
 f2e:	7f 91       	pop	r23
 f30:	6f 91       	pop	r22
 f32:	5f 91       	pop	r21
 f34:	4f 91       	pop	r20
 f36:	3f 91       	pop	r19
 f38:	2f 91       	pop	r18
 f3a:	1f 91       	pop	r17
 f3c:	0f 91       	pop	r16
 f3e:	ff 90       	pop	r15
 f40:	ef 90       	pop	r14
 f42:	0f 90       	pop	r0
 f44:	0f be       	out	0x3f, r0	; 63
 f46:	0f 90       	pop	r0
 f48:	1f 90       	pop	r1
 f4a:	18 95       	reti

00000f4c <__udivmodsi4>:
 f4c:	a1 e2       	ldi	r26, 0x21	; 33
 f4e:	1a 2e       	mov	r1, r26
 f50:	aa 1b       	sub	r26, r26
 f52:	bb 1b       	sub	r27, r27
 f54:	fd 01       	movw	r30, r26
 f56:	0d c0       	rjmp	.+26     	; 0xf72 <__udivmodsi4_ep>

00000f58 <__udivmodsi4_loop>:
 f58:	aa 1f       	adc	r26, r26
 f5a:	bb 1f       	adc	r27, r27
 f5c:	ee 1f       	adc	r30, r30
 f5e:	ff 1f       	adc	r31, r31
 f60:	a2 17       	cp	r26, r18
 f62:	b3 07       	cpc	r27, r19
 f64:	e4 07       	cpc	r30, r20
 f66:	f5 07       	cpc	r31, r21
 f68:	20 f0       	brcs	.+8      	; 0xf72 <__udivmodsi4_ep>
 f6a:	a2 1b       	sub	r26, r18
 f6c:	b3 0b       	sbc	r27, r19
 f6e:	e4 0b       	sbc	r30, r20
 f70:	f5 0b       	sbc	r31, r21

00000f72 <__udivmodsi4_ep>:
 f72:	66 1f       	adc	r22, r22
 f74:	77 1f       	adc	r23, r23
 f76:	88 1f       	adc	r24, r24
 f78:	99 1f       	adc	r25, r25
 f7a:	1a 94       	dec	r1
 f7c:	69 f7       	brne	.-38     	; 0xf58 <__udivmodsi4_loop>
 f7e:	60 95       	com	r22
 f80:	70 95       	com	r23
 f82:	80 95       	com	r24
 f84:	90 95       	com	r25
 f86:	9b 01       	movw	r18, r22
 f88:	ac 01       	movw	r20, r24
 f8a:	bd 01       	movw	r22, r26
 f8c:	cf 01       	movw	r24, r30
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
