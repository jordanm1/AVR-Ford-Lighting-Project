
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000014a8  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e3  00800120  00800120  0000155c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a44  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001989  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020fd  00000000  00000000  00006d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  00008e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f90  00000000  00000000  00009844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b4  00000000  00000000  0000a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000ca88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
       4:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_1>
       8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_3>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_4>
      14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_9>
      28:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_10>
      2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      30:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_12>
      34:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_13>
      38:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_14>
      3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_15>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_16>
      44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000050 <__trampolines_end>:
      50:	41 54       	subi	r20, 0x41	; 65
      52:	5e 53       	subi	r21, 0x3E	; 62
      54:	49 53       	subi	r20, 0x39	; 57
      56:	53 3f       	cpi	r21, 0xF3	; 243
      58:	0d 00       	.word	0x000d	; ????

0000005a <__ctors_end>:
      5a:	11 24       	eor	r1, r1
      5c:	1f be       	out	0x3f, r1	; 63
      5e:	cf ef       	ldi	r28, 0xFF	; 255
      60:	d2 e0       	ldi	r29, 0x02	; 2
      62:	de bf       	out	0x3e, r29	; 62
      64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
      66:	11 e0       	ldi	r17, 0x01	; 1
      68:	a0 e0       	ldi	r26, 0x00	; 0
      6a:	b1 e0       	ldi	r27, 0x01	; 1
      6c:	e8 ea       	ldi	r30, 0xA8	; 168
      6e:	f4 e1       	ldi	r31, 0x14	; 20
      70:	02 c0       	rjmp	.+4      	; 0x76 <__do_copy_data+0x10>
      72:	05 90       	lpm	r0, Z+
      74:	0d 92       	st	X+, r0
      76:	a0 32       	cpi	r26, 0x20	; 32
      78:	b1 07       	cpc	r27, r17
      7a:	d9 f7       	brne	.-10     	; 0x72 <__do_copy_data+0xc>

0000007c <__do_clear_bss>:
      7c:	22 e0       	ldi	r18, 0x02	; 2
      7e:	a0 e2       	ldi	r26, 0x20	; 32
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
      84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
      86:	a3 30       	cpi	r26, 0x03	; 3
      88:	b2 07       	cpc	r27, r18
      8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
      8c:	0e 94 05 04 	call	0x80a	; 0x80a <main>
      90:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <_exit>

00000094 <__bad_interrupt>:
      94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
      98:	1f 92       	push	r1
      9a:	0f 92       	push	r0
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	0f 92       	push	r0
      a0:	11 24       	eor	r1, r1
      a2:	8f 93       	push	r24
      a4:	9f 93       	push	r25
      a6:	ef 93       	push	r30
      a8:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
      aa:	ea e7       	ldi	r30, 0x7A	; 122
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	80 61       	ori	r24, 0x10	; 16
      b2:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
      b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
      b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
      bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	9f 91       	pop	r25
      ca:	8f 91       	pop	r24
      cc:	0f 90       	pop	r0
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	8f 93       	push	r24
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
      e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
      ea:	88 23       	and	r24, r24
      ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_9+0x1e>
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	39 f0       	breq	.+14     	; 0x100 <__vector_9+0x2a>
      f2:	0c c0       	rjmp	.+24     	; 0x10c <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
      f4:	e3 e8       	ldi	r30, 0x83	; 131
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	80 62       	ori	r24, 0x20	; 32
      fc:	80 83       	st	Z, r24
            break;
      fe:	06 c0       	rjmp	.+12     	; 0x10c <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
     100:	e3 e8       	ldi	r30, 0x83	; 131
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8f 7d       	andi	r24, 0xDF	; 223
     108:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
     10a:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
     10c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     110:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
     112:	83 70       	andi	r24, 0x03	; 3
     114:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
     118:	ff 91       	pop	r31
     11a:	ef 91       	pop	r30
     11c:	8f 91       	pop	r24
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	2f 93       	push	r18
     134:	3f 93       	push	r19
     136:	4f 93       	push	r20
     138:	5f 93       	push	r21
     13a:	6f 93       	push	r22
     13c:	7f 93       	push	r23
     13e:	8f 93       	push	r24
     140:	9f 93       	push	r25
     142:	af 93       	push	r26
     144:	bf 93       	push	r27
     146:	ef 93       	push	r30
     148:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
     14a:	e8 e6       	ldi	r30, 0x68	; 104
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	8e 7f       	andi	r24, 0xFE	; 254
     152:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     154:	4a e0       	ldi	r20, 0x0A	; 10
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
}
     164:	ff 91       	pop	r31
     166:	ef 91       	pop	r30
     168:	bf 91       	pop	r27
     16a:	af 91       	pop	r26
     16c:	9f 91       	pop	r25
     16e:	8f 91       	pop	r24
     170:	7f 91       	pop	r23
     172:	6f 91       	pop	r22
     174:	5f 91       	pop	r21
     176:	4f 91       	pop	r20
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <__vector_4>:

ISR(PCINT1_vect)
{
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	4f 93       	push	r20
     196:	5f 93       	push	r21
     198:	6f 93       	push	r22
     19a:	7f 93       	push	r23
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
     1a8:	e8 e6       	ldi	r30, 0x68	; 104
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8d 7f       	andi	r24, 0xFD	; 253
     1b0:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     1b2:	4a e0       	ldi	r20, 0x0A	; 10
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <CAN_Reset>:
	// Value to Set
	uint8_t Data_2_Write[RX_STATUS_TX_LENGTH] = {MCP_RX_STATUS};
	
	// Call SPI command
	Write_SPI(RX_STATUS_TX_LENGTH, RX_STATUS_RX_LENGTH, Data_2_Write, Variable_2_Set);	
}
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	ae 01       	movw	r20, r28
     1f8:	4f 5f       	subi	r20, 0xFF	; 255
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 0a 05 	call	0xa14	; 0xa14 <Write_SPI>
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <CAN_Read>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	00 d0       	rcall	.+0      	; 0x212 <CAN_Read+0x6>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	9b 01       	movw	r18, r22
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	99 83       	std	Y+1, r25	; 0x01
     21c:	8a 83       	std	Y+2, r24	; 0x02
     21e:	ae 01       	movw	r20, r28
     220:	4f 5f       	subi	r20, 0xFF	; 255
     222:	5f 4f       	sbci	r21, 0xFF	; 255
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 0a 05 	call	0xa14	; 0xa14 <Write_SPI>
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <CAN_Write>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <CAN_Write+0x6>
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	99 83       	std	Y+1, r25	; 0x01
     246:	8a 83       	std	Y+2, r24	; 0x02
     248:	fb 01       	movw	r30, r22
     24a:	80 81       	ld	r24, Z
     24c:	8b 83       	std	Y+3, r24	; 0x03
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	ae 01       	movw	r20, r28
     254:	4f 5f       	subi	r20, 0xFF	; 255
     256:	5f 4f       	sbci	r21, 0xFF	; 255
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	0e 94 0a 05 	call	0xa14	; 0xa14 <Write_SPI>
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <CAN_Bit_Modify>:
        Performs bit modify operation on CAN module

****************************************************************************/

void CAN_Bit_Modify(uint8_t Register_2_Set, uint8_t Bits_2_Change, uint8_t* Value_2_Set)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <CAN_Bit_Modify+0x6>
     272:	00 d0       	rcall	.+0      	; 0x274 <CAN_Bit_Modify+0x8>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    // Define constants
    #define BM_TX_LENGTH 4
    #define BM_RX_LENGTH 0
	
    // Value to Set
    uint8_t Data_2_Write[BM_TX_LENGTH] = {MCP_BITMOD, Register_2_Set, Bits_2_Change, Value_2_Set[0]};
     278:	95 e0       	ldi	r25, 0x05	; 5
     27a:	99 83       	std	Y+1, r25	; 0x01
     27c:	8a 83       	std	Y+2, r24	; 0x02
     27e:	6b 83       	std	Y+3, r22	; 0x03
     280:	fa 01       	movw	r30, r20
     282:	80 81       	ld	r24, Z
     284:	8c 83       	std	Y+4, r24	; 0x04
    
    // Call SPI command
    Write_SPI(BM_TX_LENGTH, BM_RX_LENGTH, Data_2_Write, NULL);
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	ae 01       	movw	r20, r28
     28c:	4f 5f       	subi	r20, 0xFF	; 255
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	0e 94 0a 05 	call	0xa14	; 0xa14 <Write_SPI>
}
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <CAN_Initialize_1>:
    Description
        Initializes the CAN module MCP25625

****************************************************************************/
void CAN_Initialize_1(uint8_t * * p_data_store)
{   
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
    // Save away the address to the array of addresses to the locations we will
    // fill in data
    a_p_Recv_List = p_data_store;
     2aa:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <a_p_Recv_List+0x1>
     2ae:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <a_p_Recv_List>

    // Reset the CAN Module and enter in configuration mode
    CAN_Reset();
     2b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <CAN_Reset>
    
    // Enter configuration mode, abort all pending transmissions and disable one shot mode
    TX_Data[0] = (MODE_CONFIG|ABORT_TX);
     2b6:	80 e9       	ldi	r24, 0x90	; 144
     2b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CANCTRL, TX_Data);
     2bc:	66 e2       	ldi	r22, 0x26	; 38
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	
    // Disable CLKOUT
    TX_Data[0] = CLKOUT_DISABLE;
     2c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, (1 << 2), TX_Data);
     2ca:	46 e2       	ldi	r20, 0x26	; 38
     2cc:	51 e0       	ldi	r21, 0x01	; 1
     2ce:	64 e0       	ldi	r22, 0x04	; 4
     2d0:	8f e0       	ldi	r24, 0x0F	; 15
     2d2:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	
    // Set CNF Bit Time registers for Baud Rate = 312500 b/s
	TX_Data[0] = 0x41;
     2d6:	d1 e4       	ldi	r29, 0x41	; 65
     2d8:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, (1 << 0), TX_Data);
     2dc:	46 e2       	ldi	r20, 0x26	; 38
     2de:	51 e0       	ldi	r21, 0x01	; 1
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	8a e2       	ldi	r24, 0x2A	; 42
     2e4:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     2e8:	c1 ef       	ldi	r28, 0xF1	; 241
     2ea:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 0)|(1 << 1)|(1 << 2)), TX_Data);
     2ee:	46 e2       	ldi	r20, 0x26	; 38
     2f0:	51 e0       	ldi	r21, 0x01	; 1
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	89 e2       	ldi	r24, 0x29	; 41
     2f6:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     2fa:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 3)|(1 << 4)|(1 << 5)), TX_Data);
     2fe:	46 e2       	ldi	r20, 0x26	; 38
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	68 e3       	ldi	r22, 0x38	; 56
     304:	89 e2       	ldi	r24, 0x29	; 41
     306:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     30a:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 7)|(1 << 6)), TX_Data);
     30e:	46 e2       	ldi	r20, 0x26	; 38
     310:	51 e0       	ldi	r21, 0x01	; 1
     312:	60 ec       	ldi	r22, 0xC0	; 192
     314:	89 e2       	ldi	r24, 0x29	; 41
     316:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0x85;
     31a:	85 e8       	ldi	r24, 0x85	; 133
     31c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CNF3, TX_Data);
     320:	66 e2       	ldi	r22, 0x26	; 38
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	88 e2       	ldi	r24, 0x28	; 40
     326:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	TX_Data[0] = 0x41;
     32a:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, ((1 << 7)|(1 << 6)), TX_Data);
     32e:	46 e2       	ldi	r20, 0x26	; 38
     330:	51 e0       	ldi	r21, 0x01	; 1
     332:	60 ec       	ldi	r22, 0xC0	; 192
     334:	8a e2       	ldi	r24, 0x2A	; 42
     336:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <CAN_Initialize_2>:
void CAN_Initialize_2(void)
{
    // Set interrupt registers
    
    // Enable all interrupts
    TX_Data[0] = 0xFF;
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CANINTE, TX_Data);
     346:	66 e2       	ldi	r22, 0x26	; 38
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8b e2       	ldi	r24, 0x2B	; 43
     34c:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>

    // Set up TX Buffer 0
    TX_Data[0] = MCP_TXB_TXP10_M; // Highest message priority
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0CTRL, TX_Data);
     356:	66 e2       	ldi	r22, 0x26	; 38
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	80 e3       	ldi	r24, 0x30	; 48
     35c:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set RTS pins as digital inputs
    TX_Data[0] = 0;
     360:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_RTSCTRL, TX_Data);
     364:	66 e2       	ldi	r22, 0x26	; 38
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	8d e0       	ldi	r24, 0x0D	; 13
     36a:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set identifier of TX Buffer 0 to 1
    TX_Data[0] = 0;
     36e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0SIDH, TX_Data);
     372:	66 e2       	ldi	r22, 0x26	; 38
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	81 e3       	ldi	r24, 0x31	; 49
     378:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    TX_Data[0] = 0x20;
     37c:	80 e2       	ldi	r24, 0x20	; 32
     37e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0SIDL, TX_Data);
     382:	66 e2       	ldi	r22, 0x26	; 38
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	82 e3       	ldi	r24, 0x32	; 50
     388:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set identifier of RX Buffer 0 to 0
    TX_Data[0] = 0;
     38c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_RXF0SIDH, TX_Data);
     390:	66 e2       	ldi	r22, 0x26	; 38
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    CAN_Write(MCP_RXF0SIDL, TX_Data);
     39a:	66 e2       	ldi	r22, 0x26	; 38
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    TX_Data[0] = 0x60;
     3a4:	80 e6       	ldi	r24, 0x60	; 96
     3a6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_RXB0CTRL, TX_Data);
     3aa:	66 e2       	ldi	r22, 0x26	; 38
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Switch to Normal Mode
    TX_Data[0] = (MCP_NORMAL);
     3b2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, ((1 << 5)|(1 << 6)|(1 << 7)), TX_Data);
     3b6:	46 e2       	ldi	r20, 0x26	; 38
     3b8:	51 e0       	ldi	r21, 0x01	; 1
     3ba:	60 ee       	ldi	r22, 0xE0	; 224
     3bc:	8f e0       	ldi	r24, 0x0F	; 15
     3be:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
    
    RX_Data[0] = &Recv_Byte;
     3c2:	83 e2       	ldi	r24, 0x23	; 35
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <RX_Data+0x1>
     3ca:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <RX_Data>
    CAN_Read(MCP_CANSTAT, RX_Data);
     3ce:	64 e2       	ldi	r22, 0x24	; 36
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	8e e0       	ldi	r24, 0x0E	; 14
     3d4:	0e 94 06 01 	call	0x20c	; 0x20c <CAN_Read>
     3d8:	08 95       	ret

000003da <CAN_Send_Message>:
        Sends a CAN Message on the CAN Bus

****************************************************************************/

void CAN_Send_Message(uint8_t Msg_Length, uint8_t* Transmit_Data)
{	
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
	// If invalid CAN Message Length don't perform transmit
	if (Msg_Length > 8)
     3e4:	89 30       	cpi	r24, 0x09	; 9
     3e6:	30 f5       	brcc	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3e8:	7b 01       	movw	r14, r22
     3ea:	c8 2f       	mov	r28, r24
	{
		return;
	}
	// Set message length
	TX_Data[0] = Msg_Length;
     3ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
	CAN_Write(MCP_TXB0DLC, TX_Data);
     3f0:	66 e2       	ldi	r22, 0x26	; 38
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	85 e3       	ldi	r24, 0x35	; 53
     3f6:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     3fa:	cc 23       	and	r28, r28
     3fc:	91 f0       	breq	.+36     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3fe:	87 01       	movw	r16, r14
     400:	ec 0e       	add	r14, r28
     402:	f1 1c       	adc	r15, r1
     404:	c6 e3       	ldi	r28, 0x36	; 54
	{
		TX_Data[0] = Transmit_Data[i];
     406:	f8 01       	movw	r30, r16
     408:	81 91       	ld	r24, Z+
     40a:	8f 01       	movw	r16, r30
     40c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
     410:	66 e2       	ldi	r22, 0x26	; 38
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
     41a:	cf 5f       	subi	r28, 0xFF	; 255
	}
	// Set message length
	TX_Data[0] = Msg_Length;
	CAN_Write(MCP_TXB0DLC, TX_Data);
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     41c:	0e 15       	cp	r16, r14
     41e:	1f 05       	cpc	r17, r15
     420:	91 f7       	brne	.-28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		TX_Data[0] = Transmit_Data[i];
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
     428:	46 e2       	ldi	r20, 0x26	; 38
     42a:	51 e0       	ldi	r21, 0x01	; 1
     42c:	68 e0       	ldi	r22, 0x08	; 8
     42e:	80 e3       	ldi	r24, 0x30	; 48
     430:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(void)
{
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	16 e6       	ldi	r17, 0x66	; 102
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
     44c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <a_p_Recv_List>
     450:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <a_p_Recv_List+0x1>
     454:	6c 0f       	add	r22, r28
     456:	7d 1f       	adc	r23, r29
     458:	81 2f       	mov	r24, r17
     45a:	0e 94 06 01 	call	0x20c	; 0x20c <CAN_Read>
     45e:	22 96       	adiw	r28, 0x02	; 2
     460:	1f 5f       	subi	r17, 0xFF	; 255

****************************************************************************/

void CAN_Read_Message(void)
{
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
     462:	ca 30       	cpi	r28, 0x0A	; 10
     464:	d1 05       	cpc	r29, r1
     466:	91 f7       	brne	.-28     	; 0x44c <CAN_Read_Message+0xc>
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
	}
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <start_eeprom_write_byte>:
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);

        // Increment num bytes executed
        Num_Bytes_Executed++;
    }
}
     470:	9c 01       	movw	r18, r24
     472:	9f b7       	in	r25, 0x3f	; 63
     474:	f8 94       	cli
     476:	32 bd       	out	0x22, r19	; 34
     478:	21 bd       	out	0x21, r18	; 33
     47a:	fb 01       	movw	r30, r22
     47c:	80 81       	ld	r24, Z
     47e:	80 bd       	out	0x20, r24	; 32
     480:	1f ba       	out	0x1f, r1	; 31
     482:	fa 9a       	sbi	0x1f, 2	; 31
     484:	8f b3       	in	r24, 0x1f	; 31
     486:	8a 60       	ori	r24, 0x0A	; 10
     488:	8f bb       	out	0x1f, r24	; 31
     48a:	9f bf       	out	0x3f, r25	; 63
     48c:	08 95       	ret

0000048e <__vector_16>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(EE_RDY_vect)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	cf 93       	push	r28
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
    // Disable the ready interrupts
    EECR &= ~(1<<EERIE);
     4b2:	fb 98       	cbi	0x1f, 3	; 31

    // Check if we've written all the requested values
    if (Num_Bytes_Requested <= Num_Bytes_Executed)
     4b4:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <Num_Bytes_Executed>
     4b8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Num_Bytes_Requested>
     4bc:	c8 17       	cp	r28, r24
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <__vector_16+0x38>
    {
        // We are done writing all the bytes.
        IsBusy = false;
     4c0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <IsBusy>
     4c4:	13 c0       	rjmp	.+38     	; 0x4ec <__vector_16+0x5e>
    }
    else
    {
        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     4c6:	8c 2f       	mov	r24, r28
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <p_Caller_Values>
     4ce:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <p_Caller_Values+0x1>
     4d2:	68 0f       	add	r22, r24
     4d4:	79 1f       	adc	r23, r25
     4d6:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <p_Target_EEPROM_Address>
     4da:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <p_Target_EEPROM_Address+0x1>
     4de:	82 0f       	add	r24, r18
     4e0:	93 1f       	adc	r25, r19
     4e2:	0e 94 38 02 	call	0x470	; 0x470 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <Num_Bytes_Executed>
    }
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	cf 91       	pop	r28
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	8b 01       	movw	r16, r22
     516:	9c 01       	movw	r18, r24
    bool event_pending = false;

    // We must enter a critical section here, because it is possible that
    // while we are clearing the event, an interrupt may occur and post an 
    // event. In this situation, we would lose the new event that was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     518:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51a:	f8 94       	cli
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
     51c:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <Pending_Events>
     520:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <Pending_Events+0x1>
     524:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <Pending_Events+0x2>
     528:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <Pending_Events+0x3>
     52c:	d9 01       	movw	r26, r18
     52e:	c8 01       	movw	r24, r16
     530:	84 23       	and	r24, r20
     532:	95 23       	and	r25, r21
     534:	a6 23       	and	r26, r22
     536:	b7 23       	and	r27, r23
     538:	80 17       	cp	r24, r16
     53a:	91 07       	cpc	r25, r17
     53c:	a2 07       	cpc	r26, r18
     53e:	b3 07       	cpc	r27, r19
     540:	91 f4       	brne	.+36     	; 0x566 <process_event_if_pending+0x56>
        {
            // Set flag
            event_pending = true;

            // Clear the event
            Pending_Events &= ~event_mask;
     542:	80 95       	com	r24
     544:	90 95       	com	r25
     546:	a0 95       	com	r26
     548:	b0 95       	com	r27
     54a:	84 23       	and	r24, r20
     54c:	95 23       	and	r25, r21
     54e:	a6 23       	and	r26, r22
     550:	b7 23       	and	r27, r23
     552:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Pending_Events>
     556:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Pending_Events+0x1>
     55a:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <Pending_Events+0x2>
     55e:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <Pending_Events+0x3>
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
        {
            // Set flag
            event_pending = true;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	01 c0       	rjmp	.+2      	; 0x568 <process_event_if_pending+0x58>

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
    // Initialize event pending flag to false
    bool event_pending = false;
     566:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     568:	ef bf       	out	0x3f, r30	; 63
            Pending_Events &= ~event_mask;
        }           
    }

    // If the event is pending, run all services to process the event.
    if (event_pending) Run_Services(event_mask);
     56a:	88 23       	and	r24, r24
     56c:	21 f0       	breq	.+8      	; 0x576 <process_event_if_pending+0x66>
     56e:	c9 01       	movw	r24, r18
     570:	b8 01       	movw	r22, r16
     572:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Run_Services>
}
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
    // We must enter a critical section here, because it is possible that
    // while we are modifying the pending events, an interrupt may occur and 
    // post an event. In this situation, we would lose the new event that 
    // was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     584:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     586:	f8 94       	cli
    {
        // Set flag in event list
        Pending_Events |= event_mask;
     588:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <Pending_Events>
     58c:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <Pending_Events+0x1>
     590:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <Pending_Events+0x2>
     594:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <Pending_Events+0x3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	8c 29       	or	r24, r12
     59e:	9d 29       	or	r25, r13
     5a0:	ae 29       	or	r26, r14
     5a2:	bf 29       	or	r27, r15
     5a4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Pending_Events>
     5a8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Pending_Events+0x1>
     5ac:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <Pending_Events+0x2>
     5b0:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <Pending_Events+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5b4:	2f bf       	out	0x3f, r18	; 63
    }
}
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	08 95       	ret

000005c0 <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
     5e4:	68 e0       	ldi	r22, 0x08	; 8
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
     5f0:	60 e1       	ldi	r22, 0x10	; 16
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
     5fc:	60 e2       	ldi	r22, 0x20	; 32
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
     608:	60 e4       	ldi	r22, 0x40	; 64
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
     614:	60 e8       	ldi	r22, 0x80	; 128
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	72 e0       	ldi	r23, 0x02	; 2
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	74 e0       	ldi	r23, 0x04	; 4
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	78 e0       	ldi	r23, 0x08	; 8
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e1       	ldi	r23, 0x10	; 16
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e2       	ldi	r23, 0x20	; 32
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e4       	ldi	r23, 0x40	; 64
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (16 <= NUM_EVENTS)
        process_event_if_pending(EVENT_16);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e8       	ldi	r23, 0x80	; 128
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (17 <= NUM_EVENTS)
        process_event_if_pending(EVENT_17);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (18 <= NUM_EVENTS)
        process_event_if_pending(EVENT_18);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (19 <= NUM_EVENTS)
        process_event_if_pending(EVENT_19);
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
     6a4:	8d cf       	rjmp	.-230    	; 0x5c0 <Run_Events>

000006a6 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
     6a6:	0e 94 98 06 	call	0xd30	; 0xd30 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
     6aa:	0e 94 45 06 	call	0xc8a	; 0xc8a <Init_SPI_Service>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
     6ae:	0e 94 01 0a 	call	0x1402	; 0x1402 <Init_UART_Service>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
     6b2:	0e 94 75 03 	call	0x6ea	; 0x6ea <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
     6b6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
     6ba:	0e 94 13 04 	call	0x826	; 0x826 <Init_Modem_Service>
     6be:	08 95       	ret

000006c0 <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
     6cc:	0e 94 32 04 	call	0x864	; 0x864 <Run_Modem_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 04 0a 	call	0x1408	; 0x1408 <Run_UART_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 4a 06 	call	0xc94	; 0xc94 <Run_SPI_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
     6ea:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
     6ec:	e9 e6       	ldi	r30, 0x69	; 105
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	8e 7f       	andi	r24, 0xFE	; 254
     6f4:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
     6f6:	80 81       	ld	r24, Z
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
     6fc:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
     6fe:	e0 9a       	sbi	0x1c, 0	; 28
     700:	08 95       	ret

00000702 <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
     702:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <counter>
     706:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <counter+0x1>
     70a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <counter+0x2>
     70e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <counter+0x3>
}
     712:	08 95       	ret

00000714 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
	counter++;
     740:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <counter>
     744:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <counter+0x1>
     748:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <counter+0x2>
     74c:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <counter+0x3>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	a1 1d       	adc	r26, r1
     754:	b1 1d       	adc	r27, r1
     756:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <counter>
     75a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <counter+0x1>
     75e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <counter+0x2>
     762:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <counter+0x3>
    // RX_Data[0] = &interrupt_read;
	// Post_Event(EVT_MASTER_NEW_CAN_MSG);
    // CAN_Read(MCP_CANINTF, RX_Data);
    // Fill in message only if the interrupt is a receive interrupt
    // if (interrupt_read & (1<<MCP_STAT_RX0IF)) 
    CAN_Read_Message();
     766:	0e 94 20 02 	call	0x440	; 0x440 <CAN_Read_Message>
    // CAN_Read(MCP_EFLG, RX_Data);
    uint8_t TX_Data[1] = {0};
     76a:	19 82       	std	Y+1, r1	; 0x01
    CAN_Bit_Modify(MCP_EFLG, (1<<6), TX_Data);
     76c:	ae 01       	movw	r20, r28
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	60 e4       	ldi	r22, 0x40	; 64
     774:	8d e2       	ldi	r24, 0x2D	; 45
     776:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
    //CAN_Read(MCP_EFLG_TXEP, RX_Data);
    //CAN_Read(MCP_EFLG_RXEP, RX_Data);
    CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
     77a:	ae 01       	movw	r20, r28
     77c:	4f 5f       	subi	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	6f ef       	ldi	r22, 0xFF	; 255
     782:	8c e2       	ldi	r24, 0x2C	; 44
     784:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
     7b0:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Parity>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	89 27       	eor	r24, r25
     7b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
     7bc:	81 11       	cpse	r24, r1
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
     7c0:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
     7c2:	42 e0       	ldi	r20, 0x02	; 2
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	87 e3       	ldi	r24, 0x37	; 55
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
     7d2:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
     7d4:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     7d6:	43 e2       	ldi	r20, 0x23	; 35
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	87 e3       	ldi	r24, 0x37	; 55
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
     7e6:	08 95       	ret

000007e8 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
     7e8:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
     7ea:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
     7ec:	68 ed       	ldi	r22, 0xD8	; 216
     7ee:	73 e0       	ldi	r23, 0x03	; 3
     7f0:	87 e3       	ldi	r24, 0x37	; 55
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 be 06 	call	0xd7c	; 0xd7c <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     7f8:	43 e2       	ldi	r20, 0x23	; 35
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	87 e3       	ldi	r24, 0x37	; 55
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
     808:	08 95       	ret

0000080a <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
     80a:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
     80c:	e1 e6       	ldi	r30, 0x61	; 97
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 e8       	ldi	r24, 0x80	; 128
     812:	80 83       	st	Z, r24
    CLKPR = 0;
     814:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
     816:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
     81a:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
     81c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	08 95       	ret

00000826 <Init_Modem_Service>:

****************************************************************************/
void Init_Modem_Service(void)
{
   // Initialize UART
	UART_Initialize(Modem_Recv_Data);
     826:	8b e3       	ldi	r24, 0x3B	; 59
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <UART_Initialize>
	Register_Timer(&Testing_Timer, Post_Event);
     82e:	6e eb       	ldi	r22, 0xBE	; 190
     830:	72 e0       	ldi	r23, 0x02	; 2
     832:	8c e0       	ldi	r24, 0x0C	; 12
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 be 06 	call	0xd7c	; 0xd7c <Register_Timer>
	
    PORTB &= ~(1<<PINB2);
     83a:	2a 98       	cbi	0x05, 2	; 5
    DDRB |= (1<<PINB2);
     83c:	22 9a       	sbi	0x04, 2	; 4
	
	// Register CAN Init 1 timer with Post_Event()
	Register_Timer(&CAN_Timer, Post_Event);
     83e:	6e eb       	ldi	r22, 0xBE	; 190
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	8a e1       	ldi	r24, 0x1A	; 26
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 be 06 	call	0xd7c	; 0xd7c <Register_Timer>

	// Kick off CAN Init 1 Timer
	Start_Timer(&CAN_Timer, CAN_INIT_1_MS);
     84a:	48 ec       	ldi	r20, 0xC8	; 200
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	8a e1       	ldi	r24, 0x1A	; 26
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>

	// Call 1st step of the CAN initialization
	// This will only start once we exit initialization context
	CAN_Initialize_1(a_p_CAN_Volatile_Msg);
     85a:	80 e1       	ldi	r24, 0x10	; 16
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <CAN_Initialize_1>
     862:	08 95       	ret

00000864 <Run_Modem_Service>:
    Description
        Processes events for the master node

****************************************************************************/
void Run_Modem_Service(uint32_t event_mask)
{
     864:	0f 93       	push	r16
    switch(event_mask)
     866:	61 15       	cp	r22, r1
     868:	20 e8       	ldi	r18, 0x80	; 128
     86a:	72 07       	cpc	r23, r18
     86c:	81 05       	cpc	r24, r1
     86e:	91 05       	cpc	r25, r1
     870:	d9 f1       	breq	.+118    	; 0x8e8 <Run_Modem_Service+0x84>
     872:	61 15       	cp	r22, r1
     874:	71 05       	cpc	r23, r1
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	82 07       	cpc	r24, r18
     87a:	91 05       	cpc	r25, r1
     87c:	31 f0       	breq	.+12     	; 0x88a <Run_Modem_Service+0x26>
     87e:	60 34       	cpi	r22, 0x40	; 64
     880:	71 05       	cpc	r23, r1
     882:	81 05       	cpc	r24, r1
     884:	91 05       	cpc	r25, r1
     886:	b1 f5       	brne	.+108    	; 0x8f4 <Run_Modem_Service+0x90>
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <Run_Modem_Service+0x3c>

		 case EVT_CAN_INIT_1_COMPLETE:
		        // The time for CAN 1 has expired

		        // Call step two of the CAN init
		        CAN_Initialize_2();
     88a:	0e 94 a0 01 	call	0x340	; 0x340 <CAN_Initialize_2>
				
				// Start Testing Timer now once we've begun the CAN 2 Init Process
				Start_Timer(&Testing_Timer, 200);
     88e:	48 ec       	ldi	r20, 0xC8	; 200
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	8c e0       	ldi	r24, 0x0C	; 12
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
		        
		        break;
     89e:	2a c0       	rjmp	.+84     	; 0x8f4 <Run_Modem_Service+0x90>
				
        case EVT_TEST_TIMEOUT:
			if (do_init_modem)
     8a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <do_init_modem>
     8a4:	88 23       	and	r24, r24
     8a6:	59 f0       	breq	.+22     	; 0x8be <Run_Modem_Service+0x5a>
			{
				Write_UART(3, 0, &TX_Data[0], &RX_Data[0], true);
     8a8:	01 e0       	ldi	r16, 0x01	; 1
     8aa:	2a e0       	ldi	r18, 0x0A	; 10
     8ac:	31 e0       	ldi	r19, 0x01	; 1
     8ae:	48 e0       	ldi	r20, 0x08	; 8
     8b0:	51 e0       	ldi	r21, 0x01	; 1
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	0e 94 4d 08 	call	0x109a	; 0x109a <Write_UART>
				do_init_modem = false;
     8ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <do_init_modem>
			{
				//Write_UART(2, 0, &TX_Data[0], &RX_Data[0], false);
				//CAN_Send_Message(5, TX_Away);
			}
			
			if (flipper)
     8be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flipper>
     8c2:	88 23       	and	r24, r24
     8c4:	21 f0       	breq	.+8      	; 0x8ce <Run_Modem_Service+0x6a>
			{
				PORTB |= (1<<PINB2);
     8c6:	2a 9a       	sbi	0x05, 2	; 5
				flipper = false;
     8c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flipper>
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <Run_Modem_Service+0x72>
			}
			else
			{
				PORTB &= ~(1<<PINB2);
     8ce:	2a 98       	cbi	0x05, 2	; 5
				flipper = true;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flipper>
			}
				
			Start_Timer(&Testing_Timer, 250);
     8d6:	4a ef       	ldi	r20, 0xFA	; 250
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	8c e0       	ldi	r24, 0x0C	; 12
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Start_Timer>
			break;
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <Run_Modem_Service+0x90>
		
		case EVT_MODEM_NEW_PACKAGE:
		
			//Modem_Recv_Data =  //{CAN_MODEM_POS_TYPE, 0x00, 0x00, 0x00, 0x00};
			//write_rect_vect(&TX_Away[CAN_MODEM_POS_VECT_IDX], test_positions[test_counter]);
			CAN_Send_Message(MAX_MODEM_RECEIVE, Modem_Recv_Data);
     8e8:	6b e3       	ldi	r22, 0x3B	; 59
     8ea:	71 e0       	ldi	r23, 0x01	; 1
     8ec:	85 e0       	ldi	r24, 0x05	; 5
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 ed 01 	call	0x3da	; 0x3da <CAN_Send_Message>
			break;
		
        default:
            break;
    }
}
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <SPI_Initialize>:
        Initializes the SPI module as a master/slave and sets SPI TX/RX buffer
        address

****************************************************************************/
void SPI_Initialize(void)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
    // Identify node type
    Master_Slave_Identifier = SPI_MASTER;
     8fc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Master_Slave_Identifier>
    
    if (SPI_MASTER == Master_Slave_Identifier)
    {
        // SPI Data Direction Register (DDR_SPI) = DDRA
        // Set MOSI, SS and SCK output, all others input
        DDR_SPI |= (1<<MOSI)|(1<<SCK)|(1<<SS);
     900:	81 b1       	in	r24, 0x01	; 1
     902:	80 67       	ori	r24, 0x70	; 112
     904:	81 b9       	out	0x01, r24	; 1
		//DDR_SPI &= ~(1<<SS);

        // Enable interrupt on transmission complete, enable SPI and set as master,
        // set clock rate io_clk/4, MSB transmitted first, Sample on rising edge 
        SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR);
     906:	80 ed       	ldi	r24, 0xD0	; 208
     908:	8c bd       	out	0x2c, r24	; 44

        // Raise SS from master at Init
        PORTA |= (1<<SS);
     90a:	16 9a       	sbi	0x02, 6	; 2

        // Reset indices
        Buffer_Index = 0;
     90c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <Buffer_Index>
        TX_Index = 0;
     910:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TX_Index>
		RX_Index = 0;
     914:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <RX_Index>
     918:	ea e6       	ldi	r30, 0x6A	; 106
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	a1 e5       	ldi	r26, 0x51	; 81
     91e:	b1 e0       	ldi	r27, 0x01	; 1
     920:	25 e6       	ldi	r18, 0x65	; 101
     922:	31 e0       	ldi	r19, 0x01	; 1
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	ef 01       	movw	r28, r30
     928:	25 97       	sbiw	r28, 0x05	; 5
     92a:	88 83       	st	Y, r24
     92c:	21 96       	adiw	r28, 0x01	; 1
     92e:	88 83       	st	Y, r24
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	88 83       	st	Y, r24
     934:	21 96       	adiw	r28, 0x01	; 1
     936:	88 83       	st	Y, r24
     938:	21 96       	adiw	r28, 0x01	; 1
     93a:	88 83       	st	Y, r24
     93c:	80 83       	st	Z, r24
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     93e:	1d 92       	st	X+, r1
     940:	1d 92       	st	X+, r1
     942:	36 96       	adiw	r30, 0x06	; 6

****************************************************************************/

static void Reset_Command_Receive_Buffer(void)
{
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
     944:	a2 17       	cp	r26, r18
     946:	b3 07       	cpc	r27, r19
     948:	71 f7       	brne	.-36     	; 0x926 <SPI_Initialize+0x2e>
        TX_Index = 0;
        RX_Index = 0;

        Reset_Command_Receive_Buffer();
    }
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <SPI_Start_Command>:

****************************************************************************/

void SPI_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][TX_LENGTH_BYTE];
     950:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Buffer_Index>
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	fc 01       	movw	r30, r24
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	df 01       	movw	r26, r30
     95e:	a8 0f       	add	r26, r24
     960:	b9 1f       	adc	r27, r25
     962:	aa 0f       	add	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	ab 59       	subi	r26, 0x9B	; 155
     968:	be 4f       	sbci	r27, 0xFE	; 254
     96a:	2c 91       	ld	r18, X
     96c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][RX_LENGTH_BYTE];
     970:	fd 01       	movw	r30, r26
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Expected_RX_Length>

    // If somehow the expected lengths are invalid, set them to 
    // reasonable values
    if (Expected_TX_Length == 0xff) Expected_TX_Length = 1;
     978:	2f 3f       	cpi	r18, 0xFF	; 255
     97a:	19 f4       	brne	.+6      	; 0x982 <SPI_Start_Command+0x32>
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <Expected_TX_Length>
    if (Expected_RX_Length == 0xff) Expected_RX_Length = 0;
     982:	8f 3f       	cpi	r24, 0xFF	; 255
     984:	11 f4       	brne	.+4      	; 0x98a <SPI_Start_Command+0x3a>
     986:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
     98a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
     98e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TX_Index>
	
	// State in TX
	In_Tx = true;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <In_Tx>

    //Debug line
    if (Expected_TX_Length == 0xff)
     998:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Expected_TX_Length>
     99c:	8f 3f       	cpi	r24, 0xFF	; 255
     99e:	99 f4       	brne	.+38     	; 0x9c6 <SPI_Start_Command+0x76>
    {
        counter_value++;
     9a0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counter_value>
     9a4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <counter_value+0x1>
     9a8:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <counter_value+0x2>
     9ac:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <counter_value+0x3>
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	a1 1d       	adc	r26, r1
     9b4:	b1 1d       	adc	r27, r1
     9b6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counter_value>
     9ba:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <counter_value+0x1>
     9be:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <counter_value+0x2>
     9c2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <counter_value+0x3>
    }

    // Set slave select low to indicate start of transmission
    PORTA &= ~(1<<SS);
     9c6:	16 98       	cbi	0x02, 6	; 2
     9c8:	08 95       	ret

000009ca <SPI_End_Command>:
****************************************************************************/

void SPI_End_Command (void)
{
    // Set slave select high to indicate end of transmission
    PORTA |= (1<<SS);
     9ca:	16 9a       	sbi	0x02, 6	; 2
     9cc:	08 95       	ret

000009ce <SPI_Transmit>:
****************************************************************************/

void SPI_Transmit (void)
{
    // Send byte out
    SPDR = Command_Buffer[Buffer_Index][TX_Index + LENGTH_BYTES];
     9ce:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Buffer_Index>
     9d2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <TX_Index>
     9d6:	82 2f       	mov	r24, r18
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	82 0f       	add	r24, r18
     9dc:	91 1d       	adc	r25, r1
     9de:	82 0f       	add	r24, r18
     9e0:	91 1d       	adc	r25, r1
     9e2:	fc 01       	movw	r30, r24
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	eb 59       	subi	r30, 0x9B	; 155
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	e3 0f       	add	r30, r19
     9ee:	f1 1d       	adc	r31, r1
     9f0:	82 81       	ldd	r24, Z+2	; 0x02
     9f2:	8e bd       	out	0x2e, r24	; 46
	
	if (In_Tx)
     9f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <In_Tx>
     9f8:	88 23       	and	r24, r24
     9fa:	31 f0       	breq	.+12     	; 0xa08 <SPI_Transmit+0x3a>
	{
		// Increment Transmit Index
		TX_Index++;		
     9fc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TX_Index>
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <TX_Index>
     a06:	08 95       	ret
		/*
		// Increment Receive Index
		RX_Index++;
		*/
		// Increment Transmit Index
		TX_Index++;
     a08:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TX_Index>
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <TX_Index>
     a12:	08 95       	ret

00000a14 <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	d8 2e       	mov	r13, r24
     a2a:	c6 2e       	mov	r12, r22
     a2c:	ea 01       	movw	r28, r20
     a2e:	79 01       	movw	r14, r18
	counter_value = query_counter();
     a30:	0e 94 81 03 	call	0x702	; 0x702 <query_counter>
     a34:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <counter_value>
     a38:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <counter_value+0x1>
     a3c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <counter_value+0x2>
     a40:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     a44:	8d 2d       	mov	r24, r13
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	8c 01       	movw	r16, r24
     a4a:	0e 5f       	subi	r16, 0xFE	; 254
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     a4e:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <Next_Available_Row>
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	de 01       	movw	r26, r28
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	c9 01       	movw	r24, r18
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	82 0f       	add	r24, r18
     a60:	93 1f       	adc	r25, r19
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	e0 e0       	ldi	r30, 0x00	; 0
     a68:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     a6a:	9c 01       	movw	r18, r24
     a6c:	2b 59       	subi	r18, 0x9B	; 155
     a6e:	3e 4f       	sbci	r19, 0xFE	; 254
     a70:	59 01       	movw	r10, r18
     a72:	2f 5f       	subi	r18, 0xFF	; 255
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
     a76:	30 97       	sbiw	r30, 0x00	; 0
     a78:	19 f4       	brne	.+6      	; 0xa80 <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     a7a:	e5 01       	movw	r28, r10
     a7c:	d8 82       	st	Y, r13
     a7e:	0e c0       	rjmp	.+28     	; 0xa9c <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
     a80:	e1 30       	cpi	r30, 0x01	; 1
     a82:	f1 05       	cpc	r31, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     a86:	e9 01       	movw	r28, r18
     a88:	c8 82       	st	Y, r12
     a8a:	08 c0       	rjmp	.+16     	; 0xa9c <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
     a8c:	6c 91       	ld	r22, X
     a8e:	af 01       	movw	r20, r30
     a90:	48 0f       	add	r20, r24
     a92:	59 1f       	adc	r21, r25
     a94:	4b 59       	subi	r20, 0x9B	; 155
     a96:	5e 4f       	sbci	r21, 0xFE	; 254
     a98:	ea 01       	movw	r28, r20
     a9a:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     a9c:	31 96       	adiw	r30, 0x01	; 1
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	e0 17       	cp	r30, r16
     aa2:	f1 07       	cpc	r31, r17
     aa4:	44 f3       	brlt	.-48     	; 0xa76 <Write_SPI+0x62>
     aa6:	32 c0       	rjmp	.+100    	; 0xb0c <Write_SPI+0xf8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
     aa8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Next_Available_Row>
     aac:	89 30       	cpi	r24, 0x09	; 9
     aae:	19 f4       	brne	.+6      	; 0xab6 <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
     ab0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Next_Available_Row>
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
     abc:	0e 94 95 06 	call	0xd2a	; 0xd2a <Query_SPI_State>
     ac0:	81 11       	cpse	r24, r1
     ac2:	27 c0       	rjmp	.+78     	; 0xb12 <Write_SPI+0xfe>
     ac4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Buffer_Index>
     ac8:	82 2f       	mov	r24, r18
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 0f       	add	r24, r18
     ace:	91 1d       	adc	r25, r1
     ad0:	82 0f       	add	r24, r18
     ad2:	91 1d       	adc	r25, r1
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	fc 01       	movw	r30, r24
     ada:	eb 59       	subi	r30, 0x9B	; 155
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	80 81       	ld	r24, Z
     ae0:	8f 3f       	cpi	r24, 0xFF	; 255
     ae2:	b9 f0       	breq	.+46     	; 0xb12 <Write_SPI+0xfe>
    {
        Post_Event(EVT_SPI_START);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	78 e0       	ldi	r23, 0x08	; 8
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     af0:	10 c0       	rjmp	.+32     	; 0xb12 <Write_SPI+0xfe>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
     af2:	f7 01       	movw	r30, r14
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Next_Available_Row>
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ef 5a       	subi	r30, 0xAF	; 175
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	80 83       	st	Z, r24
     b0a:	ce cf       	rjmp	.-100    	; 0xaa8 <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
     b0c:	c1 10       	cpse	r12, r1
     b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <Write_SPI+0xde>
     b10:	cb cf       	rjmp	.-106    	; 0xaa8 <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
    {
        Post_Event(EVT_SPI_START);
    }
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	08 95       	ret

00000b28 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
     b4a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <Master_Slave_Identifier>
     b4e:	81 11       	cpse	r24, r1
     b50:	8b c0       	rjmp	.+278    	; 0xc68 <__vector_14+0x140>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
     b52:	8d b5       	in	r24, 0x2d	; 45
        // Do nothing if statement to "use" the variable
        if (SPSR_Status);
		
		// Once a transmit has been completed
		if (In_Tx)
     b54:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <In_Tx>
     b58:	88 23       	and	r24, r24
     b5a:	e1 f0       	breq	.+56     	; 0xb94 <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
     b5c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <TX_Index>
     b60:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Expected_TX_Length>
     b64:	89 17       	cp	r24, r25
     b66:	a0 f0       	brcs	.+40     	; 0xb90 <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
     b68:	98 13       	cpse	r25, r24
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <__vector_14+0x52>
     b6c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Expected_RX_Length>
     b70:	81 11       	cpse	r24, r1
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <__vector_14+0x52>
				{
					In_Tx = false;									
     b74:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <In_Tx>
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e1       	ldi	r23, 0x10	; 16
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
     b86:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <In_Tx>
     b8a:	81 11       	cpse	r24, r1
     b8c:	6d c0       	rjmp	.+218    	; 0xc68 <__vector_14+0x140>
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
     b90:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
     b94:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <Expected_RX_Length>
     b98:	99 23       	and	r25, r25
     b9a:	09 f1       	breq	.+66     	; 0xbde <__vector_14+0xb6>
			{
                if (Receive_List[Buffer_Index][RX_Index] == NULL)
     b9c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <RX_Index>
     ba0:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Buffer_Index>
     ba4:	e8 2f       	mov	r30, r24
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e2 0f       	add	r30, r18
     baa:	f1 1d       	adc	r31, r1
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ef 5a       	subi	r30, 0xAF	; 175
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	01 90       	ld	r0, Z+
     bb6:	f0 81       	ld	r31, Z
     bb8:	e0 2d       	mov	r30, r0
     bba:	30 97       	sbiw	r30, 0x00	; 0
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <__vector_14+0x9a>
                {
                    if (SPDR);
     bbe:	2e b5       	in	r18, 0x2e	; 46
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__vector_14+0x9e>
                }
                else
                {
                    *(Receive_List[Buffer_Index][RX_Index]) = SPDR;
     bc2:	2e b5       	in	r18, 0x2e	; 46
     bc4:	20 83       	st	Z, r18
                }
				RX_Index++;				
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
     bcc:	89 17       	cp	r24, r25
     bce:	38 f4       	brcc	.+14     	; 0xbde <__vector_14+0xb6>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e2       	ldi	r23, 0x20	; 32
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     bdc:	45 c0       	rjmp	.+138    	; 0xc68 <__vector_14+0x140>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
     bde:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <Buffer_Index>
     be2:	83 2f       	mov	r24, r19
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	ac 01       	movw	r20, r24
     be8:	44 0f       	add	r20, r20
     bea:	55 1f       	adc	r21, r21
     bec:	fa 01       	movw	r30, r20
     bee:	e8 0f       	add	r30, r24
     bf0:	f9 1f       	adc	r31, r25
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	eb 59       	subi	r30, 0x9B	; 155
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	20 83       	st	Z, r18
     bfe:	21 83       	std	Z+1, r18	; 0x01
     c00:	22 83       	std	Z+2, r18	; 0x02
     c02:	23 83       	std	Z+3, r18	; 0x03
     c04:	24 83       	std	Z+4, r18	; 0x04
     c06:	fa 01       	movw	r30, r20
     c08:	e8 0f       	add	r30, r24
     c0a:	f9 1f       	adc	r31, r25
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	eb 59       	subi	r30, 0x9B	; 155
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
     c16:	fa 01       	movw	r30, r20
     c18:	ef 5a       	subi	r30, 0xAF	; 175
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	11 82       	std	Z+1, r1	; 0x01
     c1e:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
     c20:	39 30       	cpi	r19, 0x09	; 9
     c22:	19 f4       	brne	.+6      	; 0xc2a <__vector_14+0x102>
    {
        Buffer_Index = 0;
     c24:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <Buffer_Index>
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <__vector_14+0x108>
    }
    else
    {
        Buffer_Index++;
     c2a:	3f 5f       	subi	r19, 0xFF	; 255
     c2c:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
     c30:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Buffer_Index>
     c34:	82 2f       	mov	r24, r18
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	82 0f       	add	r24, r18
     c3a:	91 1d       	adc	r25, r1
     c3c:	82 0f       	add	r24, r18
     c3e:	91 1d       	adc	r25, r1
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	fc 01       	movw	r30, r24
     c46:	eb 59       	subi	r30, 0x9B	; 155
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 3f       	cpi	r24, 0xFF	; 255
     c4e:	31 f0       	breq	.+12     	; 0xc5c <__vector_14+0x134>
    {
        Post_Event(EVT_SPI_START);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	78 e0       	ldi	r23, 0x08	; 8
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e4       	ldi	r23, 0x40	; 64
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	bf 91       	pop	r27
     c6e:	af 91       	pop	r26
     c70:	9f 91       	pop	r25
     c72:	8f 91       	pop	r24
     c74:	7f 91       	pop	r23
     c76:	6f 91       	pop	r22
     c78:	5f 91       	pop	r21
     c7a:	4f 91       	pop	r20
     c7c:	3f 91       	pop	r19
     c7e:	2f 91       	pop	r18
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <Init_SPI_Service>:

****************************************************************************/
void Init_SPI_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_STATE;
     c8a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Current_State>

    // Initialize SPI
    SPI_Initialize();
     c8e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <SPI_Initialize>
     c92:	08 95       	ret

00000c94 <Run_SPI_Service>:
        Processes events for SPI Message transmit/receive

****************************************************************************/
void Run_SPI_Service(uint32_t event_mask)
{
	switch(Current_State)
     c94:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <Current_State>
     c98:	21 30       	cpi	r18, 0x01	; 1
     c9a:	a9 f0       	breq	.+42     	; 0xcc6 <Run_SPI_Service+0x32>
     c9c:	18 f0       	brcs	.+6      	; 0xca4 <Run_SPI_Service+0x10>
     c9e:	22 30       	cpi	r18, 0x02	; 2
     ca0:	89 f1       	breq	.+98     	; 0xd04 <Run_SPI_Service+0x70>
     ca2:	08 95       	ret
    {	
		case NORMAL_STATE:
			if (EVT_SPI_START == event_mask)
     ca4:	61 15       	cp	r22, r1
     ca6:	78 40       	sbci	r23, 0x08	; 8
     ca8:	81 05       	cpc	r24, r1
     caa:	91 05       	cpc	r25, r1
     cac:	e9 f5       	brne	.+122    	; 0xd28 <Run_SPI_Service+0x94>
			{			
                // Initialize SPI for particular command
                SPI_Start_Command();
     cae:	0e 94 a8 04 	call	0x950	; 0x950 <SPI_Start_Command>
				// Switch to sending state
				Current_State = SENDING_STATE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_SPI_SEND_BYTE);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e1       	ldi	r23, 0x10	; 16
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     cc4:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_SPI_SEND_BYTE == event_mask)
     cc6:	61 15       	cp	r22, r1
     cc8:	20 e1       	ldi	r18, 0x10	; 16
     cca:	72 07       	cpc	r23, r18
     ccc:	81 05       	cpc	r24, r1
     cce:	91 05       	cpc	r25, r1
     cd0:	19 f4       	brne	.+6      	; 0xcd8 <Run_SPI_Service+0x44>
			{
    			SPI_Transmit();
     cd2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPI_Transmit>
     cd6:	08 95       	ret
			}
			else if (EVT_SPI_RECV_BYTE == event_mask)
     cd8:	61 15       	cp	r22, r1
     cda:	20 e2       	ldi	r18, 0x20	; 32
     cdc:	72 07       	cpc	r23, r18
     cde:	81 05       	cpc	r24, r1
     ce0:	91 05       	cpc	r25, r1
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <Run_SPI_Service+0x5c>
			{
                SPI_Transmit();
     ce4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPI_Transmit>
				Current_State = RECEIVING_STATE;				
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Current_State>
     cee:	08 95       	ret
			}
			else if (EVT_SPI_END == event_mask)
     cf0:	61 15       	cp	r22, r1
     cf2:	70 44       	sbci	r23, 0x40	; 64
     cf4:	81 05       	cpc	r24, r1
     cf6:	91 05       	cpc	r25, r1
     cf8:	b9 f4       	brne	.+46     	; 0xd28 <Run_SPI_Service+0x94>
			{
                SPI_End_Command();
     cfa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_End_Command>
				Current_State = NORMAL_STATE;
     cfe:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Current_State>
     d02:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_SPI_RECV_BYTE == event_mask)
     d04:	61 15       	cp	r22, r1
     d06:	20 e2       	ldi	r18, 0x20	; 32
     d08:	72 07       	cpc	r23, r18
     d0a:	81 05       	cpc	r24, r1
     d0c:	91 05       	cpc	r25, r1
     d0e:	19 f4       	brne	.+6      	; 0xd16 <Run_SPI_Service+0x82>
            {
                SPI_Transmit();
     d10:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPI_Transmit>
     d14:	08 95       	ret
            }
            if (EVT_SPI_END == event_mask)
     d16:	61 15       	cp	r22, r1
     d18:	70 44       	sbci	r23, 0x40	; 64
     d1a:	81 05       	cpc	r24, r1
     d1c:	91 05       	cpc	r25, r1
     d1e:	21 f4       	brne	.+8      	; 0xd28 <Run_SPI_Service+0x94>
            {
                SPI_End_Command();
     d20:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_End_Command>
                Current_State = NORMAL_STATE;
     d24:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Current_State>
     d28:	08 95       	ret

00000d2a <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
     d2a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Current_State>
     d2e:	08 95       	ret

00000d30 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
     d30:	e3 ea       	ldi	r30, 0xA3	; 163
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	a7 ea       	ldi	r26, 0xA7	; 167
     d36:	b1 e0       	ldi	r27, 0x01	; 1
     d38:	84 ee       	ldi	r24, 0xE4	; 228
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	11 82       	std	Z+1, r1	; 0x01
     d3e:	10 82       	st	Z, r1
     d40:	13 82       	std	Z+3, r1	; 0x03
     d42:	12 82       	std	Z+2, r1	; 0x02
     d44:	1c 92       	st	X, r1
     d46:	15 82       	std	Z+5, r1	; 0x05
     d48:	16 82       	std	Z+6, r1	; 0x06
     d4a:	17 82       	std	Z+7, r1	; 0x07
     d4c:	10 86       	std	Z+8, r1	; 0x08
     d4e:	11 86       	std	Z+9, r1	; 0x09
     d50:	12 86       	std	Z+10, r1	; 0x0a
     d52:	13 86       	std	Z+11, r1	; 0x0b
     d54:	14 86       	std	Z+12, r1	; 0x0c
     d56:	3d 96       	adiw	r30, 0x0d	; 13
     d58:	1d 96       	adiw	r26, 0x0d	; 13
     d5a:	e8 17       	cp	r30, r24
     d5c:	f9 07       	cpc	r31, r25
     d5e:	71 f7       	brne	.-36     	; 0xd3c <Init_Timer_Module+0xc>
     d60:	15 bc       	out	0x25, r1	; 37
     d62:	16 bc       	out	0x26, r1	; 38
     d64:	18 bc       	out	0x28, r1	; 40
     d66:	88 b5       	in	r24, 0x28	; 40
     d68:	83 58       	subi	r24, 0x83	; 131
     d6a:	88 bd       	out	0x28, r24	; 40
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d72:	16 bc       	out	0x26, r1	; 38
     d74:	86 b5       	in	r24, 0x26	; 38
     d76:	83 60       	ori	r24, 0x03	; 3
     d78:	86 bd       	out	0x26, r24	; 38
     d7a:	08 95       	ret

00000d7c <Register_Timer>:
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	c0 91 a3 01 	lds	r28, 0x01A3	; 0x8001a3 <Timers>
     d84:	d0 91 a4 01 	lds	r29, 0x01A4	; 0x8001a4 <Timers+0x1>
     d88:	c8 17       	cp	r28, r24
     d8a:	d9 07       	cpc	r29, r25
     d8c:	09 f4       	brne	.+2      	; 0xd90 <Register_Timer+0x14>
     d8e:	43 c0       	rjmp	.+134    	; 0xe16 <Register_Timer+0x9a>
     d90:	a3 ea       	ldi	r26, 0xA3	; 163
     d92:	b1 e0       	ldi	r27, 0x01	; 1
     d94:	47 ed       	ldi	r20, 0xD7	; 215
     d96:	51 e0       	ldi	r21, 0x01	; 1
     d98:	fd 01       	movw	r30, r26
     d9a:	25 85       	ldd	r18, Z+13	; 0x0d
     d9c:	36 85       	ldd	r19, Z+14	; 0x0e
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	c9 f1       	breq	.+114    	; 0xe16 <Register_Timer+0x9a>
     da4:	3d 96       	adiw	r30, 0x0d	; 13
     da6:	e4 17       	cp	r30, r20
     da8:	f5 07       	cpc	r31, r21
     daa:	b9 f7       	brne	.-18     	; 0xd9a <Register_Timer+0x1e>
     dac:	2f c0       	rjmp	.+94     	; 0xe0c <Register_Timer+0x90>
     dae:	1d 96       	adiw	r26, 0x0d	; 13
     db0:	4d 91       	ld	r20, X+
     db2:	5c 91       	ld	r21, X
     db4:	1e 97       	sbiw	r26, 0x0e	; 14
     db6:	45 2b       	or	r20, r21
     db8:	11 f5       	brne	.+68     	; 0xdfe <Register_Timer+0x82>
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <Register_Timer+0x44>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4f b7       	in	r20, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	f9 01       	movw	r30, r18
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	2e 0f       	add	r18, r30
     dd8:	3f 1f       	adc	r19, r31
     dda:	f9 01       	movw	r30, r18
     ddc:	ed 55       	subi	r30, 0x5D	; 93
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
     de4:	73 83       	std	Z+3, r23	; 0x03
     de6:	62 83       	std	Z+2, r22	; 0x02
     de8:	14 82       	std	Z+4, r1	; 0x04
     dea:	15 82       	std	Z+5, r1	; 0x05
     dec:	16 82       	std	Z+6, r1	; 0x06
     dee:	17 82       	std	Z+7, r1	; 0x07
     df0:	10 86       	std	Z+8, r1	; 0x08
     df2:	11 86       	std	Z+9, r1	; 0x09
     df4:	12 86       	std	Z+10, r1	; 0x0a
     df6:	13 86       	std	Z+11, r1	; 0x0b
     df8:	14 86       	std	Z+12, r1	; 0x0c
     dfa:	4f bf       	out	0x3f, r20	; 63
     dfc:	0c c0       	rjmp	.+24     	; 0xe16 <Register_Timer+0x9a>
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	1d 96       	adiw	r26, 0x0d	; 13
     e04:	25 30       	cpi	r18, 0x05	; 5
     e06:	31 05       	cpc	r19, r1
     e08:	91 f6       	brne	.-92     	; 0xdae <Register_Timer+0x32>
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <Register_Timer+0x9a>
     e0c:	cd 2b       	or	r28, r29
     e0e:	b1 f2       	breq	.-84     	; 0xdbc <Register_Timer+0x40>
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	cc cf       	rjmp	.-104    	; 0xdae <Register_Timer+0x32>
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <Start_Timer>:
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <Timers>
     e28:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <Timers+0x1>
     e2c:	28 17       	cp	r18, r24
     e2e:	39 07       	cpc	r19, r25
     e30:	51 f0       	breq	.+20     	; 0xe46 <Start_Timer+0x2a>
     e32:	e3 ea       	ldi	r30, 0xA3	; 163
     e34:	f1 e0       	ldi	r31, 0x01	; 1
     e36:	21 e0       	ldi	r18, 0x01	; 1
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	a5 85       	ldd	r26, Z+13	; 0x0d
     e3c:	b6 85       	ldd	r27, Z+14	; 0x0e
     e3e:	a8 17       	cp	r26, r24
     e40:	b9 07       	cpc	r27, r25
     e42:	29 f5       	brne	.+74     	; 0xe8e <Start_Timer+0x72>
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <Start_Timer+0x2e>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8f b7       	in	r24, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	f9 01       	movw	r30, r18
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e2 0f       	add	r30, r18
     e56:	f3 1f       	adc	r31, r19
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	2e 0f       	add	r18, r30
     e62:	3f 1f       	adc	r19, r31
     e64:	f9 01       	movw	r30, r18
     e66:	ed 55       	subi	r30, 0x5D	; 93
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	94 83       	std	Z+4, r25	; 0x04
     e6e:	15 82       	std	Z+5, r1	; 0x05
     e70:	16 82       	std	Z+6, r1	; 0x06
     e72:	17 82       	std	Z+7, r1	; 0x07
     e74:	10 86       	std	Z+8, r1	; 0x08
     e76:	6a 01       	movw	r12, r20
     e78:	7b 01       	movw	r14, r22
     e7a:	cc 0c       	add	r12, r12
     e7c:	dd 1c       	adc	r13, r13
     e7e:	ee 1c       	adc	r14, r14
     e80:	ff 1c       	adc	r15, r15
     e82:	c1 86       	std	Z+9, r12	; 0x09
     e84:	d2 86       	std	Z+10, r13	; 0x0a
     e86:	e3 86       	std	Z+11, r14	; 0x0b
     e88:	f4 86       	std	Z+12, r15	; 0x0c
     e8a:	8f bf       	out	0x3f, r24	; 63
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <Start_Timer+0x7e>
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	3d 96       	adiw	r30, 0x0d	; 13
     e94:	25 30       	cpi	r18, 0x05	; 5
     e96:	31 05       	cpc	r19, r1
     e98:	81 f6       	brne	.-96     	; 0xe3a <Start_Timer+0x1e>
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
     ed2:	88 b5       	in	r24, 0x28	; 40
     ed4:	83 58       	subi	r24, 0x83	; 131
     ed6:	88 bd       	out	0x28, r24	; 40
     ed8:	07 ea       	ldi	r16, 0xA7	; 167
     eda:	11 e0       	ldi	r17, 0x01	; 1
     edc:	c3 ea       	ldi	r28, 0xA3	; 163
     ede:	d1 e0       	ldi	r29, 0x01	; 1
     ee0:	0f 2e       	mov	r0, r31
     ee2:	f4 ee       	ldi	r31, 0xE4	; 228
     ee4:	ef 2e       	mov	r14, r31
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	ff 2e       	mov	r15, r31
     eea:	f0 2d       	mov	r31, r0
     eec:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
     eee:	80 81       	ld	r24, Z
     ef0:	88 23       	and	r24, r24
     ef2:	81 f1       	breq	.+96     	; 0xf54 <__vector_10+0xb0>
     ef4:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	ab 85       	ldd	r26, Y+11	; 0x0b
     efc:	bc 85       	ldd	r27, Y+12	; 0x0c
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	a1 05       	cpc	r26, r1
     f02:	b1 05       	cpc	r27, r1
     f04:	b9 f0       	breq	.+46     	; 0xf34 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
     f06:	4d 81       	ldd	r20, Y+5	; 0x05
     f08:	5e 81       	ldd	r21, Y+6	; 0x06
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	4f 5f       	subi	r20, 0xFF	; 255
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	6f 4f       	sbci	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	4d 83       	std	Y+5, r20	; 0x05
     f18:	5e 83       	std	Y+6, r21	; 0x06
     f1a:	6f 83       	std	Y+7, r22	; 0x07
     f1c:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	a1 09       	sbc	r26, r1
     f22:	b1 09       	sbc	r27, r1
     f24:	89 87       	std	Y+9, r24	; 0x09
     f26:	9a 87       	std	Y+10, r25	; 0x0a
     f28:	ab 87       	std	Y+11, r26	; 0x0b
     f2a:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
     f2c:	89 2b       	or	r24, r25
     f2e:	8a 2b       	or	r24, r26
     f30:	8b 2b       	or	r24, r27
     f32:	81 f4       	brne	.+32     	; 0xf54 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
     f34:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
     f36:	d9 01       	movw	r26, r18
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	13 97       	sbiw	r26, 0x03	; 3
     f40:	30 97       	sbiw	r30, 0x00	; 0
     f42:	41 f0       	breq	.+16     	; 0xf54 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	dc 01       	movw	r26, r24
     f4a:	6d 91       	ld	r22, X+
     f4c:	7d 91       	ld	r23, X+
     f4e:	8d 91       	ld	r24, X+
     f50:	9c 91       	ld	r25, X
     f52:	09 95       	icall
     f54:	03 5f       	subi	r16, 0xF3	; 243
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
     f5a:	ce 15       	cp	r28, r14
     f5c:	df 05       	cpc	r29, r15
     f5e:	31 f6       	brne	.-116    	; 0xeec <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <UART_Initialize>:
	// Rx -> A0
	// Tx -> A1
	
	//DDRA &= ~(1<<PINA0);
	//PORTA &= ~(1<<PINA0);
	PORTB &= ~(1<<PINB1);
     f8e:	29 98       	cbi	0x05, 1	; 5
	DDRB |= (1<<PINB1);
     f90:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<PINB5);
     f92:	2d 98       	cbi	0x05, 5	; 5
	DDRB |= (1<<PINB5);
     f94:	25 9a       	sbi	0x04, 5	; 4
	
	// Reset UART
	LINCR |= (1<<LSWRES);
     f96:	e8 ec       	ldi	r30, 0xC8	; 200
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	20 81       	ld	r18, Z
     f9c:	20 68       	ori	r18, 0x80	; 128
     f9e:	20 83       	st	Z, r18
	
    // Set up LINCR with
	// - Command Mode = TxRx Enabled
	// - UART Enable
	// - Odd Parity	
	LINCR = (1<<LCMD0)|(1<<LCMD1)|(1<<LCMD2)|(1<<LENA)|(0<<LCONF0)|(0<<LCONF1);
     fa0:	2f e0       	ldi	r18, 0x0F	; 15
     fa2:	20 83       	st	Z, r18
	
	// Set up LINBTR
	LINBTR = (0<<LDISR);
     fa4:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	
	// 19200 baud
	LINBRRL = 12;//(1<<LDIV0);
     fa8:	2c e0       	ldi	r18, 0x0C	; 12
     faa:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
	LINBRRH = 0;
     fae:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    
	// LIN Interrupt Enable
	LINENIR = (1<<LENERR)|(1<<LENTXOK)|(1<<LENRXOK);
     fb2:	2b e0       	ldi	r18, 0x0B	; 11
     fb4:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	//LINENIR = (1<<LENTXOK)|(1<<LENRXOK);
	// Reset indices
    Buffer_Index = 0;
     fb8:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <Buffer_Index>
    TX_Index = 0;
     fbc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <TX_Index>
	RX_Index = 0;
     fc0:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <RX_Index>
	
	Modem_Recv_Data = pCanTXPacket;
     fc4:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <Modem_Recv_Data+0x1>
     fc8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <Modem_Recv_Data>
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     fcc:	ea ef       	ldi	r30, 0xFA	; 250
     fce:	f1 e0       	ldi	r31, 0x01	; 1
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	80 83       	st	Z, r24
     fd4:	81 83       	std	Z+1, r24	; 0x01
     fd6:	82 83       	std	Z+2, r24	; 0x02
     fd8:	83 83       	std	Z+3, r24	; 0x03
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     fda:	a6 ef       	ldi	r26, 0xF6	; 246
     fdc:	b1 e0       	ldi	r27, 0x01	; 1
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	1c 92       	st	X, r1
     fe2:	1e 92       	st	-X, r1
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     fe4:	84 83       	std	Z+4, r24	; 0x04
     fe6:	85 83       	std	Z+5, r24	; 0x05
     fe8:	86 83       	std	Z+6, r24	; 0x06
     fea:	87 83       	std	Z+7, r24	; 0x07
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	1c 92       	st	X, r1
     ff0:	1e 92       	st	-X, r1
     ff2:	12 97       	sbiw	r26, 0x02	; 2
     ff4:	08 95       	ret

00000ff6 <UART_Start_Command>:

****************************************************************************/

void UART_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE];
     ff6:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <Buffer_Index>
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	e6 50       	subi	r30, 0x06	; 6
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][UART_RX_LENGTH_BYTE];
    100e:	81 81       	ldd	r24, Z+1	; 0x01
    1010:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
    1014:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
    1018:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <TX_Index>
	
	// State in TX
	In_Tx = true;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <In_Tx>
    1022:	08 95       	ret

00001024 <UART_End_Command>:
        Ends UART Transmission by setting SS high

****************************************************************************/

void UART_End_Command (void)
{
    1024:	08 95       	ret

00001026 <UART_Transmit>:

****************************************************************************/

void UART_Transmit (void)
{
	if (!modem_init)
    1026:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <modem_init>
    102a:	81 11       	cpse	r24, r1
    102c:	16 c0       	rjmp	.+44     	; 0x105a <UART_Transmit+0x34>
	{
		// Send byte out
		LINDAT = Command_Buffer[Buffer_Index][TX_Index + UART_LENGTH_BYTES];
    102e:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <Buffer_Index>
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TX_Index>
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	e6 50       	subi	r30, 0x06	; 6
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	e8 0f       	add	r30, r24
    1046:	f1 1d       	adc	r31, r1
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		TX_Index++;
    104e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TX_Index>
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TX_Index>
    1058:	08 95       	ret
		//}
	}
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
    105a:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <Text_Index>
    105e:	82 2f       	mov	r24, r18
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	e0 5b       	subi	r30, 0xB0	; 176
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	34 91       	lpm	r19, Z
    106a:	3f 32       	cpi	r19, 0x2F	; 47
    106c:	59 f4       	brne	.+22     	; 0x1084 <UART_Transmit+0x5e>
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
    106e:	fc 01       	movw	r30, r24
    1070:	ef 5a       	subi	r30, 0xAF	; 175
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	e4 91       	lpm	r30, Z
    1076:	e2 37       	cpi	r30, 0x72	; 114
    1078:	39 f4       	brne	.+14     	; 0x1088 <UART_Transmit+0x62>
				set_as = 0x0D;
				Text_Index++;
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <Text_Index>
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
				set_as = 0x0D;
    1080:	ed e0       	ldi	r30, 0x0D	; 13
    1082:	03 c0       	rjmp	.+6      	; 0x108a <UART_Transmit+0x64>
				set_as = '/';	
			}
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
    1084:	e4 91       	lpm	r30, Z
    1086:	01 c0       	rjmp	.+2      	; 0x108a <UART_Transmit+0x64>
				set_as = 0x0D;
				Text_Index++;
			}
			
			else {
				set_as = '/';	
    1088:	ef e2       	ldi	r30, 0x2F	; 47
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
		}
		LINDAT = set_as;
    108a:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		Text_Index++;
    108e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Text_Index>
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Text_Index>
    1098:	08 95       	ret

0000109a <Write_UART>:
    Description
        Fills in current command into UART command buffer
****************************************************************************/

void Write_UART(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive, bool Init_Seq)
{
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	d8 2e       	mov	r13, r24
    10ac:	c6 2e       	mov	r12, r22
    10ae:	ea 01       	movw	r28, r20
    10b0:	79 01       	movw	r14, r18
	if (!Init_Seq)
    10b2:	01 11       	cpse	r16, r1
    10b4:	4f c0       	rjmp	.+158    	; 0x1154 <Write_UART+0xba>
	{
		modem_init = false;
    10b6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <modem_init>
		counter_value = query_counter();
    10ba:	0e 94 81 03 	call	0x702	; 0x702 <query_counter>
    10be:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <counter_value>
    10c2:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <counter_value+0x1>
    10c6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <counter_value+0x2>
    10ca:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <counter_value+0x3>
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    10ce:	0d 2d       	mov	r16, r13
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	0e 5f       	subi	r16, 0xFE	; 254
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    10d6:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <Next_Available_Row>
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	de 01       	movw	r26, r28
    10de:	12 97       	sbiw	r26, 0x02	; 2
    10e0:	c9 01       	movw	r24, r18
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	e0 e0       	ldi	r30, 0x00	; 0
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    10ee:	9c 01       	movw	r18, r24
    10f0:	26 50       	subi	r18, 0x06	; 6
    10f2:	3e 4f       	sbci	r19, 0xFE	; 254
    10f4:	a9 01       	movw	r20, r18
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	19 f4       	brne	.+6      	; 0x1104 <Write_UART+0x6a>
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    10fe:	e9 01       	movw	r28, r18
    1100:	d8 82       	st	Y, r13
    1102:	0d c0       	rjmp	.+26     	; 0x111e <Write_UART+0x84>
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
    1104:	e1 30       	cpi	r30, 0x01	; 1
    1106:	f1 05       	cpc	r31, r1
    1108:	19 f4       	brne	.+6      	; 0x1110 <Write_UART+0x76>
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    110a:	ea 01       	movw	r28, r20
    110c:	c8 82       	st	Y, r12
    110e:	07 c0       	rjmp	.+14     	; 0x111e <Write_UART+0x84>
			}
			// Fill in remaining data to TX
			else
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
    1110:	6c 91       	ld	r22, X
    1112:	ef 01       	movw	r28, r30
    1114:	c8 0f       	add	r28, r24
    1116:	d9 1f       	adc	r29, r25
    1118:	c6 50       	subi	r28, 0x06	; 6
    111a:	de 4f       	sbci	r29, 0xFE	; 254
    111c:	68 83       	st	Y, r22
	{
		modem_init = false;
		counter_value = query_counter();
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    111e:	31 96       	adiw	r30, 0x01	; 1
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	e0 17       	cp	r30, r16
    1124:	f1 07       	cpc	r31, r17
    1126:	4c f3       	brlt	.-46     	; 0x10fa <Write_UART+0x60>
    1128:	2a c0       	rjmp	.+84     	; 0x117e <Write_UART+0xe4>
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
			}
		}
		// If reached Command Buffer end
		if (Next_Available_Row == UART_COMMAND_BUFFER_SIZE - 1)
    112a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <Next_Available_Row>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	19 f4       	brne	.+6      	; 0x1138 <Write_UART+0x9e>
		{
			Next_Available_Row = 0;
    1132:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Next_Available_Row>
    1136:	03 c0       	rjmp	.+6      	; 0x113e <Write_UART+0xa4>
		}
		else
		{
			Next_Available_Row++;
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <Next_Available_Row>
		}
		// If UART is currently idling, start transmission
		if (Query_UART_State() == NORMAL_UART_STATE)
    113e:	0e 94 4f 0a 	call	0x149e	; 0x149e <Query_UART_State>
    1142:	81 11       	cpse	r24, r1
    1144:	1f c0       	rjmp	.+62     	; 0x1184 <Write_UART+0xea>
		{
			Post_Event(EVT_UART_START);
    1146:	60 e8       	ldi	r22, 0x80	; 128
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1152:	18 c0       	rjmp	.+48     	; 0x1184 <Write_UART+0xea>
		}
	}
	else
	{
		modem_init = true;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <modem_init>
		Text_Index = 0;
    115a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <Text_Index>
		UART_Transmit();
    115e:	0e 94 13 08 	call	0x1026	; 0x1026 <UART_Transmit>
    1162:	10 c0       	rjmp	.+32     	; 0x1184 <Write_UART+0xea>
		if (RX_Length > 0)
		{
			for (int i = 0; i < RX_Length; i++)
			{
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
    1164:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Next_Available_Row>
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	ea 50       	subi	r30, 0x0A	; 10
    1170:	fe 4f       	sbci	r31, 0xFE	; 254
    1172:	d7 01       	movw	r26, r14
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	d6 cf       	rjmp	.-84     	; 0x112a <Write_UART+0x90>
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
			}
		}
		// Data is expected to be received
		if (RX_Length > 0)
    117e:	c1 10       	cpse	r12, r1
    1180:	f1 cf       	rjmp	.-30     	; 0x1164 <Write_UART+0xca>
    1182:	d3 cf       	rjmp	.-90     	; 0x112a <Write_UART+0x90>
	{
		modem_init = true;
		Text_Index = 0;
		UART_Transmit();
	}	
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <__vector_13>:
    Description
        Handles UART transmission completed interrupts

****************************************************************************/
ISR(LIN_ERR_vect)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	8f 93       	push	r24
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
	PORTB |= (1<<PINB1);
    11a6:	29 9a       	sbi	0x05, 1	; 5
	LINSIR |= (1<LERR);
    11a8:	e9 ec       	ldi	r30, 0xC9	; 201
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	8f 91       	pop	r24
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_12>:

ISR(LIN_TC_vect)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
	//LINSIR = (1<<3)|(1<<2)|(1<<1)|(1<<0);
	// Received a byte
	if (LINSIR & RX_ISR_FLAG)	
    11e4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    11e8:	80 ff       	sbrs	r24, 0
    11ea:	5f c0       	rjmp	.+190    	; 0x12aa <__vector_12+0xe8>
	//if (!modem_init && !In_Tx)
	{
		LINSIR |= RX_ISR_FLAG;	// Clear Receive Flag
    11ec:	e9 ec       	ldi	r30, 0xC9	; 201
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24

						
		// If the correct sequence was received, prepare to store packet sent from phone
		if (first_byte_T && second_byte_slash_n && third_slash_r)
    11f6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <first_byte_T>
    11fa:	88 23       	and	r24, r24
    11fc:	69 f1       	breq	.+90     	; 0x1258 <__vector_12+0x96>
    11fe:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <second_byte_slash_n>
    1202:	88 23       	and	r24, r24
    1204:	09 f4       	brne	.+2      	; 0x1208 <__vector_12+0x46>
    1206:	dd c0       	rjmp	.+442    	; 0x13c2 <__vector_12+0x200>
    1208:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <third_slash_r>
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <__vector_12+0x50>
    1210:	d8 c0       	rjmp	.+432    	; 0x13c2 <__vector_12+0x200>
		{
			Modem_Recv_Data[byte_space_counter - 1] = LINDAT;
    1212:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <byte_space_counter>
    1216:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    121a:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <Modem_Recv_Data>
    121e:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <Modem_Recv_Data+0x1>
    1222:	e8 0f       	add	r30, r24
    1224:	f1 1d       	adc	r31, r1
    1226:	31 97       	sbiw	r30, 0x01	; 1
    1228:	90 83       	st	Z, r25
			byte_space_counter++;
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <byte_space_counter>
			
			if (byte_space_counter >= MAX_MODEM_RECEIVE + 1)
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	08 f4       	brcc	.+2      	; 0x1236 <__vector_12+0x74>
    1234:	d5 c0       	rjmp	.+426    	; 0x13e0 <__vector_12+0x21e>
			{
				PORTB ^= (1<<PINB5);
    1236:	95 b1       	in	r25, 0x05	; 5
    1238:	80 e2       	ldi	r24, 0x20	; 32
    123a:	89 27       	eor	r24, r25
    123c:	85 b9       	out	0x05, r24	; 5
				first_byte_T = false;
    123e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <first_byte_T>
				second_byte_slash_n = false;
    1242:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <second_byte_slash_n>
				third_slash_r = false;
    1246:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <third_slash_r>
				Post_Event(EVT_MODEM_NEW_PACKAGE);
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e8       	ldi	r23, 0x80	; 128
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1256:	c4 c0       	rjmp	.+392    	; 0x13e0 <__vector_12+0x21e>
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			//PORTB &= ~(1<<PINB5);
			uint8_t Current_Read = LINDAT;
    1258:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
    125c:	84 35       	cpi	r24, 0x54	; 84
    125e:	c9 f4       	brne	.+50     	; 0x1292 <__vector_12+0xd0>
			{
				byte_space_counter = 0;
    1260:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <byte_space_counter>
				first_byte_T = true;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <first_byte_T>
    126a:	19 c0       	rjmp	.+50     	; 0x129e <__vector_12+0xdc>
			}
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
    126c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <byte_space_counter>
    1270:	91 30       	cpi	r25, 0x01	; 1
    1272:	79 f4       	brne	.+30     	; 0x1292 <__vector_12+0xd0>
    1274:	8d 30       	cpi	r24, 0x0D	; 13
    1276:	09 f0       	breq	.+2      	; 0x127a <__vector_12+0xb8>
    1278:	ae c0       	rjmp	.+348    	; 0x13d6 <__vector_12+0x214>
			{
				second_byte_slash_n = true;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <second_byte_slash_n>
				byte_space_counter = 0;
    1280:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <byte_space_counter>
    1284:	0c c0       	rjmp	.+24     	; 0x129e <__vector_12+0xdc>
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
			{
				third_slash_r = true;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <third_slash_r>
				byte_space_counter = 0;
    128c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <byte_space_counter>
    1290:	06 c0       	rjmp	.+12     	; 0x129e <__vector_12+0xdc>
			}
			else {
				first_byte_T = false;
    1292:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <first_byte_T>
				second_byte_slash_n = false;
    1296:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <second_byte_slash_n>
				third_slash_r = false;
    129a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <third_slash_r>
			}
			byte_space_counter++;
    129e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <byte_space_counter>
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <byte_space_counter>
    12a8:	9b c0       	rjmp	.+310    	; 0x13e0 <__vector_12+0x21e>
		}
	}
	
	// Completed transmission of a byte
	else if (LINSIR && TX_ISR_FLAG)
    12aa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__vector_12+0xf2>
    12b2:	96 c0       	rjmp	.+300    	; 0x13e0 <__vector_12+0x21e>
	{
		LINSIR |= TX_ISR_FLAG;	// Clear Transmit flag
    12b4:	e9 ec       	ldi	r30, 0xC9	; 201
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	80 83       	st	Z, r24
		if (!modem_init)
    12be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <modem_init>
    12c2:	81 11       	cpse	r24, r1
    12c4:	74 c0       	rjmp	.+232    	; 0x13ae <__vector_12+0x1ec>
		{
			// Once a transmit has been completed
			if (In_Tx)
    12c6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <In_Tx>
    12ca:	88 23       	and	r24, r24
    12cc:	e1 f0       	breq	.+56     	; 0x1306 <__vector_12+0x144>
			{
				// If more bytes left to transmit post transmission event
				if (TX_Index <= Expected_TX_Length)
    12ce:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <TX_Index>
    12d2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Expected_TX_Length>
    12d6:	89 17       	cp	r24, r25
    12d8:	a0 f0       	brcs	.+40     	; 0x1302 <__vector_12+0x140>
				{
					if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
    12da:	98 13       	cpse	r25, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <__vector_12+0x12a>
    12de:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Expected_RX_Length>
    12e2:	81 11       	cpse	r24, r1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <__vector_12+0x12a>
					{
						In_Tx = false;
    12e6:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <In_Tx>
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <__vector_12+0x144>
					}
					else
					{
						Post_Event(EVT_UART_SEND_BYTE);
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	71 e0       	ldi	r23, 0x01	; 1
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
				{
					In_Tx = false;
				}
			}
			
			if (!In_Tx)
    12f8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <In_Tx>
    12fc:	81 11       	cpse	r24, r1
    12fe:	70 c0       	rjmp	.+224    	; 0x13e0 <__vector_12+0x21e>
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <__vector_12+0x144>
						Post_Event(EVT_UART_SEND_BYTE);
					}
				}
				else
				{
					In_Tx = false;
    1302:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <In_Tx>
				}
			}
			
			if (!In_Tx)
			{
				if (Expected_RX_Length > 0)
    1306:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <Expected_RX_Length>
    130a:	99 23       	and	r25, r25
    130c:	c1 f0       	breq	.+48     	; 0x133e <__vector_12+0x17c>
				{
					*(Receive_List[Buffer_Index][RX_Index]) = LINDAT;
    130e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <RX_Index>
    1312:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <Buffer_Index>
    1316:	e8 2f       	mov	r30, r24
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	e2 0f       	add	r30, r18
    131c:	f1 1d       	adc	r31, r1
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ea 50       	subi	r30, 0x0A	; 10
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	01 90       	ld	r0, Z+
    1328:	f0 81       	ld	r31, Z
    132a:	e0 2d       	mov	r30, r0
    132c:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    1330:	20 83       	st	Z, r18
					RX_Index++;
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <RX_Index>
				if (RX_Index < Expected_RX_Length)
				{
					// Do Nothing
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
    1338:	89 17       	cp	r24, r25
    133a:	08 f4       	brcc	.+2      	; 0x133e <__vector_12+0x17c>
    133c:	51 c0       	rjmp	.+162    	; 0x13e0 <__vector_12+0x21e>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < UART_MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
    133e:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <Buffer_Index>
    1342:	82 2f       	mov	r24, r18
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	fc 01       	movw	r30, r24
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	e6 50       	subi	r30, 0x06	; 6
    1352:	fe 4f       	sbci	r31, 0xFE	; 254
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	30 83       	st	Z, r19
    1358:	31 83       	std	Z+1, r19	; 0x01
    135a:	32 83       	std	Z+2, r19	; 0x02
    135c:	33 83       	std	Z+3, r19	; 0x03
    }
    // Point current receive list row to NULL
    for (int i = 0; i < UART_MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	fc 01       	movw	r30, r24
    1364:	ea 50       	subi	r30, 0x0A	; 10
    1366:	fe 4f       	sbci	r31, 0xFE	; 254
    1368:	11 82       	std	Z+1, r1	; 0x01
    136a:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == UART_COMMAND_BUFFER_SIZE - 1)
    136c:	21 30       	cpi	r18, 0x01	; 1
    136e:	19 f4       	brne	.+6      	; 0x1376 <__vector_12+0x1b4>
    {
        Buffer_Index = 0;
    1370:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <Buffer_Index>
    1374:	03 c0       	rjmp	.+6      	; 0x137c <__vector_12+0x1ba>
    }
    else
    {
        Buffer_Index++;
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE] != 0xFF)
    137c:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <Buffer_Index>
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	ee 0f       	add	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	e6 50       	subi	r30, 0x06	; 6
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	80 81       	ld	r24, Z
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	31 f0       	breq	.+12     	; 0x13a0 <__vector_12+0x1de>
    {
        Post_Event(EVT_UART_START);
    1394:	60 e8       	ldi	r22, 0x80	; 128
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
				{
					Update_Buffer_Index();
					Post_Event(EVT_UART_END);
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	74 e0       	ldi	r23, 0x04	; 4
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    13ac:	19 c0       	rjmp	.+50     	; 0x13e0 <__vector_12+0x21e>
		}
		
		// If in startup sequence for modem commands
		else
		{
			if (Text_Index >= sizeof(Init_Text)/sizeof(Init_Text[0]))
    13ae:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Text_Index>
    13b2:	8a 30       	cpi	r24, 0x0A	; 10
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <__vector_12+0x1fa>
			{
				modem_init = false;
    13b6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <modem_init>
    13ba:	12 c0       	rjmp	.+36     	; 0x13e0 <__vector_12+0x21e>
				int i = 0;
				//while (true) {
					//i++;
					//if (i > 20000) break;
				//}
				UART_Transmit();
    13bc:	0e 94 13 08 	call	0x1026	; 0x1026 <UART_Transmit>
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <__vector_12+0x21e>
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			//PORTB &= ~(1<<PINB5);
			uint8_t Current_Read = LINDAT;
    13c2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
    13c6:	84 35       	cpi	r24, 0x54	; 84
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_12+0x20a>
    13ca:	50 cf       	rjmp	.-352    	; 0x126c <__vector_12+0xaa>
    13cc:	49 cf       	rjmp	.-366    	; 0x1260 <__vector_12+0x9e>
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
			{
				second_byte_slash_n = true;
				byte_space_counter = 0;
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
    13ce:	8a 30       	cpi	r24, 0x0A	; 10
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__vector_12+0x212>
    13d2:	5f cf       	rjmp	.-322    	; 0x1292 <__vector_12+0xd0>
    13d4:	58 cf       	rjmp	.-336    	; 0x1286 <__vector_12+0xc4>
    13d6:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <second_byte_slash_n>
    13da:	91 11       	cpse	r25, r1
    13dc:	f8 cf       	rjmp	.-16     	; 0x13ce <__vector_12+0x20c>
    13de:	59 cf       	rjmp	.-334    	; 0x1292 <__vector_12+0xd0>
				//}
				UART_Transmit();
			}
		}
	}	
}
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <Init_UART_Service>:
    1402:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Current_State>
    1406:	08 95       	ret

00001408 <Run_UART_Service>:
    1408:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <Current_State>
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	a9 f0       	breq	.+42     	; 0x143a <Run_UART_Service+0x32>
    1410:	18 f0       	brcs	.+6      	; 0x1418 <Run_UART_Service+0x10>
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	89 f1       	breq	.+98     	; 0x1478 <Run_UART_Service+0x70>
    1416:	08 95       	ret
    1418:	60 38       	cpi	r22, 0x80	; 128
    141a:	71 05       	cpc	r23, r1
    141c:	81 05       	cpc	r24, r1
    141e:	91 05       	cpc	r25, r1
    1420:	e9 f5       	brne	.+122    	; 0x149c <Run_UART_Service+0x94>
    1422:	0e 94 fb 07 	call	0xff6	; 0xff6 <UART_Start_Command>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Current_State>
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1438:	08 95       	ret
    143a:	61 15       	cp	r22, r1
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	72 07       	cpc	r23, r18
    1440:	81 05       	cpc	r24, r1
    1442:	91 05       	cpc	r25, r1
    1444:	19 f4       	brne	.+6      	; 0x144c <Run_UART_Service+0x44>
    1446:	0e 94 13 08 	call	0x1026	; 0x1026 <UART_Transmit>
    144a:	08 95       	ret
    144c:	61 15       	cp	r22, r1
    144e:	22 e0       	ldi	r18, 0x02	; 2
    1450:	72 07       	cpc	r23, r18
    1452:	81 05       	cpc	r24, r1
    1454:	91 05       	cpc	r25, r1
    1456:	31 f4       	brne	.+12     	; 0x1464 <Run_UART_Service+0x5c>
    1458:	0e 94 13 08 	call	0x1026	; 0x1026 <UART_Transmit>
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Current_State>
    1462:	08 95       	ret
    1464:	61 15       	cp	r22, r1
    1466:	74 40       	sbci	r23, 0x04	; 4
    1468:	81 05       	cpc	r24, r1
    146a:	91 05       	cpc	r25, r1
    146c:	b9 f4       	brne	.+46     	; 0x149c <Run_UART_Service+0x94>
    146e:	0e 94 12 08 	call	0x1024	; 0x1024 <UART_End_Command>
    1472:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Current_State>
    1476:	08 95       	ret
    1478:	61 15       	cp	r22, r1
    147a:	22 e0       	ldi	r18, 0x02	; 2
    147c:	72 07       	cpc	r23, r18
    147e:	81 05       	cpc	r24, r1
    1480:	91 05       	cpc	r25, r1
    1482:	19 f4       	brne	.+6      	; 0x148a <Run_UART_Service+0x82>
    1484:	0e 94 13 08 	call	0x1026	; 0x1026 <UART_Transmit>
    1488:	08 95       	ret
    148a:	61 15       	cp	r22, r1
    148c:	74 40       	sbci	r23, 0x04	; 4
    148e:	81 05       	cpc	r24, r1
    1490:	91 05       	cpc	r25, r1
    1492:	21 f4       	brne	.+8      	; 0x149c <Run_UART_Service+0x94>
    1494:	0e 94 12 08 	call	0x1024	; 0x1024 <UART_End_Command>
    1498:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Current_State>
    149c:	08 95       	ret

0000149e <Query_UART_State>:
    149e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Current_State>
    14a2:	08 95       	ret

000014a4 <_exit>:
    14a4:	f8 94       	cli

000014a6 <__stop_program>:
    14a6:	ff cf       	rjmp	.-2      	; 0x14a6 <__stop_program>
