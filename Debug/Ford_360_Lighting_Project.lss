
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000f30  00000fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080010e  0080010e  00000fd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037b3  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018be  00000000  00000000  00004b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cec  00000000  00000000  00006431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  00008120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f30  00000000  00000000  000089f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc9  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000b5e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_9>
  28:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_10>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_12>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_14>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_15>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000050 <__trampolines_end>:
  50:	41 54       	subi	r20, 0x41	; 65
  52:	5e 53       	subi	r21, 0x3E	; 62
  54:	49 43       	sbci	r20, 0x39	; 57
  56:	41 3d       	cpi	r20, 0xD1	; 209
  58:	31 2c       	mov	r3, r1
  5a:	33 2f       	mov	r19, r19
  5c:	72 41       	sbci	r23, 0x12	; 18
  5e:	54 5e       	subi	r21, 0xE4	; 228
  60:	53 49       	sbci	r21, 0x93	; 147
  62:	53 53       	subi	r21, 0x33	; 51
  64:	3d 30       	cpi	r19, 0x0D	; 13
  66:	2c 22       	and	r2, r28
  68:	73 72       	andi	r23, 0x23	; 35
  6a:	76 54       	subi	r23, 0x46	; 70
  6c:	79 70       	andi	r23, 0x09	; 9
  6e:	65 22       	and	r6, r21
  70:	2c 22       	and	r2, r28
  72:	73 6f       	ori	r23, 0xF3	; 243
  74:	63 6b       	ori	r22, 0xB3	; 179
  76:	65 74       	andi	r22, 0x45	; 69
  78:	22 2f       	mov	r18, r18
  7a:	72 41       	sbci	r23, 0x12	; 18
  7c:	54 5e       	subi	r21, 0xE4	; 228
  7e:	53 49       	sbci	r21, 0x93	; 147
  80:	53 53       	subi	r21, 0x33	; 51
  82:	3d 30       	cpi	r19, 0x0D	; 13
  84:	2c 22       	and	r2, r28
  86:	63 6f       	ori	r22, 0xF3	; 243
  88:	6e 49       	sbci	r22, 0x9E	; 158
  8a:	64 22       	and	r6, r20
  8c:	2c 33       	cpi	r18, 0x3C	; 60
  8e:	2f 72       	andi	r18, 0x2F	; 47
  90:	41 54       	subi	r20, 0x41	; 65
  92:	5e 53       	subi	r21, 0x3E	; 62
  94:	49 53       	subi	r20, 0x39	; 57
  96:	53 3d       	cpi	r21, 0xD3	; 211
  98:	30 2c       	mov	r3, r0
  9a:	22 61       	ori	r18, 0x12	; 18
  9c:	64 64       	ori	r22, 0x44	; 68
  9e:	72 65       	ori	r23, 0x52	; 82
  a0:	73 73       	andi	r23, 0x33	; 51
  a2:	22 2c       	mov	r2, r2
  a4:	22 73       	andi	r18, 0x32	; 50
  a6:	6f 63       	ori	r22, 0x3F	; 63
  a8:	6b 74       	andi	r22, 0x4B	; 75
  aa:	63 70       	andi	r22, 0x03	; 3
  ac:	3a 2f       	mov	r19, r26
  ae:	2f 6c       	ori	r18, 0xCF	; 207
  b0:	69 73       	andi	r22, 0x39	; 57
  b2:	74 65       	ori	r23, 0x54	; 84
  b4:	6e 65       	ori	r22, 0x5E	; 94
  b6:	72 3a       	cpi	r23, 0xA2	; 162
  b8:	32 30       	cpi	r19, 0x02	; 2
  ba:	30 30       	cpi	r19, 0x00	; 0
  bc:	3b 65       	ori	r19, 0x5B	; 91
  be:	74 78       	andi	r23, 0x84	; 132
  c0:	3d 32       	cpi	r19, 0x2D	; 45
  c2:	36 3b       	cpi	r19, 0xB6	; 182
  c4:	61 75       	andi	r22, 0x51	; 81
  c6:	74 6f       	ori	r23, 0xF4	; 244
  c8:	63 6f       	ori	r22, 0xF3	; 243
  ca:	6e 6e       	ori	r22, 0xEE	; 238
  cc:	65 63       	ori	r22, 0x35	; 53
  ce:	74 3d       	cpi	r23, 0xD4	; 212
  d0:	31 22       	and	r3, r17
  d2:	2f 72       	andi	r18, 0x2F	; 47
  d4:	41 54       	subi	r20, 0x41	; 65
  d6:	5e 53       	subi	r21, 0x3E	; 62
  d8:	49 53       	subi	r20, 0x39	; 57
  da:	4f 3d       	cpi	r20, 0xDF	; 223
  dc:	30 2f       	mov	r19, r16
  de:	72 00       	.word	0x0072	; ????

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d2 e0       	ldi	r29, 0x02	; 2
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	e0 e3       	ldi	r30, 0x30	; 48
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
  f8:	05 90       	lpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	ae 30       	cpi	r26, 0x0E	; 14
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
 102:	22 e0       	ldi	r18, 0x02	; 2
 104:	ae e0       	ldi	r26, 0x0E	; 14
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a6 31       	cpi	r26, 0x16	; 22
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
 116:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
 13a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 13e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
 16c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 170:	88 23       	and	r24, r24
 172:	19 f0       	breq	.+6      	; 0x17a <__vector_9+0x1e>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	39 f0       	breq	.+14     	; 0x186 <__vector_9+0x2a>
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
 17a:	e3 e8       	ldi	r30, 0x83	; 131
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 62       	ori	r24, 0x20	; 32
 182:	80 83       	st	Z, r24
            break;
 184:	06 c0       	rjmp	.+12     	; 0x192 <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
 186:	e3 e8       	ldi	r30, 0x83	; 131
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 7d       	andi	r24, 0xDF	; 223
 18e:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
 190:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
 192:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 196:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
 198:	83 70       	andi	r24, 0x03	; 3
 19a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <CAN_Read>:
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
}
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <CAN_Read+0x6>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	9b 01       	movw	r18, r22
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	99 83       	std	Y+1, r25	; 0x01
 1be:	8a 83       	std	Y+2, r24	; 0x02
 1c0:	ae 01       	movw	r20, r28
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 1d 03 	call	0x63a	; 0x63a <Write_SPI>
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <CAN_Bit_Modify>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <CAN_Bit_Modify+0x6>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <CAN_Bit_Modify+0x8>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	95 e0       	ldi	r25, 0x05	; 5
 1e6:	99 83       	std	Y+1, r25	; 0x01
 1e8:	8a 83       	std	Y+2, r24	; 0x02
 1ea:	6b 83       	std	Y+3, r22	; 0x03
 1ec:	fa 01       	movw	r30, r20
 1ee:	80 81       	ld	r24, Z
 1f0:	8c 83       	std	Y+4, r24	; 0x04
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	ae 01       	movw	r20, r28
 1f8:	4f 5f       	subi	r20, 0xFF	; 255
 1fa:	5f 4f       	sbci	r21, 0xFF	; 255
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	0e 94 1d 03 	call	0x63a	; 0x63a <Write_SPI>
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(uint8_t** Recv_Data)
{
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	08 2f       	mov	r16, r24
 220:	19 2f       	mov	r17, r25
	RX_Data[0] = &Recv_Byte;
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <RX_Data+0x1>
 22a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <RX_Data>
	CAN_Read(MCP_RXB0DLC, RX_Data);
 22e:	60 e1       	ldi	r22, 0x10	; 16
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	85 e6       	ldi	r24, 0x65	; 101
 234:	0e 94 d7 00 	call	0x1ae	; 0x1ae <CAN_Read>
	
	uint8_t Recv_Length = Recv_Byte;
 238:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Recv_Byte>
	
	for (int i = 0; i < Recv_Length; i++)
 23c:	22 23       	and	r18, r18
 23e:	c1 f0       	breq	.+48     	; 0x270 <CAN_Read_Message+0x5e>
 240:	c0 2f       	mov	r28, r16
 242:	d1 2f       	mov	r29, r17
 244:	e0 2e       	mov	r14, r16
 246:	f1 2e       	mov	r15, r17
 248:	e2 0e       	add	r14, r18
 24a:	f1 1c       	adc	r15, r1
 24c:	e2 0e       	add	r14, r18
 24e:	f1 1c       	adc	r15, r1
 250:	16 e6       	ldi	r17, 0x66	; 102
	{
		RX_Data[0] = Recv_Data[i];
 252:	89 91       	ld	r24, Y+
 254:	99 91       	ld	r25, Y+
 256:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <RX_Data+0x1>
 25a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <RX_Data>
		CAN_Read(MCP_RXB0D0 + i, RX_Data);
 25e:	60 e1       	ldi	r22, 0x10	; 16
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	81 2f       	mov	r24, r17
 264:	0e 94 d7 00 	call	0x1ae	; 0x1ae <CAN_Read>
 268:	1f 5f       	subi	r17, 0xFF	; 255
	RX_Data[0] = &Recv_Byte;
	CAN_Read(MCP_RXB0DLC, RX_Data);
	
	uint8_t Recv_Length = Recv_Byte;
	
	for (int i = 0; i < Recv_Length; i++)
 26a:	ce 15       	cp	r28, r14
 26c:	df 05       	cpc	r29, r15
 26e:	89 f7       	brne	.-30     	; 0x252 <CAN_Read_Message+0x40>
	{
		RX_Data[0] = Recv_Data[i];
		CAN_Read(MCP_RXB0D0 + i, RX_Data);
	}	
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	08 95       	ret

0000027e <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17

****************************************************************************/
static bool is_event_pending(uint32_t event_mask)
{
    // If this event is pending
    if (event_mask == (Pending_Events & event_mask))
 28a:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Pending_Events>
 28e:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Pending_Events+0x1>
 292:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Pending_Events+0x2>
 296:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Pending_Events+0x3>
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
 29e:	c0 22       	and	r12, r16
 2a0:	d1 22       	and	r13, r17
 2a2:	e2 22       	and	r14, r18
 2a4:	f3 22       	and	r15, r19
 2a6:	6c 15       	cp	r22, r12
 2a8:	7d 05       	cpc	r23, r13
 2aa:	8e 05       	cpc	r24, r14
 2ac:	9f 05       	cpc	r25, r15
 2ae:	a1 f4       	brne	.+40     	; 0x2d8 <process_event_if_pending+0x5a>
    {
        // Clear Event
        Pending_Events &= ~event_mask;
 2b0:	6b 01       	movw	r12, r22
 2b2:	7c 01       	movw	r14, r24
 2b4:	c0 94       	com	r12
 2b6:	d0 94       	com	r13
 2b8:	e0 94       	com	r14
 2ba:	f0 94       	com	r15
 2bc:	0c 21       	and	r16, r12
 2be:	1d 21       	and	r17, r13
 2c0:	2e 21       	and	r18, r14
 2c2:	3f 21       	and	r19, r15
 2c4:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <Pending_Events>
 2c8:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <Pending_Events+0x1>
 2cc:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Pending_Events+0x2>
 2d0:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Pending_Events+0x3>
{
    // If event is pending
    if (is_event_pending(event_mask))
    {
        // Run the services with this event
        Run_Services(event_mask);
 2d4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Run_Services>
    }
}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	08 95       	ret

000002e6 <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
    // Set flag in event list
    Pending_Events |= event_mask;
 2ea:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Pending_Events>
 2ee:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Pending_Events+0x1>
 2f2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Pending_Events+0x2>
 2f6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Pending_Events+0x3>
 2fa:	dc 01       	movw	r26, r24
 2fc:	cb 01       	movw	r24, r22
 2fe:	80 2b       	or	r24, r16
 300:	91 2b       	or	r25, r17
 302:	a2 2b       	or	r26, r18
 304:	b3 2b       	or	r27, r19
 306:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Pending_Events>
 30a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Pending_Events+0x1>
 30e:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <Pending_Events+0x2>
 312:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <Pending_Events+0x3>
}
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
 334:	64 e0       	ldi	r22, 0x04	; 4
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
 340:	68 e0       	ldi	r22, 0x08	; 8
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
 34c:	60 e1       	ldi	r22, 0x10	; 16
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
 358:	60 e2       	ldi	r22, 0x20	; 32
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
 364:	60 e4       	ldi	r22, 0x40	; 64
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
 370:	60 e8       	ldi	r22, 0x80	; 128
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	72 e0       	ldi	r23, 0x02	; 2
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	74 e0       	ldi	r23, 0x04	; 4
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	78 e0       	ldi	r23, 0x08	; 8
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	70 e1       	ldi	r23, 0x10	; 16
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e2       	ldi	r23, 0x20	; 32
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e4       	ldi	r23, 0x40	; 64
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 3f 01 	call	0x27e	; 0x27e <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
 3d0:	a5 cf       	rjmp	.-182    	; 0x31c <Run_Events>

000003d2 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
 3d2:	0e 94 47 04 	call	0x88e	; 0x88e <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
 3d6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Init_Modem_Service>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
 3da:	0e 94 45 07 	call	0xe8a	; 0xe8a <Init_UART_Service>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
 3de:	0e 94 05 02 	call	0x40a	; 0x40a <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
 3e2:	0e 94 94 02 	call	0x528	; 0x528 <Init_LIN_XCVR_WD_Kicker>
 3e6:	08 95       	ret

000003e8 <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	6b 01       	movw	r12, r22
 3f2:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
 3f4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Run_Modem_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 48 07 	call	0xe90	; 0xe90 <Run_UART_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	08 95       	ret

0000040a <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
 40a:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
 40c:	e9 e6       	ldi	r30, 0x69	; 105
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	8e 7f       	andi	r24, 0xFE	; 254
 414:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
 41c:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
 41e:	e0 9a       	sbi	0x1c, 0	; 28
 420:	08 95       	ret

00000422 <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
 422:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <counter>
 426:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <counter+0x1>
 42a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter+0x2>
 42e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter+0x3>
}
 432:	08 95       	ret

00000434 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	4f 93       	push	r20
 448:	5f 93       	push	r21
 44a:	6f 93       	push	r22
 44c:	7f 93       	push	r23
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	af 93       	push	r26
 454:	bf 93       	push	r27
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	61 97       	sbiw	r28, 0x11	; 17
 464:	de bf       	out	0x3e, r29	; 62
 466:	cd bf       	out	0x3d, r28	; 61
	counter++;
 468:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <counter>
 46c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <counter+0x1>
 470:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <counter+0x2>
 474:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <counter+0x3>
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	a1 1d       	adc	r26, r1
 47c:	b1 1d       	adc	r27, r1
 47e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <counter>
 482:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <counter+0x1>
 486:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <counter+0x2>
 48a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <counter+0x3>
	uint8_t* Variable_List[8] = {0};
 48e:	8e 01       	movw	r16, r28
 490:	0f 5f       	subi	r16, 0xFF	; 255
 492:	1f 4f       	sbci	r17, 0xFF	; 255
 494:	80 e1       	ldi	r24, 0x10	; 16
 496:	f8 01       	movw	r30, r16
 498:	11 92       	st	Z+, r1
 49a:	8a 95       	dec	r24
 49c:	e9 f7       	brne	.-6      	; 0x498 <__vector_1+0x64>
	Fill_Variable_List(&Variable_List[0]);
 49e:	c8 01       	movw	r24, r16
 4a0:	0e 94 b3 02 	call	0x566	; 0x566 <Fill_Variable_List>
	CAN_Read_Message(Variable_List);
 4a4:	c8 01       	movw	r24, r16
 4a6:	0e 94 09 01 	call	0x212	; 0x212 <CAN_Read_Message>
	uint8_t TX_Data[1] = {0};
 4aa:	19 8a       	std	Y+17, r1	; 0x11
	CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5e       	subi	r20, 0xEF	; 239
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	6f ef       	ldi	r22, 0xFF	; 255
 4b4:	8c e2       	ldi	r24, 0x2C	; 44
 4b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <CAN_Bit_Modify>
}
 4ba:	61 96       	adiw	r28, 0x11	; 17
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
 4f0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Parity>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	89 27       	eor	r24, r25
 4f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
 4fc:	81 11       	cpse	r24, r1
 4fe:	0a c0       	rjmp	.+20     	; 0x514 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
 500:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
 502:	42 e0       	ldi	r20, 0x02	; 2
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	8b e1       	ldi	r24, 0x1B	; 27
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 ba 04 	call	0x974	; 0x974 <Start_Timer>
 512:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
 514:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 516:	43 e2       	ldi	r20, 0x23	; 35
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	8b e1       	ldi	r24, 0x1B	; 27
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 ba 04 	call	0x974	; 0x974 <Start_Timer>
 526:	08 95       	ret

00000528 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
 528:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
 52a:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
 52c:	68 e7       	ldi	r22, 0x78	; 120
 52e:	72 e0       	ldi	r23, 0x02	; 2
 530:	8b e1       	ldi	r24, 0x1B	; 27
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 6d 04 	call	0x8da	; 0x8da <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 538:	43 e2       	ldi	r20, 0x23	; 35
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	8b e1       	ldi	r24, 0x1B	; 27
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 ba 04 	call	0x974	; 0x974 <Start_Timer>
 548:	08 95       	ret

0000054a <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts 
	asm("cli");
 54a:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
 54c:	e1 e6       	ldi	r30, 0x61	; 97
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	80 83       	st	Z, r24
    CLKPR = 0;
 554:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
 556:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
 55a:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
 55c:	0e 94 8e 01 	call	0x31c	; 0x31c <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	08 95       	ret

00000566 <Fill_Variable_List>:
        Fills in the variables the CAN Read command will set

****************************************************************************/

void Fill_Variable_List(uint8_t** Variable_List)
{
 566:	fc 01       	movw	r30, r24
	Variable_List[0] = &Byte_1;
 568:	86 e2       	ldi	r24, 0x26	; 38
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
	Variable_List[1] = &Byte_2;
 570:	85 e2       	ldi	r24, 0x25	; 37
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	82 83       	std	Z+2, r24	; 0x02
	Variable_List[2] = &Byte_3;
 578:	84 e2       	ldi	r24, 0x24	; 36
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	95 83       	std	Z+5, r25	; 0x05
 57e:	84 83       	std	Z+4, r24	; 0x04
	Variable_List[3] = &Byte_4;
 580:	83 e2       	ldi	r24, 0x23	; 35
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	97 83       	std	Z+7, r25	; 0x07
 586:	86 83       	std	Z+6, r24	; 0x06
	Variable_List[4] = &Byte_5;
 588:	82 e2       	ldi	r24, 0x22	; 34
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	91 87       	std	Z+9, r25	; 0x09
 58e:	80 87       	std	Z+8, r24	; 0x08
	Variable_List[5] = &Byte_6;
 590:	81 e2       	ldi	r24, 0x21	; 33
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	93 87       	std	Z+11, r25	; 0x0b
 596:	82 87       	std	Z+10, r24	; 0x0a
	Variable_List[6] = &Byte_7;
 598:	80 e2       	ldi	r24, 0x20	; 32
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	95 87       	std	Z+13, r25	; 0x0d
 59e:	84 87       	std	Z+12, r24	; 0x0c
	Variable_List[7] = &Byte_8;		
 5a0:	8f e1       	ldi	r24, 0x1F	; 31
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	97 87       	std	Z+15, r25	; 0x0f
 5a6:	86 87       	std	Z+14, r24	; 0x0e
 5a8:	08 95       	ret

000005aa <Init_Modem_Service>:

****************************************************************************/
void Init_Modem_Service(void)
{
   // Initialize UART
	UART_Initialize();
 5aa:	0e 94 70 05 	call	0xae0	; 0xae0 <UART_Initialize>
	Register_Timer(&Testing_Timer, Post_Event);
 5ae:	63 e7       	ldi	r22, 0x73	; 115
 5b0:	71 e0       	ldi	r23, 0x01	; 1
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 6d 04 	call	0x8da	; 0x8da <Register_Timer>
	Start_Timer(&Testing_Timer, 5000);
 5ba:	48 e8       	ldi	r20, 0x88	; 136
 5bc:	53 e1       	ldi	r21, 0x13	; 19
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 ba 04 	call	0x974	; 0x974 <Start_Timer>
    PORTB &= ~(1<<PINB2);
 5ca:	2a 98       	cbi	0x05, 2	; 5
    DDRB |= (1<<PINB2);
 5cc:	22 9a       	sbi	0x04, 2	; 4
 5ce:	08 95       	ret

000005d0 <Run_Modem_Service>:
    Description
        Processes events for the master node

****************************************************************************/
void Run_Modem_Service(uint32_t event_mask)
{
 5d0:	0f 93       	push	r16
    switch(event_mask)
 5d2:	60 34       	cpi	r22, 0x40	; 64
 5d4:	71 05       	cpc	r23, r1
 5d6:	81 05       	cpc	r24, r1
 5d8:	91 05       	cpc	r25, r1
 5da:	69 f5       	brne	.+90     	; 0x636 <Run_Modem_Service+0x66>
    {
        case EVT_TEST_TIMEOUT:
			if (do_init_modem)
 5dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <do_init_modem>
 5e0:	88 23       	and	r24, r24
 5e2:	61 f0       	breq	.+24     	; 0x5fc <Run_Modem_Service+0x2c>
			{
				Write_UART(3, 0, &TX_Data[0], &RX_Data[0], true);
 5e4:	01 e0       	ldi	r16, 0x01	; 1
 5e6:	26 e0       	ldi	r18, 0x06	; 6
 5e8:	31 e0       	ldi	r19, 0x01	; 1
 5ea:	44 e0       	ldi	r20, 0x04	; 4
 5ec:	51 e0       	ldi	r21, 0x01	; 1
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Write_UART>
				do_init_modem = false;
 5f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <do_init_modem>
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <Run_Modem_Service+0x3e>
			}
			else
			{
				Write_UART(2, 0, &TX_Data[0], &RX_Data[0], false);
 5fc:	00 e0       	ldi	r16, 0x00	; 0
 5fe:	26 e0       	ldi	r18, 0x06	; 6
 600:	31 e0       	ldi	r19, 0x01	; 1
 602:	44 e0       	ldi	r20, 0x04	; 4
 604:	51 e0       	ldi	r21, 0x01	; 1
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Write_UART>
			}
			
			if (flipper)
 60e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flipper>
 612:	88 23       	and	r24, r24
 614:	21 f0       	breq	.+8      	; 0x61e <Run_Modem_Service+0x4e>
			{
				PORTB |= (1<<PINB2);
 616:	2a 9a       	sbi	0x05, 2	; 5
				flipper = false;
 618:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flipper>
 61c:	04 c0       	rjmp	.+8      	; 0x626 <Run_Modem_Service+0x56>
			}
			else
			{
				PORTB &= ~(1<<PINB2);
 61e:	2a 98       	cbi	0x05, 2	; 5
				flipper = true;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flipper>
			}
				
			Start_Timer(&Testing_Timer, 250);
 626:	4a ef       	ldi	r20, 0xFA	; 250
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 ba 04 	call	0x974	; 0x974 <Start_Timer>
			break;

        default:
            break;
    }
}
 636:	0f 91       	pop	r16
 638:	08 95       	ret

0000063a <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
 63a:	af 92       	push	r10
 63c:	bf 92       	push	r11
 63e:	cf 92       	push	r12
 640:	df 92       	push	r13
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	d8 2e       	mov	r13, r24
 650:	c6 2e       	mov	r12, r22
 652:	ea 01       	movw	r28, r20
 654:	79 01       	movw	r14, r18
	counter_value = query_counter();
 656:	0e 94 11 02 	call	0x422	; 0x422 <query_counter>
 65a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <counter_value>
 65e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <counter_value+0x1>
 662:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <counter_value+0x2>
 666:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 66a:	8d 2d       	mov	r24, r13
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	8c 01       	movw	r16, r24
 670:	0e 5f       	subi	r16, 0xFE	; 254
 672:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 674:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <Next_Available_Row>
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	de 01       	movw	r26, r28
 67c:	12 97       	sbiw	r26, 0x02	; 2
 67e:	c9 01       	movw	r24, r18
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	82 0f       	add	r24, r18
 686:	93 1f       	adc	r25, r19
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	e0 e0       	ldi	r30, 0x00	; 0
 68e:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 690:	9c 01       	movw	r18, r24
 692:	27 5b       	subi	r18, 0xB7	; 183
 694:	3e 4f       	sbci	r19, 0xFE	; 254
 696:	59 01       	movw	r10, r18
 698:	2f 5f       	subi	r18, 0xFF	; 255
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
 69c:	30 97       	sbiw	r30, 0x00	; 0
 69e:	19 f4       	brne	.+6      	; 0x6a6 <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 6a0:	e5 01       	movw	r28, r10
 6a2:	d8 82       	st	Y, r13
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
 6a6:	e1 30       	cpi	r30, 0x01	; 1
 6a8:	f1 05       	cpc	r31, r1
 6aa:	19 f4       	brne	.+6      	; 0x6b2 <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 6ac:	e9 01       	movw	r28, r18
 6ae:	c8 82       	st	Y, r12
 6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
 6b2:	6c 91       	ld	r22, X
 6b4:	af 01       	movw	r20, r30
 6b6:	48 0f       	add	r20, r24
 6b8:	59 1f       	adc	r21, r25
 6ba:	47 5b       	subi	r20, 0xB7	; 183
 6bc:	5e 4f       	sbci	r21, 0xFE	; 254
 6be:	ea 01       	movw	r28, r20
 6c0:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 6c2:	31 96       	adiw	r30, 0x01	; 1
 6c4:	11 96       	adiw	r26, 0x01	; 1
 6c6:	e0 17       	cp	r30, r16
 6c8:	f1 07       	cpc	r31, r17
 6ca:	44 f3       	brlt	.-48     	; 0x69c <Write_SPI+0x62>
 6cc:	22 c0       	rjmp	.+68     	; 0x712 <Write_SPI+0xd8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
 6ce:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Next_Available_Row>
 6d2:	8a 30       	cpi	r24, 0x0A	; 10
 6d4:	19 f4       	brne	.+6      	; 0x6dc <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
 6d6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Next_Available_Row>
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
 6dc:	8f 5f       	subi	r24, 0xFF	; 255
 6de:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
 6e2:	0e 94 44 04 	call	0x888	; 0x888 <Query_SPI_State>
 6e6:	81 11       	cpse	r24, r1
 6e8:	17 c0       	rjmp	.+46     	; 0x718 <Write_SPI+0xde>
    {
        Post_Event(EVT_SPI_START);
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	78 e0       	ldi	r23, 0x08	; 8
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
 6f6:	10 c0       	rjmp	.+32     	; 0x718 <Write_SPI+0xde>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
 6f8:	f7 01       	movw	r30, r14
 6fa:	80 81       	ld	r24, Z
 6fc:	91 81       	ldd	r25, Z+1	; 0x01
 6fe:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Next_Available_Row>
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	ed 5c       	subi	r30, 0xCD	; 205
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	91 83       	std	Z+1, r25	; 0x01
 70e:	80 83       	st	Z, r24
 710:	de cf       	rjmp	.-68     	; 0x6ce <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
 712:	c1 10       	cpse	r12, r1
 714:	f1 cf       	rjmp	.-30     	; 0x6f8 <Write_SPI+0xbe>
 716:	db cf       	rjmp	.-74     	; 0x6ce <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
    {
        Post_Event(EVT_SPI_START);
    }
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	ff 90       	pop	r15
 722:	ef 90       	pop	r14
 724:	df 90       	pop	r13
 726:	cf 90       	pop	r12
 728:	bf 90       	pop	r11
 72a:	af 90       	pop	r10
 72c:	08 95       	ret

0000072e <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
 750:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <Master_Slave_Identifier>
 754:	81 11       	cpse	r24, r1
 756:	87 c0       	rjmp	.+270    	; 0x866 <__vector_14+0x138>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
 758:	8d b5       	in	r24, 0x2d	; 45
		
		// Once a transmit has been completed
		if (In_Tx)
 75a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <In_Tx>
 75e:	88 23       	and	r24, r24
 760:	e1 f0       	breq	.+56     	; 0x79a <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
 762:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <TX_Index>
 766:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Expected_TX_Length>
 76a:	89 17       	cp	r24, r25
 76c:	a0 f0       	brcs	.+40     	; 0x796 <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
 76e:	98 13       	cpse	r25, r24
 770:	07 c0       	rjmp	.+14     	; 0x780 <__vector_14+0x52>
 772:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Expected_RX_Length>
 776:	81 11       	cpse	r24, r1
 778:	03 c0       	rjmp	.+6      	; 0x780 <__vector_14+0x52>
				{
					In_Tx = false;									
 77a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <In_Tx>
 77e:	0d c0       	rjmp	.+26     	; 0x79a <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	70 e1       	ldi	r23, 0x10	; 16
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
 78c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <In_Tx>
 790:	81 11       	cpse	r24, r1
 792:	69 c0       	rjmp	.+210    	; 0x866 <__vector_14+0x138>
 794:	02 c0       	rjmp	.+4      	; 0x79a <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
 796:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
 79a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Expected_RX_Length>
 79e:	99 23       	and	r25, r25
 7a0:	e9 f0       	breq	.+58     	; 0x7dc <__vector_14+0xae>
			{
				*(Receive_List[Buffer_Index][RX_Index]) = SPDR;
 7a2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RX_Index>
 7a6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Buffer_Index>
 7aa:	e8 2f       	mov	r30, r24
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	e2 0f       	add	r30, r18
 7b0:	f1 1d       	adc	r31, r1
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	ed 5c       	subi	r30, 0xCD	; 205
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	01 90       	ld	r0, Z+
 7bc:	f0 81       	ld	r31, Z
 7be:	e0 2d       	mov	r30, r0
 7c0:	2e b5       	in	r18, 0x2e	; 46
 7c2:	20 83       	st	Z, r18
				RX_Index++;				
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
 7ca:	89 17       	cp	r24, r25
 7cc:	38 f4       	brcc	.+14     	; 0x7dc <__vector_14+0xae>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	70 e2       	ldi	r23, 0x20	; 32
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
 7da:	45 c0       	rjmp	.+138    	; 0x866 <__vector_14+0x138>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
 7dc:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <Buffer_Index>
 7e0:	83 2f       	mov	r24, r19
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	ac 01       	movw	r20, r24
 7e6:	44 0f       	add	r20, r20
 7e8:	55 1f       	adc	r21, r21
 7ea:	fa 01       	movw	r30, r20
 7ec:	e8 0f       	add	r30, r24
 7ee:	f9 1f       	adc	r31, r25
 7f0:	ee 0f       	add	r30, r30
 7f2:	ff 1f       	adc	r31, r31
 7f4:	e7 5b       	subi	r30, 0xB7	; 183
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	2f ef       	ldi	r18, 0xFF	; 255
 7fa:	20 83       	st	Z, r18
 7fc:	21 83       	std	Z+1, r18	; 0x01
 7fe:	22 83       	std	Z+2, r18	; 0x02
 800:	23 83       	std	Z+3, r18	; 0x03
 802:	24 83       	std	Z+4, r18	; 0x04
 804:	fa 01       	movw	r30, r20
 806:	e8 0f       	add	r30, r24
 808:	f9 1f       	adc	r31, r25
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	e7 5b       	subi	r30, 0xB7	; 183
 810:	fe 4f       	sbci	r31, 0xFE	; 254
 812:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
 814:	fa 01       	movw	r30, r20
 816:	ed 5c       	subi	r30, 0xCD	; 205
 818:	fe 4f       	sbci	r31, 0xFE	; 254
 81a:	11 82       	std	Z+1, r1	; 0x01
 81c:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
 81e:	3a 30       	cpi	r19, 0x0A	; 10
 820:	19 f4       	brne	.+6      	; 0x828 <__vector_14+0xfa>
    {
        Buffer_Index = 0;
 822:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Buffer_Index>
 826:	03 c0       	rjmp	.+6      	; 0x82e <__vector_14+0x100>
    }
    else
    {
        Buffer_Index++;
 828:	3f 5f       	subi	r19, 0xFF	; 255
 82a:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
 82e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Buffer_Index>
 832:	82 2f       	mov	r24, r18
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	82 0f       	add	r24, r18
 838:	91 1d       	adc	r25, r1
 83a:	82 0f       	add	r24, r18
 83c:	91 1d       	adc	r25, r1
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	fc 01       	movw	r30, r24
 844:	e7 5b       	subi	r30, 0xB7	; 183
 846:	fe 4f       	sbci	r31, 0xFE	; 254
 848:	80 81       	ld	r24, Z
 84a:	8f 3f       	cpi	r24, 0xFF	; 255
 84c:	31 f0       	breq	.+12     	; 0x85a <__vector_14+0x12c>
    {
        Post_Event(EVT_SPI_START);
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	78 e0       	ldi	r23, 0x08	; 8
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e4       	ldi	r23, 0x40	; 64
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
 888:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Current_State>
 88c:	08 95       	ret

0000088e <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
 88e:	ed e8       	ldi	r30, 0x8D	; 141
 890:	f1 e0       	ldi	r31, 0x01	; 1
 892:	a1 e9       	ldi	r26, 0x91	; 145
 894:	b1 e0       	ldi	r27, 0x01	; 1
 896:	85 ef       	ldi	r24, 0xF5	; 245
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	11 82       	std	Z+1, r1	; 0x01
 89c:	10 82       	st	Z, r1
 89e:	13 82       	std	Z+3, r1	; 0x03
 8a0:	12 82       	std	Z+2, r1	; 0x02
 8a2:	1c 92       	st	X, r1
 8a4:	15 82       	std	Z+5, r1	; 0x05
 8a6:	16 82       	std	Z+6, r1	; 0x06
 8a8:	17 82       	std	Z+7, r1	; 0x07
 8aa:	10 86       	std	Z+8, r1	; 0x08
 8ac:	11 86       	std	Z+9, r1	; 0x09
 8ae:	12 86       	std	Z+10, r1	; 0x0a
 8b0:	13 86       	std	Z+11, r1	; 0x0b
 8b2:	14 86       	std	Z+12, r1	; 0x0c
 8b4:	3d 96       	adiw	r30, 0x0d	; 13
 8b6:	1d 96       	adiw	r26, 0x0d	; 13
 8b8:	e8 17       	cp	r30, r24
 8ba:	f9 07       	cpc	r31, r25
 8bc:	71 f7       	brne	.-36     	; 0x89a <Init_Timer_Module+0xc>
 8be:	15 bc       	out	0x25, r1	; 37
 8c0:	16 bc       	out	0x26, r1	; 38
 8c2:	18 bc       	out	0x28, r1	; 40
 8c4:	88 b5       	in	r24, 0x28	; 40
 8c6:	83 58       	subi	r24, 0x83	; 131
 8c8:	88 bd       	out	0x28, r24	; 40
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 8d0:	16 bc       	out	0x26, r1	; 38
 8d2:	86 b5       	in	r24, 0x26	; 38
 8d4:	83 60       	ori	r24, 0x03	; 3
 8d6:	86 bd       	out	0x26, r24	; 38
 8d8:	08 95       	ret

000008da <Register_Timer>:
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <Timers>
 8e2:	d0 91 8e 01 	lds	r29, 0x018E	; 0x80018e <Timers+0x1>
 8e6:	c8 17       	cp	r28, r24
 8e8:	d9 07       	cpc	r29, r25
 8ea:	09 f4       	brne	.+2      	; 0x8ee <Register_Timer+0x14>
 8ec:	40 c0       	rjmp	.+128    	; 0x96e <Register_Timer+0x94>
 8ee:	ad e8       	ldi	r26, 0x8D	; 141
 8f0:	b1 e0       	ldi	r27, 0x01	; 1
 8f2:	48 ee       	ldi	r20, 0xE8	; 232
 8f4:	51 e0       	ldi	r21, 0x01	; 1
 8f6:	fd 01       	movw	r30, r26
 8f8:	25 85       	ldd	r18, Z+13	; 0x0d
 8fa:	36 85       	ldd	r19, Z+14	; 0x0e
 8fc:	28 17       	cp	r18, r24
 8fe:	39 07       	cpc	r19, r25
 900:	b1 f1       	breq	.+108    	; 0x96e <Register_Timer+0x94>
 902:	3d 96       	adiw	r30, 0x0d	; 13
 904:	e4 17       	cp	r30, r20
 906:	f5 07       	cpc	r31, r21
 908:	b9 f7       	brne	.-18     	; 0x8f8 <Register_Timer+0x1e>
 90a:	2c c0       	rjmp	.+88     	; 0x964 <Register_Timer+0x8a>
 90c:	1d 96       	adiw	r26, 0x0d	; 13
 90e:	4d 91       	ld	r20, X+
 910:	5c 91       	ld	r21, X
 912:	1e 97       	sbiw	r26, 0x0e	; 14
 914:	45 2b       	or	r20, r21
 916:	f9 f4       	brne	.+62     	; 0x956 <Register_Timer+0x7c>
 918:	02 c0       	rjmp	.+4      	; 0x91e <Register_Timer+0x44>
 91a:	20 e0       	ldi	r18, 0x00	; 0
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	f9 01       	movw	r30, r18
 920:	ee 0f       	add	r30, r30
 922:	ff 1f       	adc	r31, r31
 924:	e2 0f       	add	r30, r18
 926:	f3 1f       	adc	r31, r19
 928:	ee 0f       	add	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	ee 0f       	add	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	2e 0f       	add	r18, r30
 932:	3f 1f       	adc	r19, r31
 934:	f9 01       	movw	r30, r18
 936:	e3 57       	subi	r30, 0x73	; 115
 938:	fe 4f       	sbci	r31, 0xFE	; 254
 93a:	91 83       	std	Z+1, r25	; 0x01
 93c:	80 83       	st	Z, r24
 93e:	73 83       	std	Z+3, r23	; 0x03
 940:	62 83       	std	Z+2, r22	; 0x02
 942:	14 82       	std	Z+4, r1	; 0x04
 944:	15 82       	std	Z+5, r1	; 0x05
 946:	16 82       	std	Z+6, r1	; 0x06
 948:	17 82       	std	Z+7, r1	; 0x07
 94a:	10 86       	std	Z+8, r1	; 0x08
 94c:	11 86       	std	Z+9, r1	; 0x09
 94e:	12 86       	std	Z+10, r1	; 0x0a
 950:	13 86       	std	Z+11, r1	; 0x0b
 952:	14 86       	std	Z+12, r1	; 0x0c
 954:	0c c0       	rjmp	.+24     	; 0x96e <Register_Timer+0x94>
 956:	2f 5f       	subi	r18, 0xFF	; 255
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	1d 96       	adiw	r26, 0x0d	; 13
 95c:	28 30       	cpi	r18, 0x08	; 8
 95e:	31 05       	cpc	r19, r1
 960:	a9 f6       	brne	.-86     	; 0x90c <Register_Timer+0x32>
 962:	05 c0       	rjmp	.+10     	; 0x96e <Register_Timer+0x94>
 964:	cd 2b       	or	r28, r29
 966:	c9 f2       	breq	.-78     	; 0x91a <Register_Timer+0x40>
 968:	21 e0       	ldi	r18, 0x01	; 1
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	cf cf       	rjmp	.-98     	; 0x90c <Register_Timer+0x32>
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <Start_Timer>:
 974:	cf 92       	push	r12
 976:	df 92       	push	r13
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <Timers>
 980:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <Timers+0x1>
 984:	28 17       	cp	r18, r24
 986:	39 07       	cpc	r19, r25
 988:	51 f0       	breq	.+20     	; 0x99e <Start_Timer+0x2a>
 98a:	ed e8       	ldi	r30, 0x8D	; 141
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	a5 85       	ldd	r26, Z+13	; 0x0d
 994:	b6 85       	ldd	r27, Z+14	; 0x0e
 996:	a8 17       	cp	r26, r24
 998:	b9 07       	cpc	r27, r25
 99a:	11 f5       	brne	.+68     	; 0x9e0 <Start_Timer+0x6c>
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <Start_Timer+0x2e>
 99e:	20 e0       	ldi	r18, 0x00	; 0
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	f9 01       	movw	r30, r18
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	e2 0f       	add	r30, r18
 9aa:	f3 1f       	adc	r31, r19
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	2e 0f       	add	r18, r30
 9b6:	3f 1f       	adc	r19, r31
 9b8:	f9 01       	movw	r30, r18
 9ba:	e3 57       	subi	r30, 0x73	; 115
 9bc:	fe 4f       	sbci	r31, 0xFE	; 254
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	84 83       	std	Z+4, r24	; 0x04
 9c2:	15 82       	std	Z+5, r1	; 0x05
 9c4:	16 82       	std	Z+6, r1	; 0x06
 9c6:	17 82       	std	Z+7, r1	; 0x07
 9c8:	10 86       	std	Z+8, r1	; 0x08
 9ca:	6a 01       	movw	r12, r20
 9cc:	7b 01       	movw	r14, r22
 9ce:	cc 0c       	add	r12, r12
 9d0:	dd 1c       	adc	r13, r13
 9d2:	ee 1c       	adc	r14, r14
 9d4:	ff 1c       	adc	r15, r15
 9d6:	c1 86       	std	Z+9, r12	; 0x09
 9d8:	d2 86       	std	Z+10, r13	; 0x0a
 9da:	e3 86       	std	Z+11, r14	; 0x0b
 9dc:	f4 86       	std	Z+12, r15	; 0x0c
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <Start_Timer+0x78>
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	3d 96       	adiw	r30, 0x0d	; 13
 9e6:	28 30       	cpi	r18, 0x08	; 8
 9e8:	31 05       	cpc	r19, r1
 9ea:	99 f6       	brne	.-90     	; 0x992 <Start_Timer+0x1e>
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	08 95       	ret

000009f6 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 9f6:	1f 92       	push	r1
 9f8:	0f 92       	push	r0
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	0f 92       	push	r0
 9fe:	11 24       	eor	r1, r1
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	2f 93       	push	r18
 a0a:	3f 93       	push	r19
 a0c:	4f 93       	push	r20
 a0e:	5f 93       	push	r21
 a10:	6f 93       	push	r22
 a12:	7f 93       	push	r23
 a14:	8f 93       	push	r24
 a16:	9f 93       	push	r25
 a18:	af 93       	push	r26
 a1a:	bf 93       	push	r27
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
 a24:	88 b5       	in	r24, 0x28	; 40
 a26:	83 58       	subi	r24, 0x83	; 131
 a28:	88 bd       	out	0x28, r24	; 40
 a2a:	01 e9       	ldi	r16, 0x91	; 145
 a2c:	11 e0       	ldi	r17, 0x01	; 1
 a2e:	cd e8       	ldi	r28, 0x8D	; 141
 a30:	d1 e0       	ldi	r29, 0x01	; 1
 a32:	0f 2e       	mov	r0, r31
 a34:	f5 ef       	ldi	r31, 0xF5	; 245
 a36:	ef 2e       	mov	r14, r31
 a38:	f1 e0       	ldi	r31, 0x01	; 1
 a3a:	ff 2e       	mov	r15, r31
 a3c:	f0 2d       	mov	r31, r0
 a3e:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
 a40:	80 81       	ld	r24, Z
 a42:	88 23       	and	r24, r24
 a44:	81 f1       	breq	.+96     	; 0xaa6 <__vector_10+0xb0>
 a46:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
 a48:	89 85       	ldd	r24, Y+9	; 0x09
 a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
 a4c:	ab 85       	ldd	r26, Y+11	; 0x0b
 a4e:	bc 85       	ldd	r27, Y+12	; 0x0c
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	a1 05       	cpc	r26, r1
 a54:	b1 05       	cpc	r27, r1
 a56:	b9 f0       	breq	.+46     	; 0xa86 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
 a58:	4d 81       	ldd	r20, Y+5	; 0x05
 a5a:	5e 81       	ldd	r21, Y+6	; 0x06
 a5c:	6f 81       	ldd	r22, Y+7	; 0x07
 a5e:	78 85       	ldd	r23, Y+8	; 0x08
 a60:	4f 5f       	subi	r20, 0xFF	; 255
 a62:	5f 4f       	sbci	r21, 0xFF	; 255
 a64:	6f 4f       	sbci	r22, 0xFF	; 255
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	4d 83       	std	Y+5, r20	; 0x05
 a6a:	5e 83       	std	Y+6, r21	; 0x06
 a6c:	6f 83       	std	Y+7, r22	; 0x07
 a6e:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
 a70:	01 97       	sbiw	r24, 0x01	; 1
 a72:	a1 09       	sbc	r26, r1
 a74:	b1 09       	sbc	r27, r1
 a76:	89 87       	std	Y+9, r24	; 0x09
 a78:	9a 87       	std	Y+10, r25	; 0x0a
 a7a:	ab 87       	std	Y+11, r26	; 0x0b
 a7c:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
 a7e:	89 2b       	or	r24, r25
 a80:	8a 2b       	or	r24, r26
 a82:	8b 2b       	or	r24, r27
 a84:	81 f4       	brne	.+32     	; 0xaa6 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
 a86:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
 a88:	d9 01       	movw	r26, r18
 a8a:	12 96       	adiw	r26, 0x02	; 2
 a8c:	ed 91       	ld	r30, X+
 a8e:	fc 91       	ld	r31, X
 a90:	13 97       	sbiw	r26, 0x03	; 3
 a92:	30 97       	sbiw	r30, 0x00	; 0
 a94:	41 f0       	breq	.+16     	; 0xaa6 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
 a96:	8d 91       	ld	r24, X+
 a98:	9c 91       	ld	r25, X
 a9a:	dc 01       	movw	r26, r24
 a9c:	6d 91       	ld	r22, X+
 a9e:	7d 91       	ld	r23, X+
 aa0:	8d 91       	ld	r24, X+
 aa2:	9c 91       	ld	r25, X
 aa4:	09 95       	icall
 aa6:	03 5f       	subi	r16, 0xF3	; 243
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
 aac:	ce 15       	cp	r28, r14
 aae:	df 05       	cpc	r29, r15
 ab0:	31 f6       	brne	.-116    	; 0xa3e <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
 ab2:	ff 91       	pop	r31
 ab4:	ef 91       	pop	r30
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	bf 91       	pop	r27
 abc:	af 91       	pop	r26
 abe:	9f 91       	pop	r25
 ac0:	8f 91       	pop	r24
 ac2:	7f 91       	pop	r23
 ac4:	6f 91       	pop	r22
 ac6:	5f 91       	pop	r21
 ac8:	4f 91       	pop	r20
 aca:	3f 91       	pop	r19
 acc:	2f 91       	pop	r18
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	ff 90       	pop	r15
 ad4:	ef 90       	pop	r14
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti

00000ae0 <UART_Initialize>:
        address

****************************************************************************/
void UART_Initialize()
{    	
	DDRA &= (1<<PINA0);
 ae0:	81 b1       	in	r24, 0x01	; 1
 ae2:	81 70       	andi	r24, 0x01	; 1
 ae4:	81 b9       	out	0x01, r24	; 1
	
	// Reset UART
	LINCR |= (1<<LSWRES);
 ae6:	e8 ec       	ldi	r30, 0xC8	; 200
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	80 68       	ori	r24, 0x80	; 128
 aee:	80 83       	st	Z, r24
	
    // Set up LINCR with
	// - Command Mode = TxRx Enabled
	// - UART Enable
	// - Odd Parity	
	LINCR = (1<<LCMD0)|(1<<LCMD1)|(1<<LCMD2)|(1<<LENA)|(0<<LCONF0)|(0<<LCONF1);
 af0:	8f e0       	ldi	r24, 0x0F	; 15
 af2:	80 83       	st	Z, r24
	
	// Set up LINBTR
	LINBTR = (1<<LDISR);
 af4:	80 e8       	ldi	r24, 0x80	; 128
 af6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	
	// 19200 baud
	LINBRRL = 12;//(1<<LDIV0);
 afa:	8c e0       	ldi	r24, 0x0C	; 12
 afc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
	LINBRRH = 0;
 b00:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    
	// LIN Interrupt Enable
	//LINENIR = (1<<LENERR)|(1<<LENTXOK)|(1<<LENRXOK);
	LINENIR = (1<<LENTXOK)|(1<<LENRXOK);
 b04:	83 e0       	ldi	r24, 0x03	; 3
 b06:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	// Reset indices
    Buffer_Index = 0;
 b0a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Buffer_Index>
    TX_Index = 0;
 b0e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <TX_Index>
	RX_Index = 0;
 b12:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <RX_Index>
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
 b16:	ed e0       	ldi	r30, 0x0D	; 13
 b18:	f2 e0       	ldi	r31, 0x02	; 2
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	80 83       	st	Z, r24
 b1e:	81 83       	std	Z+1, r24	; 0x01
 b20:	82 83       	std	Z+2, r24	; 0x02
 b22:	83 83       	std	Z+3, r24	; 0x03
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
 b24:	a9 e0       	ldi	r26, 0x09	; 9
 b26:	b2 e0       	ldi	r27, 0x02	; 2
 b28:	11 96       	adiw	r26, 0x01	; 1
 b2a:	1c 92       	st	X, r1
 b2c:	1e 92       	st	-X, r1
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
 b2e:	84 83       	std	Z+4, r24	; 0x04
 b30:	85 83       	std	Z+5, r24	; 0x05
 b32:	86 83       	std	Z+6, r24	; 0x06
 b34:	87 83       	std	Z+7, r24	; 0x07
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
 b36:	13 96       	adiw	r26, 0x03	; 3
 b38:	1c 92       	st	X, r1
 b3a:	1e 92       	st	-X, r1
 b3c:	12 97       	sbiw	r26, 0x02	; 2
 b3e:	08 95       	ret

00000b40 <UART_Start_Command>:

****************************************************************************/

void UART_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE];
 b40:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	ee 0f       	add	r30, r30
 b48:	ff 1f       	adc	r31, r31
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	e3 5f       	subi	r30, 0xF3	; 243
 b50:	fd 4f       	sbci	r31, 0xFD	; 253
 b52:	80 81       	ld	r24, Z
 b54:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][UART_RX_LENGTH_BYTE];
 b58:	81 81       	ldd	r24, Z+1	; 0x01
 b5a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
 b5e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
 b62:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <TX_Index>
	
	// State in TX
	In_Tx = true;
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <In_Tx>
 b6c:	08 95       	ret

00000b6e <UART_End_Command>:
        Ends UART Transmission by setting SS high

****************************************************************************/

void UART_End_Command (void)
{
 b6e:	08 95       	ret

00000b70 <UART_Transmit>:

****************************************************************************/

void UART_Transmit (void)
{
	if (!modem_init)
 b70:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <modem_init>
 b74:	81 11       	cpse	r24, r1
 b76:	20 c0       	rjmp	.+64     	; 0xbb8 <UART_Transmit+0x48>
	{
		// Send byte out
		LINDAT = Command_Buffer[Buffer_Index][TX_Index + UART_LENGTH_BYTES];
 b78:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TX_Index>
 b82:	ee 0f       	add	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	ee 0f       	add	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	e3 5f       	subi	r30, 0xF3	; 243
 b8c:	fd 4f       	sbci	r31, 0xFD	; 253
 b8e:	e8 0f       	add	r30, r24
 b90:	f1 1d       	adc	r31, r1
 b92:	82 81       	ldd	r24, Z+2	; 0x02
 b94:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
	
		if (In_Tx)
 b98:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <In_Tx>
 b9c:	88 23       	and	r24, r24
 b9e:	31 f0       	breq	.+12     	; 0xbac <UART_Transmit+0x3c>
		{
			// Increment Transmit Index
			TX_Index++;		
 ba0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TX_Index>
 ba4:	8f 5f       	subi	r24, 0xFF	; 255
 ba6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TX_Index>
 baa:	08 95       	ret
		}
		else
		{
			// Increment Transmit Index
			TX_Index++;
 bac:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TX_Index>
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TX_Index>
 bb6:	08 95       	ret
		}
	}
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
 bb8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Text_Index>
 bbc:	e8 2f       	mov	r30, r24
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	e0 5b       	subi	r30, 0xB0	; 176
 bc2:	ff 4f       	sbci	r31, 0xFF	; 255
 bc4:	94 91       	lpm	r25, Z
 bc6:	9f 32       	cpi	r25, 0x2F	; 47
 bc8:	29 f4       	brne	.+10     	; 0xbd4 <UART_Transmit+0x64>
		{
			set_as = '/r';
			Text_Index++;	
 bca:	8f 5f       	subi	r24, 0xFF	; 255
 bcc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Text_Index>
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
		{
			set_as = '/r';
 bd0:	e2 e7       	ldi	r30, 0x72	; 114
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <UART_Transmit+0x66>
			Text_Index++;	
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
 bd4:	e4 91       	lpm	r30, Z
		}
		LINDAT = set_as;
 bd6:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		Text_Index++;
 bda:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Text_Index>
 bde:	8f 5f       	subi	r24, 0xFF	; 255
 be0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Text_Index>
 be4:	08 95       	ret

00000be6 <Write_UART>:
    Description
        Fills in current command into UART command buffer
****************************************************************************/

void Write_UART(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive, bool Init_Seq)
{
 be6:	cf 92       	push	r12
 be8:	df 92       	push	r13
 bea:	ef 92       	push	r14
 bec:	ff 92       	push	r15
 bee:	0f 93       	push	r16
 bf0:	1f 93       	push	r17
 bf2:	cf 93       	push	r28
 bf4:	df 93       	push	r29
 bf6:	d8 2e       	mov	r13, r24
 bf8:	c6 2e       	mov	r12, r22
 bfa:	ea 01       	movw	r28, r20
 bfc:	79 01       	movw	r14, r18
	if (!Init_Seq)
 bfe:	01 11       	cpse	r16, r1
 c00:	4f c0       	rjmp	.+158    	; 0xca0 <Write_UART+0xba>
	{
		modem_init = false;
 c02:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <modem_init>
		counter_value = query_counter();
 c06:	0e 94 11 02 	call	0x422	; 0x422 <query_counter>
 c0a:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <counter_value>
 c0e:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <counter_value+0x1>
 c12:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <counter_value+0x2>
 c16:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <counter_value+0x3>
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
 c1a:	0d 2d       	mov	r16, r13
 c1c:	10 e0       	ldi	r17, 0x00	; 0
 c1e:	0e 5f       	subi	r16, 0xFE	; 254
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
 c22:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Next_Available_Row>
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	de 01       	movw	r26, r28
 c2a:	12 97       	sbiw	r26, 0x02	; 2
 c2c:	c9 01       	movw	r24, r18
 c2e:	88 0f       	add	r24, r24
 c30:	99 1f       	adc	r25, r25
 c32:	88 0f       	add	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	e0 e0       	ldi	r30, 0x00	; 0
 c38:	f0 e0       	ldi	r31, 0x00	; 0
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
 c3a:	9c 01       	movw	r18, r24
 c3c:	23 5f       	subi	r18, 0xF3	; 243
 c3e:	3d 4f       	sbci	r19, 0xFD	; 253
 c40:	a9 01       	movw	r20, r18
 c42:	4f 5f       	subi	r20, 0xFF	; 255
 c44:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
 c46:	30 97       	sbiw	r30, 0x00	; 0
 c48:	19 f4       	brne	.+6      	; 0xc50 <Write_UART+0x6a>
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
 c4a:	e9 01       	movw	r28, r18
 c4c:	d8 82       	st	Y, r13
 c4e:	0d c0       	rjmp	.+26     	; 0xc6a <Write_UART+0x84>
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
 c50:	e1 30       	cpi	r30, 0x01	; 1
 c52:	f1 05       	cpc	r31, r1
 c54:	19 f4       	brne	.+6      	; 0xc5c <Write_UART+0x76>
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
 c56:	ea 01       	movw	r28, r20
 c58:	c8 82       	st	Y, r12
 c5a:	07 c0       	rjmp	.+14     	; 0xc6a <Write_UART+0x84>
			}
			// Fill in remaining data to TX
			else
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
 c5c:	6c 91       	ld	r22, X
 c5e:	ef 01       	movw	r28, r30
 c60:	c8 0f       	add	r28, r24
 c62:	d9 1f       	adc	r29, r25
 c64:	c3 5f       	subi	r28, 0xF3	; 243
 c66:	dd 4f       	sbci	r29, 0xFD	; 253
 c68:	68 83       	st	Y, r22
	{
		modem_init = false;
		counter_value = query_counter();
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
 c6a:	31 96       	adiw	r30, 0x01	; 1
 c6c:	11 96       	adiw	r26, 0x01	; 1
 c6e:	e0 17       	cp	r30, r16
 c70:	f1 07       	cpc	r31, r17
 c72:	4c f3       	brlt	.-46     	; 0xc46 <Write_UART+0x60>
 c74:	2a c0       	rjmp	.+84     	; 0xcca <Write_UART+0xe4>
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
			}
		}
		// If reached Command Buffer end
		if (Next_Available_Row == UART_COMMAND_BUFFER_SIZE - 1)
 c76:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Next_Available_Row>
 c7a:	81 30       	cpi	r24, 0x01	; 1
 c7c:	19 f4       	brne	.+6      	; 0xc84 <Write_UART+0x9e>
		{
			Next_Available_Row = 0;
 c7e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Next_Available_Row>
 c82:	03 c0       	rjmp	.+6      	; 0xc8a <Write_UART+0xa4>
		}
		else
		{
			Next_Available_Row++;
 c84:	8f 5f       	subi	r24, 0xFF	; 255
 c86:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Next_Available_Row>
		}
		// If UART is currently idling, start transmission
		if (Query_UART_State() == NORMAL_UART_STATE)
 c8a:	0e 94 93 07 	call	0xf26	; 0xf26 <Query_UART_State>
 c8e:	81 11       	cpse	r24, r1
 c90:	1f c0       	rjmp	.+62     	; 0xcd0 <Write_UART+0xea>
		{
			Post_Event(EVT_UART_START);
 c92:	60 e8       	ldi	r22, 0x80	; 128
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
 c9e:	18 c0       	rjmp	.+48     	; 0xcd0 <Write_UART+0xea>
		}
	}
	else
	{
		modem_init = true;
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <modem_init>
		Text_Index = 0;
 ca6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Text_Index>
		UART_Transmit();
 caa:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Transmit>
 cae:	10 c0       	rjmp	.+32     	; 0xcd0 <Write_UART+0xea>
		if (RX_Length > 0)
		{
			for (int i = 0; i < RX_Length; i++)
			{
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
 cb0:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <Next_Available_Row>
 cb4:	f0 e0       	ldi	r31, 0x00	; 0
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	e7 5f       	subi	r30, 0xF7	; 247
 cbc:	fd 4f       	sbci	r31, 0xFD	; 253
 cbe:	d7 01       	movw	r26, r14
 cc0:	8d 91       	ld	r24, X+
 cc2:	9c 91       	ld	r25, X
 cc4:	91 83       	std	Z+1, r25	; 0x01
 cc6:	80 83       	st	Z, r24
 cc8:	d6 cf       	rjmp	.-84     	; 0xc76 <Write_UART+0x90>
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
			}
		}
		// Data is expected to be received
		if (RX_Length > 0)
 cca:	c1 10       	cpse	r12, r1
 ccc:	f1 cf       	rjmp	.-30     	; 0xcb0 <Write_UART+0xca>
 cce:	d3 cf       	rjmp	.-90     	; 0xc76 <Write_UART+0x90>
	{
		modem_init = true;
		Text_Index = 0;
		UART_Transmit();
	}	
}
 cd0:	df 91       	pop	r29
 cd2:	cf 91       	pop	r28
 cd4:	1f 91       	pop	r17
 cd6:	0f 91       	pop	r16
 cd8:	ff 90       	pop	r15
 cda:	ef 90       	pop	r14
 cdc:	df 90       	pop	r13
 cde:	cf 90       	pop	r12
 ce0:	08 95       	ret

00000ce2 <__vector_12>:
        Handles UART transmission completed interrupts

****************************************************************************/

ISR(LIN_TC_vect)
{
 ce2:	1f 92       	push	r1
 ce4:	0f 92       	push	r0
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	0f 92       	push	r0
 cea:	11 24       	eor	r1, r1
 cec:	2f 93       	push	r18
 cee:	3f 93       	push	r19
 cf0:	4f 93       	push	r20
 cf2:	5f 93       	push	r21
 cf4:	6f 93       	push	r22
 cf6:	7f 93       	push	r23
 cf8:	8f 93       	push	r24
 cfa:	9f 93       	push	r25
 cfc:	af 93       	push	r26
 cfe:	bf 93       	push	r27
 d00:	ef 93       	push	r30
 d02:	ff 93       	push	r31
	LINSIR = (1<<3)|(1<<2)|(1<<1)|(1<<0);
 d04:	8f e0       	ldi	r24, 0x0F	; 15
 d06:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	
	if (!modem_init && !In_Tx)
 d0a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <modem_init>
 d0e:	81 11       	cpse	r24, r1
 d10:	a2 c0       	rjmp	.+324    	; 0xe56 <__vector_12+0x174>
 d12:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <In_Tx>
 d16:	81 11       	cpse	r24, r1
 d18:	2e c0       	rjmp	.+92     	; 0xd76 <__vector_12+0x94>
	{
		if (first_byte_T && second_byte_slash_n && third_slash_r)
 d1a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <first_byte_T>
 d1e:	88 23       	and	r24, r24
 d20:	d9 f0       	breq	.+54     	; 0xd58 <__vector_12+0x76>
 d22:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <second_byte_slash_n>
 d26:	88 23       	and	r24, r24
 d28:	b9 f0       	breq	.+46     	; 0xd58 <__vector_12+0x76>
 d2a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <third_slash_r>
 d2e:	88 23       	and	r24, r24
 d30:	99 f0       	breq	.+38     	; 0xd58 <__vector_12+0x76>
		{
			Modem_Recv_Data[byte_space_counter - 1] = LINDAT;
 d32:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <byte_space_counter>
 d36:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
 d3a:	e8 2f       	mov	r30, r24
 d3c:	f0 e0       	ldi	r31, 0x00	; 0
 d3e:	ec 50       	subi	r30, 0x0C	; 12
 d40:	fe 4f       	sbci	r31, 0xFE	; 254
 d42:	90 83       	st	Z, r25
			if (byte_space_counter >= MAX_MODEM_RECEIVE + 1)
 d44:	85 30       	cpi	r24, 0x05	; 5
 d46:	08 f4       	brcc	.+2      	; 0xd4a <__vector_12+0x68>
 d48:	8f c0       	rjmp	.+286    	; 0xe68 <__vector_12+0x186>
			{
				first_byte_T = false;
 d4a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <first_byte_T>
				second_byte_slash_n = false;
 d4e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <second_byte_slash_n>
				third_slash_r = false;
 d52:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <third_slash_r>
 d56:	88 c0       	rjmp	.+272    	; 0xe68 <__vector_12+0x186>
			}
		}
		else
		{
			uint8_t Current_Read = LINDAT;
 d58:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
 d5c:	84 35       	cpi	r24, 0x54	; 84
 d5e:	29 f4       	brne	.+10     	; 0xd6a <__vector_12+0x88>
			{
				byte_space_counter = 0;
 d60:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <byte_space_counter>
				first_byte_T = true;
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <first_byte_T>
			if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == '/r')
			{
				third_slash_r = true;
				byte_space_counter = 0;
			}
			byte_space_counter++;
 d6a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <byte_space_counter>
 d6e:	8f 5f       	subi	r24, 0xFF	; 255
 d70:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <byte_space_counter>
 d74:	79 c0       	rjmp	.+242    	; 0xe68 <__vector_12+0x186>
		{
			// Once a transmit has been completed
			if (In_Tx)
			{
				// If more bytes left to transmit post transmission event
				if (TX_Index <= Expected_TX_Length)
 d76:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <TX_Index>
 d7a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <Expected_TX_Length>
 d7e:	89 17       	cp	r24, r25
 d80:	a0 f0       	brcs	.+40     	; 0xdaa <__vector_12+0xc8>
				{
					if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
 d82:	98 13       	cpse	r25, r24
 d84:	07 c0       	rjmp	.+14     	; 0xd94 <__vector_12+0xb2>
 d86:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Expected_RX_Length>
 d8a:	81 11       	cpse	r24, r1
 d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__vector_12+0xb2>
					{
						In_Tx = false;
 d8e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <In_Tx>
 d92:	0d c0       	rjmp	.+26     	; 0xdae <__vector_12+0xcc>
					}
					else
					{
						Post_Event(EVT_UART_SEND_BYTE);
 d94:	60 e0       	ldi	r22, 0x00	; 0
 d96:	71 e0       	ldi	r23, 0x01	; 1
 d98:	80 e0       	ldi	r24, 0x00	; 0
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
				{
					In_Tx = false;
				}
			}
			
			if (!In_Tx)
 da0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <In_Tx>
 da4:	81 11       	cpse	r24, r1
 da6:	60 c0       	rjmp	.+192    	; 0xe68 <__vector_12+0x186>
 da8:	02 c0       	rjmp	.+4      	; 0xdae <__vector_12+0xcc>
						Post_Event(EVT_UART_SEND_BYTE);
					}
				}
				else
				{
					In_Tx = false;
 daa:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <In_Tx>
				}
			}
			
			if (!In_Tx)
			{
				if (Expected_RX_Length > 0)
 dae:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Expected_RX_Length>
 db2:	99 23       	and	r25, r25
 db4:	c1 f0       	breq	.+48     	; 0xde6 <__vector_12+0x104>
				{
					*(Receive_List[Buffer_Index][RX_Index]) = LINDAT;
 db6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Index>
 dba:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <Buffer_Index>
 dbe:	e8 2f       	mov	r30, r24
 dc0:	f0 e0       	ldi	r31, 0x00	; 0
 dc2:	e2 0f       	add	r30, r18
 dc4:	f1 1d       	adc	r31, r1
 dc6:	ee 0f       	add	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	e7 5f       	subi	r30, 0xF7	; 247
 dcc:	fd 4f       	sbci	r31, 0xFD	; 253
 dce:	01 90       	ld	r0, Z+
 dd0:	f0 81       	ld	r31, Z
 dd2:	e0 2d       	mov	r30, r0
 dd4:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
 dd8:	20 83       	st	Z, r18
					RX_Index++;
 dda:	8f 5f       	subi	r24, 0xFF	; 255
 ddc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX_Index>
				if (RX_Index < Expected_RX_Length)
				{
					// Do Nothing
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
 de0:	89 17       	cp	r24, r25
 de2:	08 f4       	brcc	.+2      	; 0xde6 <__vector_12+0x104>
 de4:	41 c0       	rjmp	.+130    	; 0xe68 <__vector_12+0x186>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < UART_MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
 de6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <Buffer_Index>
 dea:	82 2f       	mov	r24, r18
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	fc 01       	movw	r30, r24
 df0:	ee 0f       	add	r30, r30
 df2:	ff 1f       	adc	r31, r31
 df4:	ee 0f       	add	r30, r30
 df6:	ff 1f       	adc	r31, r31
 df8:	e3 5f       	subi	r30, 0xF3	; 243
 dfa:	fd 4f       	sbci	r31, 0xFD	; 253
 dfc:	3f ef       	ldi	r19, 0xFF	; 255
 dfe:	30 83       	st	Z, r19
 e00:	31 83       	std	Z+1, r19	; 0x01
 e02:	32 83       	std	Z+2, r19	; 0x02
 e04:	33 83       	std	Z+3, r19	; 0x03
    }
    // Point current receive list row to NULL
    for (int i = 0; i < UART_MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
 e06:	88 0f       	add	r24, r24
 e08:	99 1f       	adc	r25, r25
 e0a:	fc 01       	movw	r30, r24
 e0c:	e7 5f       	subi	r30, 0xF7	; 247
 e0e:	fd 4f       	sbci	r31, 0xFD	; 253
 e10:	11 82       	std	Z+1, r1	; 0x01
 e12:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == UART_COMMAND_BUFFER_SIZE - 1)
 e14:	21 30       	cpi	r18, 0x01	; 1
 e16:	19 f4       	brne	.+6      	; 0xe1e <__vector_12+0x13c>
    {
        Buffer_Index = 0;
 e18:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Buffer_Index>
 e1c:	03 c0       	rjmp	.+6      	; 0xe24 <__vector_12+0x142>
    }
    else
    {
        Buffer_Index++;
 e1e:	2f 5f       	subi	r18, 0xFF	; 255
 e20:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE] != 0xFF)
 e24:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 e28:	f0 e0       	ldi	r31, 0x00	; 0
 e2a:	ee 0f       	add	r30, r30
 e2c:	ff 1f       	adc	r31, r31
 e2e:	ee 0f       	add	r30, r30
 e30:	ff 1f       	adc	r31, r31
 e32:	e3 5f       	subi	r30, 0xF3	; 243
 e34:	fd 4f       	sbci	r31, 0xFD	; 253
 e36:	80 81       	ld	r24, Z
 e38:	8f 3f       	cpi	r24, 0xFF	; 255
 e3a:	31 f0       	breq	.+12     	; 0xe48 <__vector_12+0x166>
    {
        Post_Event(EVT_UART_START);
 e3c:	60 e8       	ldi	r22, 0x80	; 128
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	80 e0       	ldi	r24, 0x00	; 0
 e42:	90 e0       	ldi	r25, 0x00	; 0
 e44:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
				{
					Update_Buffer_Index();
					Post_Event(EVT_UART_END);
 e48:	60 e0       	ldi	r22, 0x00	; 0
 e4a:	74 e0       	ldi	r23, 0x04	; 4
 e4c:	80 e0       	ldi	r24, 0x00	; 0
 e4e:	90 e0       	ldi	r25, 0x00	; 0
 e50:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
 e54:	09 c0       	rjmp	.+18     	; 0xe68 <__vector_12+0x186>
				}
			}
		}
		else
		{
			if (Text_Index >= sizeof(Init_Text)/sizeof(Init_Text[0]))
 e56:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Text_Index>
 e5a:	8f 38       	cpi	r24, 0x8F	; 143
 e5c:	18 f0       	brcs	.+6      	; 0xe64 <__vector_12+0x182>
			{
				modem_init = false;
 e5e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <modem_init>
 e62:	02 c0       	rjmp	.+4      	; 0xe68 <__vector_12+0x186>
			}
			else
			{
				UART_Transmit();
 e64:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Transmit>
			}
		}
	}	
}
 e68:	ff 91       	pop	r31
 e6a:	ef 91       	pop	r30
 e6c:	bf 91       	pop	r27
 e6e:	af 91       	pop	r26
 e70:	9f 91       	pop	r25
 e72:	8f 91       	pop	r24
 e74:	7f 91       	pop	r23
 e76:	6f 91       	pop	r22
 e78:	5f 91       	pop	r21
 e7a:	4f 91       	pop	r20
 e7c:	3f 91       	pop	r19
 e7e:	2f 91       	pop	r18
 e80:	0f 90       	pop	r0
 e82:	0f be       	out	0x3f, r0	; 63
 e84:	0f 90       	pop	r0
 e86:	1f 90       	pop	r1
 e88:	18 95       	reti

00000e8a <Init_UART_Service>:

****************************************************************************/
void Init_UART_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_UART_STATE;
 e8a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 e8e:	08 95       	ret

00000e90 <Run_UART_Service>:
        Processes events for UART Message transmit/receive

****************************************************************************/
void Run_UART_Service(uint32_t event_mask)
{
	switch(Current_State)
 e90:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <Current_State>
 e94:	21 30       	cpi	r18, 0x01	; 1
 e96:	a9 f0       	breq	.+42     	; 0xec2 <Run_UART_Service+0x32>
 e98:	18 f0       	brcs	.+6      	; 0xea0 <Run_UART_Service+0x10>
 e9a:	22 30       	cpi	r18, 0x02	; 2
 e9c:	89 f1       	breq	.+98     	; 0xf00 <Run_UART_Service+0x70>
 e9e:	08 95       	ret
    {	
		case NORMAL_UART_STATE:
			if (EVT_UART_START == event_mask)
 ea0:	60 38       	cpi	r22, 0x80	; 128
 ea2:	71 05       	cpc	r23, r1
 ea4:	81 05       	cpc	r24, r1
 ea6:	91 05       	cpc	r25, r1
 ea8:	e9 f5       	brne	.+122    	; 0xf24 <Run_UART_Service+0x94>
			{			
                // Initialize UART for particular command
                UART_Start_Command();
 eaa:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Start_Command>
				// Switch to sending state
				Current_State = SENDING_UART_STATE;
 eae:	81 e0       	ldi	r24, 0x01	; 1
 eb0:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_UART_SEND_BYTE);
 eb4:	60 e0       	ldi	r22, 0x00	; 0
 eb6:	71 e0       	ldi	r23, 0x01	; 1
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	90 e0       	ldi	r25, 0x00	; 0
 ebc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Post_Event>
 ec0:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_UART_SEND_BYTE == event_mask)
 ec2:	61 15       	cp	r22, r1
 ec4:	21 e0       	ldi	r18, 0x01	; 1
 ec6:	72 07       	cpc	r23, r18
 ec8:	81 05       	cpc	r24, r1
 eca:	91 05       	cpc	r25, r1
 ecc:	19 f4       	brne	.+6      	; 0xed4 <Run_UART_Service+0x44>
			{
    			UART_Transmit();
 ece:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Transmit>
 ed2:	08 95       	ret
			}
			else if (EVT_UART_RECV_BYTE == event_mask)
 ed4:	61 15       	cp	r22, r1
 ed6:	22 e0       	ldi	r18, 0x02	; 2
 ed8:	72 07       	cpc	r23, r18
 eda:	81 05       	cpc	r24, r1
 edc:	91 05       	cpc	r25, r1
 ede:	31 f4       	brne	.+12     	; 0xeec <Run_UART_Service+0x5c>
			{
                UART_Transmit();
 ee0:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Transmit>
				Current_State = RECEIVING_UART_STATE;				
 ee4:	82 e0       	ldi	r24, 0x02	; 2
 ee6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Current_State>
 eea:	08 95       	ret
			}
			else if (EVT_UART_END == event_mask)
 eec:	61 15       	cp	r22, r1
 eee:	74 40       	sbci	r23, 0x04	; 4
 ef0:	81 05       	cpc	r24, r1
 ef2:	91 05       	cpc	r25, r1
 ef4:	b9 f4       	brne	.+46     	; 0xf24 <Run_UART_Service+0x94>
			{
                UART_End_Command();
 ef6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <UART_End_Command>
				Current_State = NORMAL_UART_STATE;
 efa:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 efe:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_UART_RECV_BYTE == event_mask)
 f00:	61 15       	cp	r22, r1
 f02:	22 e0       	ldi	r18, 0x02	; 2
 f04:	72 07       	cpc	r23, r18
 f06:	81 05       	cpc	r24, r1
 f08:	91 05       	cpc	r25, r1
 f0a:	19 f4       	brne	.+6      	; 0xf12 <Run_UART_Service+0x82>
            {
                UART_Transmit();
 f0c:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Transmit>
 f10:	08 95       	ret
            }
            if (EVT_UART_END == event_mask)
 f12:	61 15       	cp	r22, r1
 f14:	74 40       	sbci	r23, 0x04	; 4
 f16:	81 05       	cpc	r24, r1
 f18:	91 05       	cpc	r25, r1
 f1a:	21 f4       	brne	.+8      	; 0xf24 <Run_UART_Service+0x94>
            {
                UART_End_Command();
 f1c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <UART_End_Command>
                Current_State = NORMAL_UART_STATE;
 f20:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 f24:	08 95       	ret

00000f26 <Query_UART_State>:
****************************************************************************/

UART_State_t Query_UART_State(void)
{
    return Current_State;
}
 f26:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Current_State>
 f2a:	08 95       	ret

00000f2c <_exit>:
 f2c:	f8 94       	cli

00000f2e <__stop_program>:
 f2e:	ff cf       	rjmp	.-2      	; 0xf2e <__stop_program>
