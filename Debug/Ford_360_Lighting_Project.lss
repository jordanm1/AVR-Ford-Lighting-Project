
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080010e  0080010e  0000104e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037ef  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001897  00000000  00000000  00004c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d64  00000000  00000000  000064c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  00008228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f36  00000000  00000000  00008af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dc0  00000000  00000000  00009a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000b7ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_1>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_9>
  28:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_10>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_12>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_14>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_15>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000050 <__trampolines_end>:
  50:	41 54       	subi	r20, 0x41	; 65
  52:	45 31       	cpi	r20, 0x15	; 21
  54:	2f 72       	andi	r18, 0x2F	; 47
  56:	41 54       	subi	r20, 0x41	; 65
  58:	5e 53       	subi	r21, 0x3E	; 62
  5a:	49 43       	sbci	r20, 0x39	; 57
  5c:	41 3d       	cpi	r20, 0xD1	; 209
  5e:	31 2c       	mov	r3, r1
  60:	33 2f       	mov	r19, r19
  62:	72 41       	sbci	r23, 0x12	; 18
  64:	54 5e       	subi	r21, 0xE4	; 228
  66:	53 49       	sbci	r21, 0x93	; 147
  68:	53 53       	subi	r21, 0x33	; 51
  6a:	3d 30       	cpi	r19, 0x0D	; 13
  6c:	2c 22       	and	r2, r28
  6e:	73 72       	andi	r23, 0x23	; 35
  70:	76 54       	subi	r23, 0x46	; 70
  72:	79 70       	andi	r23, 0x09	; 9
  74:	65 22       	and	r6, r21
  76:	2c 22       	and	r2, r28
  78:	73 6f       	ori	r23, 0xF3	; 243
  7a:	63 6b       	ori	r22, 0xB3	; 179
  7c:	65 74       	andi	r22, 0x45	; 69
  7e:	22 2f       	mov	r18, r18
  80:	72 41       	sbci	r23, 0x12	; 18
  82:	54 5e       	subi	r21, 0xE4	; 228
  84:	53 49       	sbci	r21, 0x93	; 147
  86:	53 53       	subi	r21, 0x33	; 51
  88:	3d 30       	cpi	r19, 0x0D	; 13
  8a:	2c 22       	and	r2, r28
  8c:	63 6f       	ori	r22, 0xF3	; 243
  8e:	6e 49       	sbci	r22, 0x9E	; 158
  90:	64 22       	and	r6, r20
  92:	2c 33       	cpi	r18, 0x3C	; 60
  94:	2f 72       	andi	r18, 0x2F	; 47
  96:	41 54       	subi	r20, 0x41	; 65
  98:	5e 53       	subi	r21, 0x3E	; 62
  9a:	49 53       	subi	r20, 0x39	; 57
  9c:	53 3d       	cpi	r21, 0xD3	; 211
  9e:	30 2c       	mov	r3, r0
  a0:	22 61       	ori	r18, 0x12	; 18
  a2:	64 64       	ori	r22, 0x44	; 68
  a4:	72 65       	ori	r23, 0x52	; 82
  a6:	73 73       	andi	r23, 0x33	; 51
  a8:	22 2c       	mov	r2, r2
  aa:	22 73       	andi	r18, 0x32	; 50
  ac:	6f 63       	ori	r22, 0x3F	; 63
  ae:	6b 74       	andi	r22, 0x4B	; 75
  b0:	63 70       	andi	r22, 0x03	; 3
  b2:	3a 2f       	mov	r19, r26
  b4:	2f 6c       	ori	r18, 0xCF	; 207
  b6:	69 73       	andi	r22, 0x39	; 57
  b8:	74 65       	ori	r23, 0x54	; 84
  ba:	6e 65       	ori	r22, 0x5E	; 94
  bc:	72 3a       	cpi	r23, 0xA2	; 162
  be:	32 30       	cpi	r19, 0x02	; 2
  c0:	30 30       	cpi	r19, 0x00	; 0
  c2:	3b 65       	ori	r19, 0x5B	; 91
  c4:	74 78       	andi	r23, 0x84	; 132
  c6:	3d 32       	cpi	r19, 0x2D	; 45
  c8:	36 3b       	cpi	r19, 0xB6	; 182
  ca:	61 75       	andi	r22, 0x51	; 81
  cc:	74 6f       	ori	r23, 0xF4	; 244
  ce:	63 6f       	ori	r22, 0xF3	; 243
  d0:	6e 6e       	ori	r22, 0xEE	; 238
  d2:	65 63       	ori	r22, 0x35	; 53
  d4:	74 3d       	cpi	r23, 0xD4	; 212
  d6:	31 22       	and	r3, r17
  d8:	2f 72       	andi	r18, 0x2F	; 47
  da:	41 54       	subi	r20, 0x41	; 65
  dc:	5e 53       	subi	r21, 0x3E	; 62
  de:	49 53       	subi	r20, 0x39	; 57
  e0:	4f 3d       	cpi	r20, 0xDF	; 223
  e2:	30 2f       	mov	r19, r16
  e4:	72 00       	.word	0x0072	; ????

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d2 e0       	ldi	r29, 0x02	; 2
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	ec ea       	ldi	r30, 0xAC	; 172
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	ae 30       	cpi	r26, 0x0E	; 14
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	ae e0       	ldi	r26, 0x0E	; 14
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	a6 31       	cpi	r26, 0x16	; 22
 114:	b2 07       	cpc	r27, r18
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	0e 94 a8 02 	call	0x550	; 0x550 <main>
 11c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
 140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
 172:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 176:	88 23       	and	r24, r24
 178:	19 f0       	breq	.+6      	; 0x180 <__vector_9+0x1e>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	39 f0       	breq	.+14     	; 0x18c <__vector_9+0x2a>
 17e:	0c c0       	rjmp	.+24     	; 0x198 <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
 180:	e3 e8       	ldi	r30, 0x83	; 131
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 62       	ori	r24, 0x20	; 32
 188:	80 83       	st	Z, r24
            break;
 18a:	06 c0       	rjmp	.+12     	; 0x198 <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
 18c:	e3 e8       	ldi	r30, 0x83	; 131
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
 196:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
 198:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
 19e:	83 70       	andi	r24, 0x03	; 3
 1a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <CAN_Read>:
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
}
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <CAN_Read+0x6>
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9b 01       	movw	r18, r22
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	99 83       	std	Y+1, r25	; 0x01
 1c4:	8a 83       	std	Y+2, r24	; 0x02
 1c6:	ae 01       	movw	r20, r28
 1c8:	4f 5f       	subi	r20, 0xFF	; 255
 1ca:	5f 4f       	sbci	r21, 0xFF	; 255
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 16 03 	call	0x62c	; 0x62c <Write_SPI>
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <CAN_Bit_Modify>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <CAN_Bit_Modify+0x6>
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <CAN_Bit_Modify+0x8>
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	95 e0       	ldi	r25, 0x05	; 5
 1ec:	99 83       	std	Y+1, r25	; 0x01
 1ee:	8a 83       	std	Y+2, r24	; 0x02
 1f0:	6b 83       	std	Y+3, r22	; 0x03
 1f2:	fa 01       	movw	r30, r20
 1f4:	80 81       	ld	r24, Z
 1f6:	8c 83       	std	Y+4, r24	; 0x04
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	ae 01       	movw	r20, r28
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	0e 94 16 03 	call	0x62c	; 0x62c <Write_SPI>
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(uint8_t** Recv_Data)
{
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	08 2f       	mov	r16, r24
 226:	19 2f       	mov	r17, r25
	RX_Data[0] = &Recv_Byte;
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <RX_Data+0x1>
 230:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <RX_Data>
	CAN_Read(MCP_RXB0DLC, RX_Data);
 234:	60 e1       	ldi	r22, 0x10	; 16
 236:	71 e0       	ldi	r23, 0x01	; 1
 238:	85 e6       	ldi	r24, 0x65	; 101
 23a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <CAN_Read>
	
	uint8_t Recv_Length = Recv_Byte;
 23e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Recv_Byte>
	
	for (int i = 0; i < Recv_Length; i++)
 242:	22 23       	and	r18, r18
 244:	c1 f0       	breq	.+48     	; 0x276 <CAN_Read_Message+0x5e>
 246:	c0 2f       	mov	r28, r16
 248:	d1 2f       	mov	r29, r17
 24a:	e0 2e       	mov	r14, r16
 24c:	f1 2e       	mov	r15, r17
 24e:	e2 0e       	add	r14, r18
 250:	f1 1c       	adc	r15, r1
 252:	e2 0e       	add	r14, r18
 254:	f1 1c       	adc	r15, r1
 256:	16 e6       	ldi	r17, 0x66	; 102
	{
		RX_Data[0] = Recv_Data[i];
 258:	89 91       	ld	r24, Y+
 25a:	99 91       	ld	r25, Y+
 25c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <RX_Data+0x1>
 260:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <RX_Data>
		CAN_Read(MCP_RXB0D0 + i, RX_Data);
 264:	60 e1       	ldi	r22, 0x10	; 16
 266:	71 e0       	ldi	r23, 0x01	; 1
 268:	81 2f       	mov	r24, r17
 26a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <CAN_Read>
 26e:	1f 5f       	subi	r17, 0xFF	; 255
	RX_Data[0] = &Recv_Byte;
	CAN_Read(MCP_RXB0DLC, RX_Data);
	
	uint8_t Recv_Length = Recv_Byte;
	
	for (int i = 0; i < Recv_Length; i++)
 270:	ce 15       	cp	r28, r14
 272:	df 05       	cpc	r29, r15
 274:	89 f7       	brne	.-30     	; 0x258 <CAN_Read_Message+0x40>
	{
		RX_Data[0] = Recv_Data[i];
		CAN_Read(MCP_RXB0D0 + i, RX_Data);
	}	
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	08 95       	ret

00000284 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17

****************************************************************************/
static bool is_event_pending(uint32_t event_mask)
{
    // If this event is pending
    if (event_mask == (Pending_Events & event_mask))
 290:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Pending_Events>
 294:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Pending_Events+0x1>
 298:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Pending_Events+0x2>
 29c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Pending_Events+0x3>
 2a0:	6b 01       	movw	r12, r22
 2a2:	7c 01       	movw	r14, r24
 2a4:	c0 22       	and	r12, r16
 2a6:	d1 22       	and	r13, r17
 2a8:	e2 22       	and	r14, r18
 2aa:	f3 22       	and	r15, r19
 2ac:	6c 15       	cp	r22, r12
 2ae:	7d 05       	cpc	r23, r13
 2b0:	8e 05       	cpc	r24, r14
 2b2:	9f 05       	cpc	r25, r15
 2b4:	a1 f4       	brne	.+40     	; 0x2de <process_event_if_pending+0x5a>
    {
        // Clear Event
        Pending_Events &= ~event_mask;
 2b6:	6b 01       	movw	r12, r22
 2b8:	7c 01       	movw	r14, r24
 2ba:	c0 94       	com	r12
 2bc:	d0 94       	com	r13
 2be:	e0 94       	com	r14
 2c0:	f0 94       	com	r15
 2c2:	0c 21       	and	r16, r12
 2c4:	1d 21       	and	r17, r13
 2c6:	2e 21       	and	r18, r14
 2c8:	3f 21       	and	r19, r15
 2ca:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <Pending_Events>
 2ce:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <Pending_Events+0x1>
 2d2:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Pending_Events+0x2>
 2d6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Pending_Events+0x3>
{
    // If event is pending
    if (is_event_pending(event_mask))
    {
        // Run the services with this event
        Run_Services(event_mask);
 2da:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Run_Services>
    }
}
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	08 95       	ret

000002ec <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
    // Set flag in event list
    Pending_Events |= event_mask;
 2f0:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Pending_Events>
 2f4:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Pending_Events+0x1>
 2f8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Pending_Events+0x2>
 2fc:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Pending_Events+0x3>
 300:	dc 01       	movw	r26, r24
 302:	cb 01       	movw	r24, r22
 304:	80 2b       	or	r24, r16
 306:	91 2b       	or	r25, r17
 308:	a2 2b       	or	r26, r18
 30a:	b3 2b       	or	r27, r19
 30c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Pending_Events>
 310:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Pending_Events+0x1>
 314:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <Pending_Events+0x2>
 318:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <Pending_Events+0x3>
}
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
 33a:	64 e0       	ldi	r22, 0x04	; 4
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
 346:	68 e0       	ldi	r22, 0x08	; 8
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
 352:	60 e1       	ldi	r22, 0x10	; 16
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
 35e:	60 e2       	ldi	r22, 0x20	; 32
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
 36a:	60 e4       	ldi	r22, 0x40	; 64
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
 376:	60 e8       	ldi	r22, 0x80	; 128
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	71 e0       	ldi	r23, 0x01	; 1
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	72 e0       	ldi	r23, 0x02	; 2
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	74 e0       	ldi	r23, 0x04	; 4
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	78 e0       	ldi	r23, 0x08	; 8
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e1       	ldi	r23, 0x10	; 16
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e2       	ldi	r23, 0x20	; 32
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e4       	ldi	r23, 0x40	; 64
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 42 01 	call	0x284	; 0x284 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
 3d6:	a5 cf       	rjmp	.-182    	; 0x322 <Run_Events>

000003d8 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
 3d8:	0e 94 40 04 	call	0x880	; 0x880 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
 3dc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Init_Modem_Service>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
 3e0:	0e 94 83 07 	call	0xf06	; 0xf06 <Init_UART_Service>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
 3e4:	0e 94 08 02 	call	0x410	; 0x410 <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
 3e8:	0e 94 97 02 	call	0x52e	; 0x52e <Init_LIN_XCVR_WD_Kicker>
 3ec:	08 95       	ret

000003ee <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	6b 01       	movw	r12, r22
 3f8:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
 3fa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <Run_Modem_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
 3fe:	c7 01       	movw	r24, r14
 400:	b6 01       	movw	r22, r12
 402:	0e 94 86 07 	call	0xf0c	; 0xf0c <Run_UART_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	08 95       	ret

00000410 <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
 410:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
 412:	e9 e6       	ldi	r30, 0x69	; 105
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8e 7f       	andi	r24, 0xFE	; 254
 41a:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
 41c:	80 81       	ld	r24, Z
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
 422:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
 424:	e0 9a       	sbi	0x1c, 0	; 28
 426:	08 95       	ret

00000428 <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
 428:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <counter>
 42c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <counter+0x1>
 430:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter+0x2>
 434:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter+0x3>
}
 438:	08 95       	ret

0000043a <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	61 97       	sbiw	r28, 0x11	; 17
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	cd bf       	out	0x3d, r28	; 61
	counter++;
 46e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <counter>
 472:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <counter+0x1>
 476:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <counter+0x2>
 47a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <counter+0x3>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	a1 1d       	adc	r26, r1
 482:	b1 1d       	adc	r27, r1
 484:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <counter>
 488:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <counter+0x1>
 48c:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <counter+0x2>
 490:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <counter+0x3>
	uint8_t* Variable_List[8] = {0};
 494:	8e 01       	movw	r16, r28
 496:	0f 5f       	subi	r16, 0xFF	; 255
 498:	1f 4f       	sbci	r17, 0xFF	; 255
 49a:	80 e1       	ldi	r24, 0x10	; 16
 49c:	f8 01       	movw	r30, r16
 49e:	11 92       	st	Z+, r1
 4a0:	8a 95       	dec	r24
 4a2:	e9 f7       	brne	.-6      	; 0x49e <__vector_1+0x64>
	Fill_Variable_List(&Variable_List[0]);
 4a4:	c8 01       	movw	r24, r16
 4a6:	0e 94 b6 02 	call	0x56c	; 0x56c <Fill_Variable_List>
	CAN_Read_Message(Variable_List);
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 0c 01 	call	0x218	; 0x218 <CAN_Read_Message>
	uint8_t TX_Data[1] = {0};
 4b0:	19 8a       	std	Y+17, r1	; 0x11
	CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
 4b2:	ae 01       	movw	r20, r28
 4b4:	4f 5e       	subi	r20, 0xEF	; 239
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	6f ef       	ldi	r22, 0xFF	; 255
 4ba:	8c e2       	ldi	r24, 0x2C	; 44
 4bc:	0e 94 ef 00 	call	0x1de	; 0x1de <CAN_Bit_Modify>
}
 4c0:	61 96       	adiw	r28, 0x11	; 17
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	7f 91       	pop	r23
 4de:	6f 91       	pop	r22
 4e0:	5f 91       	pop	r21
 4e2:	4f 91       	pop	r20
 4e4:	3f 91       	pop	r19
 4e6:	2f 91       	pop	r18
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
 4f6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Parity>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	89 27       	eor	r24, r25
 4fe:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
 502:	81 11       	cpse	r24, r1
 504:	0a c0       	rjmp	.+20     	; 0x51a <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
 506:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
 508:	42 e0       	ldi	r20, 0x02	; 2
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	8b e1       	ldi	r24, 0x1B	; 27
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 b3 04 	call	0x966	; 0x966 <Start_Timer>
 518:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
 51a:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 51c:	43 e2       	ldi	r20, 0x23	; 35
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	8b e1       	ldi	r24, 0x1B	; 27
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 b3 04 	call	0x966	; 0x966 <Start_Timer>
 52c:	08 95       	ret

0000052e <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
 52e:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
 530:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
 532:	6b e7       	ldi	r22, 0x7B	; 123
 534:	72 e0       	ldi	r23, 0x02	; 2
 536:	8b e1       	ldi	r24, 0x1B	; 27
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 66 04 	call	0x8cc	; 0x8cc <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 53e:	43 e2       	ldi	r20, 0x23	; 35
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	8b e1       	ldi	r24, 0x1B	; 27
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 b3 04 	call	0x966	; 0x966 <Start_Timer>
 54e:	08 95       	ret

00000550 <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts 
	asm("cli");
 550:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
 552:	e1 e6       	ldi	r30, 0x61	; 97
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	80 83       	st	Z, r24
    CLKPR = 0;
 55a:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
 55c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
 560:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
 562:	0e 94 91 01 	call	0x322	; 0x322 <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	08 95       	ret

0000056c <Fill_Variable_List>:
        Fills in the variables the CAN Read command will set

****************************************************************************/

void Fill_Variable_List(uint8_t** Variable_List)
{
 56c:	fc 01       	movw	r30, r24
	Variable_List[0] = &Byte_1;
 56e:	86 e2       	ldi	r24, 0x26	; 38
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
	Variable_List[1] = &Byte_2;
 576:	85 e2       	ldi	r24, 0x25	; 37
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	93 83       	std	Z+3, r25	; 0x03
 57c:	82 83       	std	Z+2, r24	; 0x02
	Variable_List[2] = &Byte_3;
 57e:	84 e2       	ldi	r24, 0x24	; 36
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	95 83       	std	Z+5, r25	; 0x05
 584:	84 83       	std	Z+4, r24	; 0x04
	Variable_List[3] = &Byte_4;
 586:	83 e2       	ldi	r24, 0x23	; 35
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	97 83       	std	Z+7, r25	; 0x07
 58c:	86 83       	std	Z+6, r24	; 0x06
	Variable_List[4] = &Byte_5;
 58e:	82 e2       	ldi	r24, 0x22	; 34
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	91 87       	std	Z+9, r25	; 0x09
 594:	80 87       	std	Z+8, r24	; 0x08
	Variable_List[5] = &Byte_6;
 596:	81 e2       	ldi	r24, 0x21	; 33
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	93 87       	std	Z+11, r25	; 0x0b
 59c:	82 87       	std	Z+10, r24	; 0x0a
	Variable_List[6] = &Byte_7;
 59e:	80 e2       	ldi	r24, 0x20	; 32
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	95 87       	std	Z+13, r25	; 0x0d
 5a4:	84 87       	std	Z+12, r24	; 0x0c
	Variable_List[7] = &Byte_8;		
 5a6:	8f e1       	ldi	r24, 0x1F	; 31
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	97 87       	std	Z+15, r25	; 0x0f
 5ac:	86 87       	std	Z+14, r24	; 0x0e
 5ae:	08 95       	ret

000005b0 <Init_Modem_Service>:

****************************************************************************/
void Init_Modem_Service(void)
{
   // Initialize UART
	UART_Initialize();
 5b0:	0e 94 69 05 	call	0xad2	; 0xad2 <UART_Initialize>
	Register_Timer(&Testing_Timer, Post_Event);
 5b4:	66 e7       	ldi	r22, 0x76	; 118
 5b6:	71 e0       	ldi	r23, 0x01	; 1
 5b8:	88 e0       	ldi	r24, 0x08	; 8
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 66 04 	call	0x8cc	; 0x8cc <Register_Timer>
	Start_Timer(&Testing_Timer, 5000);
 5c0:	48 e8       	ldi	r20, 0x88	; 136
 5c2:	53 e1       	ldi	r21, 0x13	; 19
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 b3 04 	call	0x966	; 0x966 <Start_Timer>
    PORTB &= ~(1<<PINB2);
 5d0:	2a 98       	cbi	0x05, 2	; 5
    DDRB |= (1<<PINB2);
 5d2:	22 9a       	sbi	0x04, 2	; 4
 5d4:	08 95       	ret

000005d6 <Run_Modem_Service>:
    Description
        Processes events for the master node

****************************************************************************/
void Run_Modem_Service(uint32_t event_mask)
{
 5d6:	0f 93       	push	r16
    switch(event_mask)
 5d8:	60 34       	cpi	r22, 0x40	; 64
 5da:	71 05       	cpc	r23, r1
 5dc:	81 05       	cpc	r24, r1
 5de:	91 05       	cpc	r25, r1
 5e0:	19 f5       	brne	.+70     	; 0x628 <Run_Modem_Service+0x52>
    {
        case EVT_TEST_TIMEOUT:
			if (do_init_modem)
 5e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <do_init_modem>
 5e6:	88 23       	and	r24, r24
 5e8:	59 f0       	breq	.+22     	; 0x600 <Run_Modem_Service+0x2a>
			{
				Write_UART(3, 0, &TX_Data[0], &RX_Data[0], true);
 5ea:	01 e0       	ldi	r16, 0x01	; 1
 5ec:	26 e0       	ldi	r18, 0x06	; 6
 5ee:	31 e0       	ldi	r19, 0x01	; 1
 5f0:	44 e0       	ldi	r20, 0x04	; 4
 5f2:	51 e0       	ldi	r21, 0x01	; 1
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Write_UART>
				do_init_modem = false;
 5fc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <do_init_modem>
			else
			{
				//Write_UART(2, 0, &TX_Data[0], &RX_Data[0], false);
			}
			
			if (flipper)
 600:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flipper>
 604:	88 23       	and	r24, r24
 606:	21 f0       	breq	.+8      	; 0x610 <Run_Modem_Service+0x3a>
			{
				PORTB |= (1<<PINB2);
 608:	2a 9a       	sbi	0x05, 2	; 5
				flipper = false;
 60a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flipper>
 60e:	04 c0       	rjmp	.+8      	; 0x618 <Run_Modem_Service+0x42>
			}
			else
			{
				PORTB &= ~(1<<PINB2);
 610:	2a 98       	cbi	0x05, 2	; 5
				flipper = true;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flipper>
			}
				
			Start_Timer(&Testing_Timer, 250);
 618:	4a ef       	ldi	r20, 0xFA	; 250
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	88 e0       	ldi	r24, 0x08	; 8
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 b3 04 	call	0x966	; 0x966 <Start_Timer>
			break;
		
        default:
            break;
    }
}
 628:	0f 91       	pop	r16
 62a:	08 95       	ret

0000062c <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
 62c:	af 92       	push	r10
 62e:	bf 92       	push	r11
 630:	cf 92       	push	r12
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	d8 2e       	mov	r13, r24
 642:	c6 2e       	mov	r12, r22
 644:	ea 01       	movw	r28, r20
 646:	79 01       	movw	r14, r18
	counter_value = query_counter();
 648:	0e 94 14 02 	call	0x428	; 0x428 <query_counter>
 64c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <counter_value>
 650:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <counter_value+0x1>
 654:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <counter_value+0x2>
 658:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 65c:	8d 2d       	mov	r24, r13
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	8c 01       	movw	r16, r24
 662:	0e 5f       	subi	r16, 0xFE	; 254
 664:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 666:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <Next_Available_Row>
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	de 01       	movw	r26, r28
 66e:	12 97       	sbiw	r26, 0x02	; 2
 670:	c9 01       	movw	r24, r18
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	82 0f       	add	r24, r18
 678:	93 1f       	adc	r25, r19
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	e0 e0       	ldi	r30, 0x00	; 0
 680:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 682:	9c 01       	movw	r18, r24
 684:	27 5b       	subi	r18, 0xB7	; 183
 686:	3e 4f       	sbci	r19, 0xFE	; 254
 688:	59 01       	movw	r10, r18
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	19 f4       	brne	.+6      	; 0x698 <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 692:	e5 01       	movw	r28, r10
 694:	d8 82       	st	Y, r13
 696:	0e c0       	rjmp	.+28     	; 0x6b4 <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
 698:	e1 30       	cpi	r30, 0x01	; 1
 69a:	f1 05       	cpc	r31, r1
 69c:	19 f4       	brne	.+6      	; 0x6a4 <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 69e:	e9 01       	movw	r28, r18
 6a0:	c8 82       	st	Y, r12
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
 6a4:	6c 91       	ld	r22, X
 6a6:	af 01       	movw	r20, r30
 6a8:	48 0f       	add	r20, r24
 6aa:	59 1f       	adc	r21, r25
 6ac:	47 5b       	subi	r20, 0xB7	; 183
 6ae:	5e 4f       	sbci	r21, 0xFE	; 254
 6b0:	ea 01       	movw	r28, r20
 6b2:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 6b4:	31 96       	adiw	r30, 0x01	; 1
 6b6:	11 96       	adiw	r26, 0x01	; 1
 6b8:	e0 17       	cp	r30, r16
 6ba:	f1 07       	cpc	r31, r17
 6bc:	44 f3       	brlt	.-48     	; 0x68e <Write_SPI+0x62>
 6be:	22 c0       	rjmp	.+68     	; 0x704 <Write_SPI+0xd8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
 6c0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Next_Available_Row>
 6c4:	8a 30       	cpi	r24, 0x0A	; 10
 6c6:	19 f4       	brne	.+6      	; 0x6ce <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
 6c8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Next_Available_Row>
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
 6d4:	0e 94 3d 04 	call	0x87a	; 0x87a <Query_SPI_State>
 6d8:	81 11       	cpse	r24, r1
 6da:	17 c0       	rjmp	.+46     	; 0x70a <Write_SPI+0xde>
    {
        Post_Event(EVT_SPI_START);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	78 e0       	ldi	r23, 0x08	; 8
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 6e8:	10 c0       	rjmp	.+32     	; 0x70a <Write_SPI+0xde>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
 6ea:	f7 01       	movw	r30, r14
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Next_Available_Row>
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	ed 5c       	subi	r30, 0xCD	; 205
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	91 83       	std	Z+1, r25	; 0x01
 700:	80 83       	st	Z, r24
 702:	de cf       	rjmp	.-68     	; 0x6c0 <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
 704:	c1 10       	cpse	r12, r1
 706:	f1 cf       	rjmp	.-30     	; 0x6ea <Write_SPI+0xbe>
 708:	db cf       	rjmp	.-74     	; 0x6c0 <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
    {
        Post_Event(EVT_SPI_START);
    }
}
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	bf 90       	pop	r11
 71c:	af 90       	pop	r10
 71e:	08 95       	ret

00000720 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
 742:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <Master_Slave_Identifier>
 746:	81 11       	cpse	r24, r1
 748:	87 c0       	rjmp	.+270    	; 0x858 <__vector_14+0x138>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
 74a:	8d b5       	in	r24, 0x2d	; 45
		
		// Once a transmit has been completed
		if (In_Tx)
 74c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <In_Tx>
 750:	88 23       	and	r24, r24
 752:	e1 f0       	breq	.+56     	; 0x78c <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
 754:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <TX_Index>
 758:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Expected_TX_Length>
 75c:	89 17       	cp	r24, r25
 75e:	a0 f0       	brcs	.+40     	; 0x788 <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
 760:	98 13       	cpse	r25, r24
 762:	07 c0       	rjmp	.+14     	; 0x772 <__vector_14+0x52>
 764:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Expected_RX_Length>
 768:	81 11       	cpse	r24, r1
 76a:	03 c0       	rjmp	.+6      	; 0x772 <__vector_14+0x52>
				{
					In_Tx = false;									
 76c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <In_Tx>
 770:	0d c0       	rjmp	.+26     	; 0x78c <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	70 e1       	ldi	r23, 0x10	; 16
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
 77e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <In_Tx>
 782:	81 11       	cpse	r24, r1
 784:	69 c0       	rjmp	.+210    	; 0x858 <__vector_14+0x138>
 786:	02 c0       	rjmp	.+4      	; 0x78c <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
 788:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
 78c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Expected_RX_Length>
 790:	99 23       	and	r25, r25
 792:	e9 f0       	breq	.+58     	; 0x7ce <__vector_14+0xae>
			{
				*(Receive_List[Buffer_Index][RX_Index]) = SPDR;
 794:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RX_Index>
 798:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Buffer_Index>
 79c:	e8 2f       	mov	r30, r24
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	e2 0f       	add	r30, r18
 7a2:	f1 1d       	adc	r31, r1
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	ed 5c       	subi	r30, 0xCD	; 205
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	01 90       	ld	r0, Z+
 7ae:	f0 81       	ld	r31, Z
 7b0:	e0 2d       	mov	r30, r0
 7b2:	2e b5       	in	r18, 0x2e	; 46
 7b4:	20 83       	st	Z, r18
				RX_Index++;				
 7b6:	8f 5f       	subi	r24, 0xFF	; 255
 7b8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
 7bc:	89 17       	cp	r24, r25
 7be:	38 f4       	brcc	.+14     	; 0x7ce <__vector_14+0xae>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	70 e2       	ldi	r23, 0x20	; 32
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 7cc:	45 c0       	rjmp	.+138    	; 0x858 <__vector_14+0x138>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
 7ce:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <Buffer_Index>
 7d2:	83 2f       	mov	r24, r19
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	ac 01       	movw	r20, r24
 7d8:	44 0f       	add	r20, r20
 7da:	55 1f       	adc	r21, r21
 7dc:	fa 01       	movw	r30, r20
 7de:	e8 0f       	add	r30, r24
 7e0:	f9 1f       	adc	r31, r25
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	e7 5b       	subi	r30, 0xB7	; 183
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	2f ef       	ldi	r18, 0xFF	; 255
 7ec:	20 83       	st	Z, r18
 7ee:	21 83       	std	Z+1, r18	; 0x01
 7f0:	22 83       	std	Z+2, r18	; 0x02
 7f2:	23 83       	std	Z+3, r18	; 0x03
 7f4:	24 83       	std	Z+4, r18	; 0x04
 7f6:	fa 01       	movw	r30, r20
 7f8:	e8 0f       	add	r30, r24
 7fa:	f9 1f       	adc	r31, r25
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	e7 5b       	subi	r30, 0xB7	; 183
 802:	fe 4f       	sbci	r31, 0xFE	; 254
 804:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
 806:	fa 01       	movw	r30, r20
 808:	ed 5c       	subi	r30, 0xCD	; 205
 80a:	fe 4f       	sbci	r31, 0xFE	; 254
 80c:	11 82       	std	Z+1, r1	; 0x01
 80e:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
 810:	3a 30       	cpi	r19, 0x0A	; 10
 812:	19 f4       	brne	.+6      	; 0x81a <__vector_14+0xfa>
    {
        Buffer_Index = 0;
 814:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Buffer_Index>
 818:	03 c0       	rjmp	.+6      	; 0x820 <__vector_14+0x100>
    }
    else
    {
        Buffer_Index++;
 81a:	3f 5f       	subi	r19, 0xFF	; 255
 81c:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
 820:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Buffer_Index>
 824:	82 2f       	mov	r24, r18
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	82 0f       	add	r24, r18
 82a:	91 1d       	adc	r25, r1
 82c:	82 0f       	add	r24, r18
 82e:	91 1d       	adc	r25, r1
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	fc 01       	movw	r30, r24
 836:	e7 5b       	subi	r30, 0xB7	; 183
 838:	fe 4f       	sbci	r31, 0xFE	; 254
 83a:	80 81       	ld	r24, Z
 83c:	8f 3f       	cpi	r24, 0xFF	; 255
 83e:	31 f0       	breq	.+12     	; 0x84c <__vector_14+0x12c>
    {
        Post_Event(EVT_SPI_START);
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	78 e0       	ldi	r23, 0x08	; 8
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	70 e4       	ldi	r23, 0x40	; 64
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
 858:	ff 91       	pop	r31
 85a:	ef 91       	pop	r30
 85c:	bf 91       	pop	r27
 85e:	af 91       	pop	r26
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	7f 91       	pop	r23
 866:	6f 91       	pop	r22
 868:	5f 91       	pop	r21
 86a:	4f 91       	pop	r20
 86c:	3f 91       	pop	r19
 86e:	2f 91       	pop	r18
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
 87a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Current_State>
 87e:	08 95       	ret

00000880 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
 880:	ed e8       	ldi	r30, 0x8D	; 141
 882:	f1 e0       	ldi	r31, 0x01	; 1
 884:	a1 e9       	ldi	r26, 0x91	; 145
 886:	b1 e0       	ldi	r27, 0x01	; 1
 888:	85 ef       	ldi	r24, 0xF5	; 245
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	11 82       	std	Z+1, r1	; 0x01
 88e:	10 82       	st	Z, r1
 890:	13 82       	std	Z+3, r1	; 0x03
 892:	12 82       	std	Z+2, r1	; 0x02
 894:	1c 92       	st	X, r1
 896:	15 82       	std	Z+5, r1	; 0x05
 898:	16 82       	std	Z+6, r1	; 0x06
 89a:	17 82       	std	Z+7, r1	; 0x07
 89c:	10 86       	std	Z+8, r1	; 0x08
 89e:	11 86       	std	Z+9, r1	; 0x09
 8a0:	12 86       	std	Z+10, r1	; 0x0a
 8a2:	13 86       	std	Z+11, r1	; 0x0b
 8a4:	14 86       	std	Z+12, r1	; 0x0c
 8a6:	3d 96       	adiw	r30, 0x0d	; 13
 8a8:	1d 96       	adiw	r26, 0x0d	; 13
 8aa:	e8 17       	cp	r30, r24
 8ac:	f9 07       	cpc	r31, r25
 8ae:	71 f7       	brne	.-36     	; 0x88c <Init_Timer_Module+0xc>
 8b0:	15 bc       	out	0x25, r1	; 37
 8b2:	16 bc       	out	0x26, r1	; 38
 8b4:	18 bc       	out	0x28, r1	; 40
 8b6:	88 b5       	in	r24, 0x28	; 40
 8b8:	83 58       	subi	r24, 0x83	; 131
 8ba:	88 bd       	out	0x28, r24	; 40
 8bc:	82 e0       	ldi	r24, 0x02	; 2
 8be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 8c2:	16 bc       	out	0x26, r1	; 38
 8c4:	86 b5       	in	r24, 0x26	; 38
 8c6:	83 60       	ori	r24, 0x03	; 3
 8c8:	86 bd       	out	0x26, r24	; 38
 8ca:	08 95       	ret

000008cc <Register_Timer>:
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
 8d0:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <Timers>
 8d4:	d0 91 8e 01 	lds	r29, 0x018E	; 0x80018e <Timers+0x1>
 8d8:	c8 17       	cp	r28, r24
 8da:	d9 07       	cpc	r29, r25
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <Register_Timer+0x14>
 8de:	40 c0       	rjmp	.+128    	; 0x960 <Register_Timer+0x94>
 8e0:	ad e8       	ldi	r26, 0x8D	; 141
 8e2:	b1 e0       	ldi	r27, 0x01	; 1
 8e4:	48 ee       	ldi	r20, 0xE8	; 232
 8e6:	51 e0       	ldi	r21, 0x01	; 1
 8e8:	fd 01       	movw	r30, r26
 8ea:	25 85       	ldd	r18, Z+13	; 0x0d
 8ec:	36 85       	ldd	r19, Z+14	; 0x0e
 8ee:	28 17       	cp	r18, r24
 8f0:	39 07       	cpc	r19, r25
 8f2:	b1 f1       	breq	.+108    	; 0x960 <Register_Timer+0x94>
 8f4:	3d 96       	adiw	r30, 0x0d	; 13
 8f6:	e4 17       	cp	r30, r20
 8f8:	f5 07       	cpc	r31, r21
 8fa:	b9 f7       	brne	.-18     	; 0x8ea <Register_Timer+0x1e>
 8fc:	2c c0       	rjmp	.+88     	; 0x956 <Register_Timer+0x8a>
 8fe:	1d 96       	adiw	r26, 0x0d	; 13
 900:	4d 91       	ld	r20, X+
 902:	5c 91       	ld	r21, X
 904:	1e 97       	sbiw	r26, 0x0e	; 14
 906:	45 2b       	or	r20, r21
 908:	f9 f4       	brne	.+62     	; 0x948 <Register_Timer+0x7c>
 90a:	02 c0       	rjmp	.+4      	; 0x910 <Register_Timer+0x44>
 90c:	20 e0       	ldi	r18, 0x00	; 0
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	f9 01       	movw	r30, r18
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	e2 0f       	add	r30, r18
 918:	f3 1f       	adc	r31, r19
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	ee 0f       	add	r30, r30
 920:	ff 1f       	adc	r31, r31
 922:	2e 0f       	add	r18, r30
 924:	3f 1f       	adc	r19, r31
 926:	f9 01       	movw	r30, r18
 928:	e3 57       	subi	r30, 0x73	; 115
 92a:	fe 4f       	sbci	r31, 0xFE	; 254
 92c:	91 83       	std	Z+1, r25	; 0x01
 92e:	80 83       	st	Z, r24
 930:	73 83       	std	Z+3, r23	; 0x03
 932:	62 83       	std	Z+2, r22	; 0x02
 934:	14 82       	std	Z+4, r1	; 0x04
 936:	15 82       	std	Z+5, r1	; 0x05
 938:	16 82       	std	Z+6, r1	; 0x06
 93a:	17 82       	std	Z+7, r1	; 0x07
 93c:	10 86       	std	Z+8, r1	; 0x08
 93e:	11 86       	std	Z+9, r1	; 0x09
 940:	12 86       	std	Z+10, r1	; 0x0a
 942:	13 86       	std	Z+11, r1	; 0x0b
 944:	14 86       	std	Z+12, r1	; 0x0c
 946:	0c c0       	rjmp	.+24     	; 0x960 <Register_Timer+0x94>
 948:	2f 5f       	subi	r18, 0xFF	; 255
 94a:	3f 4f       	sbci	r19, 0xFF	; 255
 94c:	1d 96       	adiw	r26, 0x0d	; 13
 94e:	28 30       	cpi	r18, 0x08	; 8
 950:	31 05       	cpc	r19, r1
 952:	a9 f6       	brne	.-86     	; 0x8fe <Register_Timer+0x32>
 954:	05 c0       	rjmp	.+10     	; 0x960 <Register_Timer+0x94>
 956:	cd 2b       	or	r28, r29
 958:	c9 f2       	breq	.-78     	; 0x90c <Register_Timer+0x40>
 95a:	21 e0       	ldi	r18, 0x01	; 1
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	cf cf       	rjmp	.-98     	; 0x8fe <Register_Timer+0x32>
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	08 95       	ret

00000966 <Start_Timer>:
 966:	cf 92       	push	r12
 968:	df 92       	push	r13
 96a:	ef 92       	push	r14
 96c:	ff 92       	push	r15
 96e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <Timers>
 972:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <Timers+0x1>
 976:	28 17       	cp	r18, r24
 978:	39 07       	cpc	r19, r25
 97a:	51 f0       	breq	.+20     	; 0x990 <Start_Timer+0x2a>
 97c:	ed e8       	ldi	r30, 0x8D	; 141
 97e:	f1 e0       	ldi	r31, 0x01	; 1
 980:	21 e0       	ldi	r18, 0x01	; 1
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	a5 85       	ldd	r26, Z+13	; 0x0d
 986:	b6 85       	ldd	r27, Z+14	; 0x0e
 988:	a8 17       	cp	r26, r24
 98a:	b9 07       	cpc	r27, r25
 98c:	11 f5       	brne	.+68     	; 0x9d2 <Start_Timer+0x6c>
 98e:	02 c0       	rjmp	.+4      	; 0x994 <Start_Timer+0x2e>
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	f9 01       	movw	r30, r18
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	e2 0f       	add	r30, r18
 99c:	f3 1f       	adc	r31, r19
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	ee 0f       	add	r30, r30
 9a4:	ff 1f       	adc	r31, r31
 9a6:	2e 0f       	add	r18, r30
 9a8:	3f 1f       	adc	r19, r31
 9aa:	f9 01       	movw	r30, r18
 9ac:	e3 57       	subi	r30, 0x73	; 115
 9ae:	fe 4f       	sbci	r31, 0xFE	; 254
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	84 83       	std	Z+4, r24	; 0x04
 9b4:	15 82       	std	Z+5, r1	; 0x05
 9b6:	16 82       	std	Z+6, r1	; 0x06
 9b8:	17 82       	std	Z+7, r1	; 0x07
 9ba:	10 86       	std	Z+8, r1	; 0x08
 9bc:	6a 01       	movw	r12, r20
 9be:	7b 01       	movw	r14, r22
 9c0:	cc 0c       	add	r12, r12
 9c2:	dd 1c       	adc	r13, r13
 9c4:	ee 1c       	adc	r14, r14
 9c6:	ff 1c       	adc	r15, r15
 9c8:	c1 86       	std	Z+9, r12	; 0x09
 9ca:	d2 86       	std	Z+10, r13	; 0x0a
 9cc:	e3 86       	std	Z+11, r14	; 0x0b
 9ce:	f4 86       	std	Z+12, r15	; 0x0c
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <Start_Timer+0x78>
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	3d 96       	adiw	r30, 0x0d	; 13
 9d8:	28 30       	cpi	r18, 0x08	; 8
 9da:	31 05       	cpc	r19, r1
 9dc:	99 f6       	brne	.-90     	; 0x984 <Start_Timer+0x1e>
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	08 95       	ret

000009e8 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	ef 92       	push	r14
 9f4:	ff 92       	push	r15
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
 a16:	88 b5       	in	r24, 0x28	; 40
 a18:	83 58       	subi	r24, 0x83	; 131
 a1a:	88 bd       	out	0x28, r24	; 40
 a1c:	01 e9       	ldi	r16, 0x91	; 145
 a1e:	11 e0       	ldi	r17, 0x01	; 1
 a20:	cd e8       	ldi	r28, 0x8D	; 141
 a22:	d1 e0       	ldi	r29, 0x01	; 1
 a24:	0f 2e       	mov	r0, r31
 a26:	f5 ef       	ldi	r31, 0xF5	; 245
 a28:	ef 2e       	mov	r14, r31
 a2a:	f1 e0       	ldi	r31, 0x01	; 1
 a2c:	ff 2e       	mov	r15, r31
 a2e:	f0 2d       	mov	r31, r0
 a30:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
 a32:	80 81       	ld	r24, Z
 a34:	88 23       	and	r24, r24
 a36:	81 f1       	breq	.+96     	; 0xa98 <__vector_10+0xb0>
 a38:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
 a3a:	89 85       	ldd	r24, Y+9	; 0x09
 a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
 a3e:	ab 85       	ldd	r26, Y+11	; 0x0b
 a40:	bc 85       	ldd	r27, Y+12	; 0x0c
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	a1 05       	cpc	r26, r1
 a46:	b1 05       	cpc	r27, r1
 a48:	b9 f0       	breq	.+46     	; 0xa78 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
 a4a:	4d 81       	ldd	r20, Y+5	; 0x05
 a4c:	5e 81       	ldd	r21, Y+6	; 0x06
 a4e:	6f 81       	ldd	r22, Y+7	; 0x07
 a50:	78 85       	ldd	r23, Y+8	; 0x08
 a52:	4f 5f       	subi	r20, 0xFF	; 255
 a54:	5f 4f       	sbci	r21, 0xFF	; 255
 a56:	6f 4f       	sbci	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	4d 83       	std	Y+5, r20	; 0x05
 a5c:	5e 83       	std	Y+6, r21	; 0x06
 a5e:	6f 83       	std	Y+7, r22	; 0x07
 a60:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
 a62:	01 97       	sbiw	r24, 0x01	; 1
 a64:	a1 09       	sbc	r26, r1
 a66:	b1 09       	sbc	r27, r1
 a68:	89 87       	std	Y+9, r24	; 0x09
 a6a:	9a 87       	std	Y+10, r25	; 0x0a
 a6c:	ab 87       	std	Y+11, r26	; 0x0b
 a6e:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
 a70:	89 2b       	or	r24, r25
 a72:	8a 2b       	or	r24, r26
 a74:	8b 2b       	or	r24, r27
 a76:	81 f4       	brne	.+32     	; 0xa98 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
 a78:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
 a7a:	d9 01       	movw	r26, r18
 a7c:	12 96       	adiw	r26, 0x02	; 2
 a7e:	ed 91       	ld	r30, X+
 a80:	fc 91       	ld	r31, X
 a82:	13 97       	sbiw	r26, 0x03	; 3
 a84:	30 97       	sbiw	r30, 0x00	; 0
 a86:	41 f0       	breq	.+16     	; 0xa98 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
 a88:	8d 91       	ld	r24, X+
 a8a:	9c 91       	ld	r25, X
 a8c:	dc 01       	movw	r26, r24
 a8e:	6d 91       	ld	r22, X+
 a90:	7d 91       	ld	r23, X+
 a92:	8d 91       	ld	r24, X+
 a94:	9c 91       	ld	r25, X
 a96:	09 95       	icall
 a98:	03 5f       	subi	r16, 0xF3	; 243
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
 a9e:	ce 15       	cp	r28, r14
 aa0:	df 05       	cpc	r29, r15
 aa2:	31 f6       	brne	.-116    	; 0xa30 <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
 aa4:	ff 91       	pop	r31
 aa6:	ef 91       	pop	r30
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	bf 91       	pop	r27
 aae:	af 91       	pop	r26
 ab0:	9f 91       	pop	r25
 ab2:	8f 91       	pop	r24
 ab4:	7f 91       	pop	r23
 ab6:	6f 91       	pop	r22
 ab8:	5f 91       	pop	r21
 aba:	4f 91       	pop	r20
 abc:	3f 91       	pop	r19
 abe:	2f 91       	pop	r18
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	ff 90       	pop	r15
 ac6:	ef 90       	pop	r14
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <UART_Initialize>:
	// Rx -> A0
	// Tx -> A1
	
	//DDRA &= ~(1<<PINA0);
	//PORTA &= ~(1<<PINA0);
	PORTB &= ~(1<<PINB5);
 ad2:	2d 98       	cbi	0x05, 5	; 5
	DDRB |= (1<<PINB5);
 ad4:	25 9a       	sbi	0x04, 5	; 4
	
	// Reset UART
	LINCR |= (1<<LSWRES);
 ad6:	e8 ec       	ldi	r30, 0xC8	; 200
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	80 68       	ori	r24, 0x80	; 128
 ade:	80 83       	st	Z, r24
	
    // Set up LINCR with
	// - Command Mode = TxRx Enabled
	// - UART Enable
	// - Odd Parity	
	LINCR = (0<<LCMD0)|(1<<LCMD1)|(1<<LCMD2)|(1<<LENA)|(0<<LCONF0)|(0<<LCONF1);
 ae0:	8e e0       	ldi	r24, 0x0E	; 14
 ae2:	80 83       	st	Z, r24
	
	// Set up LINBTR
	LINBTR = (1<<LDISR);
 ae4:	80 e8       	ldi	r24, 0x80	; 128
 ae6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	
	// 19200 baud
	LINBRRL = 12;//(1<<LDIV0);
 aea:	8c e0       	ldi	r24, 0x0C	; 12
 aec:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
	LINBRRH = 0;
 af0:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    
	// LIN Interrupt Enable
	//LINENIR = (1<<LENERR)|(1<<LENTXOK)|(1<<LENRXOK);
	LINENIR = (0<<LENTXOK)|(1<<LENRXOK);
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	// Reset indices
    Buffer_Index = 0;
 afa:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Buffer_Index>
    TX_Index = 0;
 afe:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <TX_Index>
	RX_Index = 0;
 b02:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <RX_Index>
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
 b06:	ed e0       	ldi	r30, 0x0D	; 13
 b08:	f2 e0       	ldi	r31, 0x02	; 2
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	80 83       	st	Z, r24
 b0e:	81 83       	std	Z+1, r24	; 0x01
 b10:	82 83       	std	Z+2, r24	; 0x02
 b12:	83 83       	std	Z+3, r24	; 0x03
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
 b14:	a9 e0       	ldi	r26, 0x09	; 9
 b16:	b2 e0       	ldi	r27, 0x02	; 2
 b18:	11 96       	adiw	r26, 0x01	; 1
 b1a:	1c 92       	st	X, r1
 b1c:	1e 92       	st	-X, r1
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
 b1e:	84 83       	std	Z+4, r24	; 0x04
 b20:	85 83       	std	Z+5, r24	; 0x05
 b22:	86 83       	std	Z+6, r24	; 0x06
 b24:	87 83       	std	Z+7, r24	; 0x07
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
 b26:	13 96       	adiw	r26, 0x03	; 3
 b28:	1c 92       	st	X, r1
 b2a:	1e 92       	st	-X, r1
 b2c:	12 97       	sbiw	r26, 0x02	; 2
 b2e:	08 95       	ret

00000b30 <UART_Start_Command>:

****************************************************************************/

void UART_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE];
 b30:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	ee 0f       	add	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	e3 5f       	subi	r30, 0xF3	; 243
 b40:	fd 4f       	sbci	r31, 0xFD	; 253
 b42:	80 81       	ld	r24, Z
 b44:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][UART_RX_LENGTH_BYTE];
 b48:	81 81       	ldd	r24, Z+1	; 0x01
 b4a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
 b4e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
 b52:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <TX_Index>
	
	// State in TX
	In_Tx = true;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <In_Tx>
 b5c:	08 95       	ret

00000b5e <UART_End_Command>:
        Ends UART Transmission by setting SS high

****************************************************************************/

void UART_End_Command (void)
{
 b5e:	08 95       	ret

00000b60 <UART_Transmit>:

****************************************************************************/

void UART_Transmit (void)
{
	if (!modem_init)
 b60:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <modem_init>
 b64:	81 11       	cpse	r24, r1
 b66:	16 c0       	rjmp	.+44     	; 0xb94 <UART_Transmit+0x34>
	{
		// Send byte out
		LINDAT = Command_Buffer[Buffer_Index][TX_Index + UART_LENGTH_BYTES];
 b68:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TX_Index>
 b72:	ee 0f       	add	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	ee 0f       	add	r30, r30
 b78:	ff 1f       	adc	r31, r31
 b7a:	e3 5f       	subi	r30, 0xF3	; 243
 b7c:	fd 4f       	sbci	r31, 0xFD	; 253
 b7e:	e8 0f       	add	r30, r24
 b80:	f1 1d       	adc	r31, r1
 b82:	82 81       	ldd	r24, Z+2	; 0x02
 b84:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		TX_Index++;
 b88:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TX_Index>
 b8c:	8f 5f       	subi	r24, 0xFF	; 255
 b8e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TX_Index>
 b92:	08 95       	ret
		//}
	}
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
 b94:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <Text_Index>
 b98:	82 2f       	mov	r24, r18
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	fc 01       	movw	r30, r24
 b9e:	e0 5b       	subi	r30, 0xB0	; 176
 ba0:	ff 4f       	sbci	r31, 0xFF	; 255
 ba2:	34 91       	lpm	r19, Z
 ba4:	3f 32       	cpi	r19, 0x2F	; 47
 ba6:	59 f4       	brne	.+22     	; 0xbbe <UART_Transmit+0x5e>
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
 ba8:	fc 01       	movw	r30, r24
 baa:	ef 5a       	subi	r30, 0xAF	; 175
 bac:	ff 4f       	sbci	r31, 0xFF	; 255
 bae:	e4 91       	lpm	r30, Z
 bb0:	e2 37       	cpi	r30, 0x72	; 114
 bb2:	39 f4       	brne	.+14     	; 0xbc2 <UART_Transmit+0x62>
				set_as = 0x0D;
				Text_Index++;
 bb4:	2f 5f       	subi	r18, 0xFF	; 255
 bb6:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <Text_Index>
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
				set_as = 0x0D;
 bba:	ed e0       	ldi	r30, 0x0D	; 13
 bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <UART_Transmit+0x64>
				set_as = '/';	
			}
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
 bbe:	e4 91       	lpm	r30, Z
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <UART_Transmit+0x64>
				set_as = 0x0D;
				Text_Index++;
			}
			
			else {
				set_as = '/';	
 bc2:	ef e2       	ldi	r30, 0x2F	; 47
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
		}
		LINDAT = set_as;
 bc4:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		Text_Index++;
 bc8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Text_Index>
 bcc:	8f 5f       	subi	r24, 0xFF	; 255
 bce:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Text_Index>
 bd2:	08 95       	ret

00000bd4 <Write_UART>:
    Description
        Fills in current command into UART command buffer
****************************************************************************/

void Write_UART(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive, bool Init_Seq)
{
 bd4:	cf 92       	push	r12
 bd6:	df 92       	push	r13
 bd8:	ef 92       	push	r14
 bda:	ff 92       	push	r15
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	d8 2e       	mov	r13, r24
 be6:	c6 2e       	mov	r12, r22
 be8:	ea 01       	movw	r28, r20
 bea:	79 01       	movw	r14, r18
	if (!Init_Seq)
 bec:	01 11       	cpse	r16, r1
 bee:	4f c0       	rjmp	.+158    	; 0xc8e <Write_UART+0xba>
	{
		modem_init = false;
 bf0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <modem_init>
		counter_value = query_counter();
 bf4:	0e 94 14 02 	call	0x428	; 0x428 <query_counter>
 bf8:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <counter_value>
 bfc:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <counter_value+0x1>
 c00:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <counter_value+0x2>
 c04:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <counter_value+0x3>
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
 c08:	0d 2d       	mov	r16, r13
 c0a:	10 e0       	ldi	r17, 0x00	; 0
 c0c:	0e 5f       	subi	r16, 0xFE	; 254
 c0e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
 c10:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Next_Available_Row>
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	de 01       	movw	r26, r28
 c18:	12 97       	sbiw	r26, 0x02	; 2
 c1a:	c9 01       	movw	r24, r18
 c1c:	88 0f       	add	r24, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	88 0f       	add	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	e0 e0       	ldi	r30, 0x00	; 0
 c26:	f0 e0       	ldi	r31, 0x00	; 0
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
 c28:	9c 01       	movw	r18, r24
 c2a:	23 5f       	subi	r18, 0xF3	; 243
 c2c:	3d 4f       	sbci	r19, 0xFD	; 253
 c2e:	a9 01       	movw	r20, r18
 c30:	4f 5f       	subi	r20, 0xFF	; 255
 c32:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
 c34:	30 97       	sbiw	r30, 0x00	; 0
 c36:	19 f4       	brne	.+6      	; 0xc3e <Write_UART+0x6a>
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
 c38:	e9 01       	movw	r28, r18
 c3a:	d8 82       	st	Y, r13
 c3c:	0d c0       	rjmp	.+26     	; 0xc58 <Write_UART+0x84>
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
 c3e:	e1 30       	cpi	r30, 0x01	; 1
 c40:	f1 05       	cpc	r31, r1
 c42:	19 f4       	brne	.+6      	; 0xc4a <Write_UART+0x76>
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
 c44:	ea 01       	movw	r28, r20
 c46:	c8 82       	st	Y, r12
 c48:	07 c0       	rjmp	.+14     	; 0xc58 <Write_UART+0x84>
			}
			// Fill in remaining data to TX
			else
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
 c4a:	6c 91       	ld	r22, X
 c4c:	ef 01       	movw	r28, r30
 c4e:	c8 0f       	add	r28, r24
 c50:	d9 1f       	adc	r29, r25
 c52:	c3 5f       	subi	r28, 0xF3	; 243
 c54:	dd 4f       	sbci	r29, 0xFD	; 253
 c56:	68 83       	st	Y, r22
	{
		modem_init = false;
		counter_value = query_counter();
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
 c58:	31 96       	adiw	r30, 0x01	; 1
 c5a:	11 96       	adiw	r26, 0x01	; 1
 c5c:	e0 17       	cp	r30, r16
 c5e:	f1 07       	cpc	r31, r17
 c60:	4c f3       	brlt	.-46     	; 0xc34 <Write_UART+0x60>
 c62:	2a c0       	rjmp	.+84     	; 0xcb8 <Write_UART+0xe4>
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
			}
		}
		// If reached Command Buffer end
		if (Next_Available_Row == UART_COMMAND_BUFFER_SIZE - 1)
 c64:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Next_Available_Row>
 c68:	81 30       	cpi	r24, 0x01	; 1
 c6a:	19 f4       	brne	.+6      	; 0xc72 <Write_UART+0x9e>
		{
			Next_Available_Row = 0;
 c6c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Next_Available_Row>
 c70:	03 c0       	rjmp	.+6      	; 0xc78 <Write_UART+0xa4>
		}
		else
		{
			Next_Available_Row++;
 c72:	8f 5f       	subi	r24, 0xFF	; 255
 c74:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Next_Available_Row>
		}
		// If UART is currently idling, start transmission
		if (Query_UART_State() == NORMAL_UART_STATE)
 c78:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Query_UART_State>
 c7c:	81 11       	cpse	r24, r1
 c7e:	1f c0       	rjmp	.+62     	; 0xcbe <Write_UART+0xea>
		{
			Post_Event(EVT_UART_START);
 c80:	60 e8       	ldi	r22, 0x80	; 128
 c82:	70 e0       	ldi	r23, 0x00	; 0
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 c8c:	18 c0       	rjmp	.+48     	; 0xcbe <Write_UART+0xea>
		}
	}
	else
	{
		modem_init = true;
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <modem_init>
		Text_Index = 0;
 c94:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Text_Index>
		UART_Transmit();
 c98:	0e 94 b0 05 	call	0xb60	; 0xb60 <UART_Transmit>
 c9c:	10 c0       	rjmp	.+32     	; 0xcbe <Write_UART+0xea>
		if (RX_Length > 0)
		{
			for (int i = 0; i < RX_Length; i++)
			{
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
 c9e:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <Next_Available_Row>
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	ee 0f       	add	r30, r30
 ca6:	ff 1f       	adc	r31, r31
 ca8:	e7 5f       	subi	r30, 0xF7	; 247
 caa:	fd 4f       	sbci	r31, 0xFD	; 253
 cac:	d7 01       	movw	r26, r14
 cae:	8d 91       	ld	r24, X+
 cb0:	9c 91       	ld	r25, X
 cb2:	91 83       	std	Z+1, r25	; 0x01
 cb4:	80 83       	st	Z, r24
 cb6:	d6 cf       	rjmp	.-84     	; 0xc64 <Write_UART+0x90>
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
			}
		}
		// Data is expected to be received
		if (RX_Length > 0)
 cb8:	c1 10       	cpse	r12, r1
 cba:	f1 cf       	rjmp	.-30     	; 0xc9e <Write_UART+0xca>
 cbc:	d3 cf       	rjmp	.-90     	; 0xc64 <Write_UART+0x90>
	{
		modem_init = true;
		Text_Index = 0;
		UART_Transmit();
	}	
}
 cbe:	df 91       	pop	r29
 cc0:	cf 91       	pop	r28
 cc2:	1f 91       	pop	r17
 cc4:	0f 91       	pop	r16
 cc6:	ff 90       	pop	r15
 cc8:	ef 90       	pop	r14
 cca:	df 90       	pop	r13
 ccc:	cf 90       	pop	r12
 cce:	08 95       	ret

00000cd0 <__vector_12>:
        Handles UART transmission completed interrupts

****************************************************************************/

ISR(LIN_TC_vect)
{
 cd0:	1f 92       	push	r1
 cd2:	0f 92       	push	r0
 cd4:	0f b6       	in	r0, 0x3f	; 63
 cd6:	0f 92       	push	r0
 cd8:	11 24       	eor	r1, r1
 cda:	2f 93       	push	r18
 cdc:	3f 93       	push	r19
 cde:	4f 93       	push	r20
 ce0:	5f 93       	push	r21
 ce2:	6f 93       	push	r22
 ce4:	7f 93       	push	r23
 ce6:	8f 93       	push	r24
 ce8:	9f 93       	push	r25
 cea:	af 93       	push	r26
 cec:	bf 93       	push	r27
 cee:	ef 93       	push	r30
 cf0:	ff 93       	push	r31
	//LINSIR = (1<<3)|(1<<2)|(1<<1)|(1<<0);
	
	// Received a byte
	if (LINSIR & RX_ISR_FLAG)	
 cf2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 cf6:	80 ff       	sbrs	r24, 0
 cf8:	5c c0       	rjmp	.+184    	; 0xdb2 <__vector_12+0xe2>
	//if (!modem_init && !In_Tx)
	{
		LINSIR |= RX_ISR_FLAG;	// Clear Receive Flag
 cfa:	e9 ec       	ldi	r30, 0xC9	; 201
 cfc:	f0 e0       	ldi	r31, 0x00	; 0
 cfe:	80 81       	ld	r24, Z
 d00:	81 60       	ori	r24, 0x01	; 1
 d02:	80 83       	st	Z, r24
		
		// If the correct sequence was received, prepare to store packet sent from phone
		if (first_byte_T && second_byte_slash_n && third_slash_r)
 d04:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <first_byte_T>
 d08:	88 23       	and	r24, r24
 d0a:	29 f1       	breq	.+74     	; 0xd56 <__vector_12+0x86>
 d0c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <second_byte_slash_n>
 d10:	88 23       	and	r24, r24
 d12:	09 f1       	breq	.+66     	; 0xd56 <__vector_12+0x86>
 d14:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <third_slash_r>
 d18:	88 23       	and	r24, r24
 d1a:	e9 f0       	breq	.+58     	; 0xd56 <__vector_12+0x86>
		{
			Modem_Recv_Data[byte_space_counter - 1] = LINDAT;
 d1c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <byte_space_counter>
 d20:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
 d24:	e8 2f       	mov	r30, r24
 d26:	f0 e0       	ldi	r31, 0x00	; 0
 d28:	ec 50       	subi	r30, 0x0C	; 12
 d2a:	fe 4f       	sbci	r31, 0xFE	; 254
 d2c:	90 83       	st	Z, r25
			byte_space_counter++;
 d2e:	8f 5f       	subi	r24, 0xFF	; 255
 d30:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <byte_space_counter>
			
			if (byte_space_counter >= MAX_MODEM_RECEIVE + 1)
 d34:	85 30       	cpi	r24, 0x05	; 5
 d36:	08 f4       	brcc	.+2      	; 0xd3a <__vector_12+0x6a>
 d38:	d5 c0       	rjmp	.+426    	; 0xee4 <__vector_12+0x214>
			{
				PORTB |= (1<<PINB5);
 d3a:	2d 9a       	sbi	0x05, 5	; 5
				first_byte_T = false;
 d3c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <first_byte_T>
				second_byte_slash_n = false;
 d40:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <second_byte_slash_n>
				third_slash_r = false;
 d44:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <third_slash_r>
				Post_Event(EVT_MODEM_NEW_PACKAGE);
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	70 e8       	ldi	r23, 0x80	; 128
 d4c:	80 e0       	ldi	r24, 0x00	; 0
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 d54:	c7 c0       	rjmp	.+398    	; 0xee4 <__vector_12+0x214>
		}
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			PORTB &= ~(1<<PINB5);
 d56:	2d 98       	cbi	0x05, 5	; 5
			uint8_t Current_Read = LINDAT;
 d58:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
 d5c:	84 35       	cpi	r24, 0x54	; 84
 d5e:	31 f4       	brne	.+12     	; 0xd6c <__vector_12+0x9c>
			{
				byte_space_counter = 0;
 d60:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <byte_space_counter>
				first_byte_T = true;
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <first_byte_T>
 d6a:	1d c0       	rjmp	.+58     	; 0xda6 <__vector_12+0xd6>
			}
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
 d6c:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <first_byte_T>
 d70:	99 23       	and	r25, r25
 d72:	99 f0       	breq	.+38     	; 0xd9a <__vector_12+0xca>
 d74:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <byte_space_counter>
 d78:	91 30       	cpi	r25, 0x01	; 1
 d7a:	79 f4       	brne	.+30     	; 0xd9a <__vector_12+0xca>
 d7c:	8d 30       	cpi	r24, 0x0D	; 13
 d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_12+0xb2>
 d80:	ac c0       	rjmp	.+344    	; 0xeda <__vector_12+0x20a>
			{
				second_byte_slash_n = true;
 d82:	81 e0       	ldi	r24, 0x01	; 1
 d84:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <second_byte_slash_n>
				byte_space_counter = 0;
 d88:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <byte_space_counter>
 d8c:	0c c0       	rjmp	.+24     	; 0xda6 <__vector_12+0xd6>
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
			{
				third_slash_r = true;
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <third_slash_r>
				byte_space_counter = 0;
 d94:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <byte_space_counter>
 d98:	06 c0       	rjmp	.+12     	; 0xda6 <__vector_12+0xd6>
			}
			else {
				first_byte_T = false;
 d9a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <first_byte_T>
				second_byte_slash_n = false;
 d9e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <second_byte_slash_n>
				third_slash_r = false;
 da2:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <third_slash_r>
			}
			byte_space_counter++;
 da6:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <byte_space_counter>
 daa:	8f 5f       	subi	r24, 0xFF	; 255
 dac:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <byte_space_counter>
 db0:	99 c0       	rjmp	.+306    	; 0xee4 <__vector_12+0x214>
		}
	}
	
	// Completed transmission of a byte
	else if (LINSIR && TX_ISR_FLAG)
 db2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 db6:	88 23       	and	r24, r24
 db8:	09 f4       	brne	.+2      	; 0xdbc <__vector_12+0xec>
 dba:	94 c0       	rjmp	.+296    	; 0xee4 <__vector_12+0x214>
	{
		LINSIR |= TX_ISR_FLAG;	// Clear Transmit flag
 dbc:	e9 ec       	ldi	r30, 0xC9	; 201
 dbe:	f0 e0       	ldi	r31, 0x00	; 0
 dc0:	80 81       	ld	r24, Z
 dc2:	82 60       	ori	r24, 0x02	; 2
 dc4:	80 83       	st	Z, r24
		if (!modem_init)
 dc6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <modem_init>
 dca:	81 11       	cpse	r24, r1
 dcc:	74 c0       	rjmp	.+232    	; 0xeb6 <__vector_12+0x1e6>
		{
			// Once a transmit has been completed
			if (In_Tx)
 dce:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <In_Tx>
 dd2:	88 23       	and	r24, r24
 dd4:	e1 f0       	breq	.+56     	; 0xe0e <__vector_12+0x13e>
			{
				// If more bytes left to transmit post transmission event
				if (TX_Index <= Expected_TX_Length)
 dd6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <TX_Index>
 dda:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <Expected_TX_Length>
 dde:	89 17       	cp	r24, r25
 de0:	a0 f0       	brcs	.+40     	; 0xe0a <__vector_12+0x13a>
				{
					if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
 de2:	98 13       	cpse	r25, r24
 de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__vector_12+0x124>
 de6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Expected_RX_Length>
 dea:	81 11       	cpse	r24, r1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <__vector_12+0x124>
					{
						In_Tx = false;
 dee:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <In_Tx>
 df2:	0d c0       	rjmp	.+26     	; 0xe0e <__vector_12+0x13e>
					}
					else
					{
						Post_Event(EVT_UART_SEND_BYTE);
 df4:	60 e0       	ldi	r22, 0x00	; 0
 df6:	71 e0       	ldi	r23, 0x01	; 1
 df8:	80 e0       	ldi	r24, 0x00	; 0
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
				{
					In_Tx = false;
				}
			}
			
			if (!In_Tx)
 e00:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <In_Tx>
 e04:	81 11       	cpse	r24, r1
 e06:	6e c0       	rjmp	.+220    	; 0xee4 <__vector_12+0x214>
 e08:	02 c0       	rjmp	.+4      	; 0xe0e <__vector_12+0x13e>
						Post_Event(EVT_UART_SEND_BYTE);
					}
				}
				else
				{
					In_Tx = false;
 e0a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <In_Tx>
				}
			}
			
			if (!In_Tx)
			{
				if (Expected_RX_Length > 0)
 e0e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Expected_RX_Length>
 e12:	99 23       	and	r25, r25
 e14:	c1 f0       	breq	.+48     	; 0xe46 <__vector_12+0x176>
				{
					*(Receive_List[Buffer_Index][RX_Index]) = LINDAT;
 e16:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Index>
 e1a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <Buffer_Index>
 e1e:	e8 2f       	mov	r30, r24
 e20:	f0 e0       	ldi	r31, 0x00	; 0
 e22:	e2 0f       	add	r30, r18
 e24:	f1 1d       	adc	r31, r1
 e26:	ee 0f       	add	r30, r30
 e28:	ff 1f       	adc	r31, r31
 e2a:	e7 5f       	subi	r30, 0xF7	; 247
 e2c:	fd 4f       	sbci	r31, 0xFD	; 253
 e2e:	01 90       	ld	r0, Z+
 e30:	f0 81       	ld	r31, Z
 e32:	e0 2d       	mov	r30, r0
 e34:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
 e38:	20 83       	st	Z, r18
					RX_Index++;
 e3a:	8f 5f       	subi	r24, 0xFF	; 255
 e3c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX_Index>
				if (RX_Index < Expected_RX_Length)
				{
					// Do Nothing
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
 e40:	89 17       	cp	r24, r25
 e42:	08 f4       	brcc	.+2      	; 0xe46 <__vector_12+0x176>
 e44:	4f c0       	rjmp	.+158    	; 0xee4 <__vector_12+0x214>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < UART_MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
 e46:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <Buffer_Index>
 e4a:	82 2f       	mov	r24, r18
 e4c:	90 e0       	ldi	r25, 0x00	; 0
 e4e:	fc 01       	movw	r30, r24
 e50:	ee 0f       	add	r30, r30
 e52:	ff 1f       	adc	r31, r31
 e54:	ee 0f       	add	r30, r30
 e56:	ff 1f       	adc	r31, r31
 e58:	e3 5f       	subi	r30, 0xF3	; 243
 e5a:	fd 4f       	sbci	r31, 0xFD	; 253
 e5c:	3f ef       	ldi	r19, 0xFF	; 255
 e5e:	30 83       	st	Z, r19
 e60:	31 83       	std	Z+1, r19	; 0x01
 e62:	32 83       	std	Z+2, r19	; 0x02
 e64:	33 83       	std	Z+3, r19	; 0x03
    }
    // Point current receive list row to NULL
    for (int i = 0; i < UART_MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
 e66:	88 0f       	add	r24, r24
 e68:	99 1f       	adc	r25, r25
 e6a:	fc 01       	movw	r30, r24
 e6c:	e7 5f       	subi	r30, 0xF7	; 247
 e6e:	fd 4f       	sbci	r31, 0xFD	; 253
 e70:	11 82       	std	Z+1, r1	; 0x01
 e72:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == UART_COMMAND_BUFFER_SIZE - 1)
 e74:	21 30       	cpi	r18, 0x01	; 1
 e76:	19 f4       	brne	.+6      	; 0xe7e <__vector_12+0x1ae>
    {
        Buffer_Index = 0;
 e78:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Buffer_Index>
 e7c:	03 c0       	rjmp	.+6      	; 0xe84 <__vector_12+0x1b4>
    }
    else
    {
        Buffer_Index++;
 e7e:	2f 5f       	subi	r18, 0xFF	; 255
 e80:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE] != 0xFF)
 e84:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Buffer_Index>
 e88:	f0 e0       	ldi	r31, 0x00	; 0
 e8a:	ee 0f       	add	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	ee 0f       	add	r30, r30
 e90:	ff 1f       	adc	r31, r31
 e92:	e3 5f       	subi	r30, 0xF3	; 243
 e94:	fd 4f       	sbci	r31, 0xFD	; 253
 e96:	80 81       	ld	r24, Z
 e98:	8f 3f       	cpi	r24, 0xFF	; 255
 e9a:	31 f0       	breq	.+12     	; 0xea8 <__vector_12+0x1d8>
    {
        Post_Event(EVT_UART_START);
 e9c:	60 e8       	ldi	r22, 0x80	; 128
 e9e:	70 e0       	ldi	r23, 0x00	; 0
 ea0:	80 e0       	ldi	r24, 0x00	; 0
 ea2:	90 e0       	ldi	r25, 0x00	; 0
 ea4:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
				{
					Update_Buffer_Index();
					Post_Event(EVT_UART_END);
 ea8:	60 e0       	ldi	r22, 0x00	; 0
 eaa:	74 e0       	ldi	r23, 0x04	; 4
 eac:	80 e0       	ldi	r24, 0x00	; 0
 eae:	90 e0       	ldi	r25, 0x00	; 0
 eb0:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 eb4:	17 c0       	rjmp	.+46     	; 0xee4 <__vector_12+0x214>
		}
		
		// If in startup sequence for modem commands
		else
		{
			if (Text_Index >= sizeof(Init_Text)/sizeof(Init_Text[0]))
 eb6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Text_Index>
 eba:	85 39       	cpi	r24, 0x95	; 149
 ebc:	18 f0       	brcs	.+6      	; 0xec4 <__vector_12+0x1f4>
			{
				modem_init = false;
 ebe:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <modem_init>
 ec2:	10 c0       	rjmp	.+32     	; 0xee4 <__vector_12+0x214>
 ec4:	81 e2       	ldi	r24, 0x21	; 33
 ec6:	9e e4       	ldi	r25, 0x4E	; 78
 ec8:	01 97       	sbiw	r24, 0x01	; 1
			else
			{
				int i = 0;
				while (true) {
					i++;
					if (i > 20000) break;
 eca:	f1 f7       	brne	.-4      	; 0xec8 <__vector_12+0x1f8>
				}
				UART_Transmit();
 ecc:	0e 94 b0 05 	call	0xb60	; 0xb60 <UART_Transmit>
 ed0:	09 c0       	rjmp	.+18     	; 0xee4 <__vector_12+0x214>
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
			{
				second_byte_slash_n = true;
				byte_space_counter = 0;
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
 ed2:	8a 30       	cpi	r24, 0x0A	; 10
 ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_12+0x208>
 ed6:	61 cf       	rjmp	.-318    	; 0xd9a <__vector_12+0xca>
 ed8:	5a cf       	rjmp	.-332    	; 0xd8e <__vector_12+0xbe>
 eda:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <second_byte_slash_n>
 ede:	91 11       	cpse	r25, r1
 ee0:	f8 cf       	rjmp	.-16     	; 0xed2 <__vector_12+0x202>
 ee2:	5b cf       	rjmp	.-330    	; 0xd9a <__vector_12+0xca>
				}
				UART_Transmit();
			}
		}
	}	
}
 ee4:	ff 91       	pop	r31
 ee6:	ef 91       	pop	r30
 ee8:	bf 91       	pop	r27
 eea:	af 91       	pop	r26
 eec:	9f 91       	pop	r25
 eee:	8f 91       	pop	r24
 ef0:	7f 91       	pop	r23
 ef2:	6f 91       	pop	r22
 ef4:	5f 91       	pop	r21
 ef6:	4f 91       	pop	r20
 ef8:	3f 91       	pop	r19
 efa:	2f 91       	pop	r18
 efc:	0f 90       	pop	r0
 efe:	0f be       	out	0x3f, r0	; 63
 f00:	0f 90       	pop	r0
 f02:	1f 90       	pop	r1
 f04:	18 95       	reti

00000f06 <Init_UART_Service>:

****************************************************************************/
void Init_UART_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_UART_STATE;
 f06:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 f0a:	08 95       	ret

00000f0c <Run_UART_Service>:
        Processes events for UART Message transmit/receive

****************************************************************************/
void Run_UART_Service(uint32_t event_mask)
{
	switch(Current_State)
 f0c:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <Current_State>
 f10:	21 30       	cpi	r18, 0x01	; 1
 f12:	a9 f0       	breq	.+42     	; 0xf3e <Run_UART_Service+0x32>
 f14:	18 f0       	brcs	.+6      	; 0xf1c <Run_UART_Service+0x10>
 f16:	22 30       	cpi	r18, 0x02	; 2
 f18:	89 f1       	breq	.+98     	; 0xf7c <Run_UART_Service+0x70>
 f1a:	08 95       	ret
    {	
		case NORMAL_UART_STATE:
			if (EVT_UART_START == event_mask)
 f1c:	60 38       	cpi	r22, 0x80	; 128
 f1e:	71 05       	cpc	r23, r1
 f20:	81 05       	cpc	r24, r1
 f22:	91 05       	cpc	r25, r1
 f24:	e9 f5       	brne	.+122    	; 0xfa0 <Run_UART_Service+0x94>
			{			
                // Initialize UART for particular command
                UART_Start_Command();
 f26:	0e 94 98 05 	call	0xb30	; 0xb30 <UART_Start_Command>
				// Switch to sending state
				Current_State = SENDING_UART_STATE;
 f2a:	81 e0       	ldi	r24, 0x01	; 1
 f2c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_UART_SEND_BYTE);
 f30:	60 e0       	ldi	r22, 0x00	; 0
 f32:	71 e0       	ldi	r23, 0x01	; 1
 f34:	80 e0       	ldi	r24, 0x00	; 0
 f36:	90 e0       	ldi	r25, 0x00	; 0
 f38:	0e 94 76 01 	call	0x2ec	; 0x2ec <Post_Event>
 f3c:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_UART_SEND_BYTE == event_mask)
 f3e:	61 15       	cp	r22, r1
 f40:	21 e0       	ldi	r18, 0x01	; 1
 f42:	72 07       	cpc	r23, r18
 f44:	81 05       	cpc	r24, r1
 f46:	91 05       	cpc	r25, r1
 f48:	19 f4       	brne	.+6      	; 0xf50 <Run_UART_Service+0x44>
			{
    			UART_Transmit();
 f4a:	0e 94 b0 05 	call	0xb60	; 0xb60 <UART_Transmit>
 f4e:	08 95       	ret
			}
			else if (EVT_UART_RECV_BYTE == event_mask)
 f50:	61 15       	cp	r22, r1
 f52:	22 e0       	ldi	r18, 0x02	; 2
 f54:	72 07       	cpc	r23, r18
 f56:	81 05       	cpc	r24, r1
 f58:	91 05       	cpc	r25, r1
 f5a:	31 f4       	brne	.+12     	; 0xf68 <Run_UART_Service+0x5c>
			{
                UART_Transmit();
 f5c:	0e 94 b0 05 	call	0xb60	; 0xb60 <UART_Transmit>
				Current_State = RECEIVING_UART_STATE;				
 f60:	82 e0       	ldi	r24, 0x02	; 2
 f62:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Current_State>
 f66:	08 95       	ret
			}
			else if (EVT_UART_END == event_mask)
 f68:	61 15       	cp	r22, r1
 f6a:	74 40       	sbci	r23, 0x04	; 4
 f6c:	81 05       	cpc	r24, r1
 f6e:	91 05       	cpc	r25, r1
 f70:	b9 f4       	brne	.+46     	; 0xfa0 <Run_UART_Service+0x94>
			{
                UART_End_Command();
 f72:	0e 94 af 05 	call	0xb5e	; 0xb5e <UART_End_Command>
				Current_State = NORMAL_UART_STATE;
 f76:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 f7a:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_UART_RECV_BYTE == event_mask)
 f7c:	61 15       	cp	r22, r1
 f7e:	22 e0       	ldi	r18, 0x02	; 2
 f80:	72 07       	cpc	r23, r18
 f82:	81 05       	cpc	r24, r1
 f84:	91 05       	cpc	r25, r1
 f86:	19 f4       	brne	.+6      	; 0xf8e <Run_UART_Service+0x82>
            {
                UART_Transmit();
 f88:	0e 94 b0 05 	call	0xb60	; 0xb60 <UART_Transmit>
 f8c:	08 95       	ret
            }
            if (EVT_UART_END == event_mask)
 f8e:	61 15       	cp	r22, r1
 f90:	74 40       	sbci	r23, 0x04	; 4
 f92:	81 05       	cpc	r24, r1
 f94:	91 05       	cpc	r25, r1
 f96:	21 f4       	brne	.+8      	; 0xfa0 <Run_UART_Service+0x94>
            {
                UART_End_Command();
 f98:	0e 94 af 05 	call	0xb5e	; 0xb5e <UART_End_Command>
                Current_State = NORMAL_UART_STATE;
 f9c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Current_State>
 fa0:	08 95       	ret

00000fa2 <Query_UART_State>:
****************************************************************************/

UART_State_t Query_UART_State(void)
{
    return Current_State;
}
 fa2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Current_State>
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
