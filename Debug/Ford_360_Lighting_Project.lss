
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001502  00001596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800120  00800120  000015b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a2d  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001971  00000000  00000000  00005401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d4  00000000  00000000  00006d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009cc  00000000  00000000  00008e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f42  00000000  00000000  00009814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002274  00000000  00000000  0000a756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000c9ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_1>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_3>
      10:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_4>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_9>
      28:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_10>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_12>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_14>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_15>
      40:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000050 <__trampolines_end>:
      50:	41 54       	subi	r20, 0x41	; 65
      52:	45 31       	cpi	r20, 0x15	; 21
      54:	2f 72       	andi	r18, 0x2F	; 47
      56:	41 54       	subi	r20, 0x41	; 65
      58:	5e 53       	subi	r21, 0x3E	; 62
      5a:	49 43       	sbci	r20, 0x39	; 57
      5c:	41 3d       	cpi	r20, 0xD1	; 209
      5e:	31 2c       	mov	r3, r1
      60:	33 2f       	mov	r19, r19
      62:	72 41       	sbci	r23, 0x12	; 18
      64:	54 5e       	subi	r21, 0xE4	; 228
      66:	53 49       	sbci	r21, 0x93	; 147
      68:	53 53       	subi	r21, 0x33	; 51
      6a:	3d 30       	cpi	r19, 0x0D	; 13
      6c:	2c 22       	and	r2, r28
      6e:	73 72       	andi	r23, 0x23	; 35
      70:	76 54       	subi	r23, 0x46	; 70
      72:	79 70       	andi	r23, 0x09	; 9
      74:	65 22       	and	r6, r21
      76:	2c 22       	and	r2, r28
      78:	73 6f       	ori	r23, 0xF3	; 243
      7a:	63 6b       	ori	r22, 0xB3	; 179
      7c:	65 74       	andi	r22, 0x45	; 69
      7e:	22 2f       	mov	r18, r18
      80:	72 41       	sbci	r23, 0x12	; 18
      82:	54 5e       	subi	r21, 0xE4	; 228
      84:	53 49       	sbci	r21, 0x93	; 147
      86:	53 53       	subi	r21, 0x33	; 51
      88:	3d 30       	cpi	r19, 0x0D	; 13
      8a:	2c 22       	and	r2, r28
      8c:	63 6f       	ori	r22, 0xF3	; 243
      8e:	6e 49       	sbci	r22, 0x9E	; 158
      90:	64 22       	and	r6, r20
      92:	2c 33       	cpi	r18, 0x3C	; 60
      94:	2f 72       	andi	r18, 0x2F	; 47
      96:	41 54       	subi	r20, 0x41	; 65
      98:	5e 53       	subi	r21, 0x3E	; 62
      9a:	49 53       	subi	r20, 0x39	; 57
      9c:	53 3d       	cpi	r21, 0xD3	; 211
      9e:	30 2c       	mov	r3, r0
      a0:	22 61       	ori	r18, 0x12	; 18
      a2:	64 64       	ori	r22, 0x44	; 68
      a4:	72 65       	ori	r23, 0x52	; 82
      a6:	73 73       	andi	r23, 0x33	; 51
      a8:	22 2c       	mov	r2, r2
      aa:	22 73       	andi	r18, 0x32	; 50
      ac:	6f 63       	ori	r22, 0x3F	; 63
      ae:	6b 74       	andi	r22, 0x4B	; 75
      b0:	63 70       	andi	r22, 0x03	; 3
      b2:	3a 2f       	mov	r19, r26
      b4:	2f 6c       	ori	r18, 0xCF	; 207
      b6:	69 73       	andi	r22, 0x39	; 57
      b8:	74 65       	ori	r23, 0x54	; 84
      ba:	6e 65       	ori	r22, 0x5E	; 94
      bc:	72 3a       	cpi	r23, 0xA2	; 162
      be:	32 30       	cpi	r19, 0x02	; 2
      c0:	30 30       	cpi	r19, 0x00	; 0
      c2:	3b 65       	ori	r19, 0x5B	; 91
      c4:	74 78       	andi	r23, 0x84	; 132
      c6:	3d 32       	cpi	r19, 0x2D	; 45
      c8:	36 3b       	cpi	r19, 0xB6	; 182
      ca:	61 75       	andi	r22, 0x51	; 81
      cc:	74 6f       	ori	r23, 0xF4	; 244
      ce:	63 6f       	ori	r22, 0xF3	; 243
      d0:	6e 6e       	ori	r22, 0xEE	; 238
      d2:	65 63       	ori	r22, 0x35	; 53
      d4:	74 3d       	cpi	r23, 0xD4	; 212
      d6:	31 22       	and	r3, r17
      d8:	2f 72       	andi	r18, 0x2F	; 47
      da:	41 54       	subi	r20, 0x41	; 65
      dc:	5e 53       	subi	r21, 0x3E	; 62
      de:	49 53       	subi	r20, 0x39	; 57
      e0:	4f 3d       	cpi	r20, 0xDF	; 223
      e2:	30 2f       	mov	r19, r16
      e4:	72 00       	.word	0x0072	; ????

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d2 e0       	ldi	r29, 0x02	; 2
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	e2 e0       	ldi	r30, 0x02	; 2
      fa:	f5 e1       	ldi	r31, 0x15	; 21
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a0 32       	cpi	r26, 0x20	; 32
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	a0 e2       	ldi	r26, 0x20	; 32
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a2 30       	cpi	r26, 0x02	; 2
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 4b 04 	call	0x896	; 0x896 <main>
     11c:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	8f 93       	push	r24
     130:	9f 93       	push	r25
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 61       	ori	r24, 0x10	; 16
     13e:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
     140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
     144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
     148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     150:	ff 91       	pop	r31
     152:	ef 91       	pop	r30
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	0f 90       	pop	r0
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	0f 90       	pop	r0
     15e:	1f 90       	pop	r1
     160:	18 95       	reti

00000162 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	8f 93       	push	r24
     16e:	ef 93       	push	r30
     170:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
     172:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     176:	88 23       	and	r24, r24
     178:	19 f0       	breq	.+6      	; 0x180 <__vector_9+0x1e>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	39 f0       	breq	.+14     	; 0x18c <__vector_9+0x2a>
     17e:	0c c0       	rjmp	.+24     	; 0x198 <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
     180:	e3 e8       	ldi	r30, 0x83	; 131
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	80 62       	ori	r24, 0x20	; 32
     188:	80 83       	st	Z, r24
            break;
     18a:	06 c0       	rjmp	.+12     	; 0x198 <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
     18c:	e3 e8       	ldi	r30, 0x83	; 131
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8f 7d       	andi	r24, 0xDF	; 223
     194:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
     196:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
     198:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     19c:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
     19e:	83 70       	andi	r24, 0x03	; 3
     1a0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	8f 91       	pop	r24
     1aa:	0f 90       	pop	r0
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	0f 90       	pop	r0
     1b0:	1f 90       	pop	r1
     1b2:	18 95       	reti

000001b4 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
     1d6:	e8 e6       	ldi	r30, 0x68	; 104
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	8e 7f       	andi	r24, 0xFE	; 254
     1de:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     1e0:	4a e0       	ldi	r20, 0x0A	; 10
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
}
     1f0:	ff 91       	pop	r31
     1f2:	ef 91       	pop	r30
     1f4:	bf 91       	pop	r27
     1f6:	af 91       	pop	r26
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	7f 91       	pop	r23
     1fe:	6f 91       	pop	r22
     200:	5f 91       	pop	r21
     202:	4f 91       	pop	r20
     204:	3f 91       	pop	r19
     206:	2f 91       	pop	r18
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_4>:

ISR(PCINT1_vect)
{
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	2f 93       	push	r18
     21e:	3f 93       	push	r19
     220:	4f 93       	push	r20
     222:	5f 93       	push	r21
     224:	6f 93       	push	r22
     226:	7f 93       	push	r23
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
     22c:	af 93       	push	r26
     22e:	bf 93       	push	r27
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
     234:	e8 e6       	ldi	r30, 0x68	; 104
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8d 7f       	andi	r24, 0xFD	; 253
     23c:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     23e:	4a e0       	ldi	r20, 0x0A	; 10
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
}
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	bf 91       	pop	r27
     254:	af 91       	pop	r26
     256:	9f 91       	pop	r25
     258:	8f 91       	pop	r24
     25a:	7f 91       	pop	r23
     25c:	6f 91       	pop	r22
     25e:	5f 91       	pop	r21
     260:	4f 91       	pop	r20
     262:	3f 91       	pop	r19
     264:	2f 91       	pop	r18
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <CAN_Reset>:
	// Value to Set
	uint8_t Data_2_Write[RX_STATUS_TX_LENGTH] = {MCP_RX_STATUS};
	
	// Call SPI command
	Write_SPI(RX_STATUS_TX_LENGTH, RX_STATUS_RX_LENGTH, Data_2_Write, Variable_2_Set);	
}
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	80 ec       	ldi	r24, 0xC0	; 192
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	ae 01       	movw	r20, r28
     284:	4f 5f       	subi	r20, 0xFF	; 255
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Write_SPI>
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <CAN_Read>:
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <CAN_Read+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	9b 01       	movw	r18, r22
     2a4:	93 e0       	ldi	r25, 0x03	; 3
     2a6:	99 83       	std	Y+1, r25	; 0x01
     2a8:	8a 83       	std	Y+2, r24	; 0x02
     2aa:	ae 01       	movw	r20, r28
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Write_SPI>
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <CAN_Write>:
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <CAN_Write+0x6>
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	99 83       	std	Y+1, r25	; 0x01
     2d2:	8a 83       	std	Y+2, r24	; 0x02
     2d4:	fb 01       	movw	r30, r22
     2d6:	80 81       	ld	r24, Z
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	ae 01       	movw	r20, r28
     2e0:	4f 5f       	subi	r20, 0xFF	; 255
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Write_SPI>
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <CAN_Bit_Modify>:
        Performs bit modify operation on CAN module

****************************************************************************/

void CAN_Bit_Modify(uint8_t Register_2_Set, uint8_t Bits_2_Change, uint8_t* Value_2_Set)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <CAN_Bit_Modify+0x6>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <__stack+0x1>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
    // Define constants
    #define BM_TX_LENGTH 4
    #define BM_RX_LENGTH 0
	
    // Value to Set
    uint8_t Data_2_Write[BM_TX_LENGTH] = {MCP_BITMOD, Register_2_Set, Bits_2_Change, Value_2_Set[0]};
     304:	95 e0       	ldi	r25, 0x05	; 5
     306:	99 83       	std	Y+1, r25	; 0x01
     308:	8a 83       	std	Y+2, r24	; 0x02
     30a:	6b 83       	std	Y+3, r22	; 0x03
     30c:	fa 01       	movw	r30, r20
     30e:	80 81       	ld	r24, Z
     310:	8c 83       	std	Y+4, r24	; 0x04
    
    // Call SPI command
    Write_SPI(BM_TX_LENGTH, BM_RX_LENGTH, Data_2_Write, NULL);
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	ae 01       	movw	r20, r28
     318:	4f 5f       	subi	r20, 0xFF	; 255
     31a:	5f 4f       	sbci	r21, 0xFF	; 255
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Write_SPI>
}
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <CAN_Initialize_1>:
    Description
        Initializes the CAN module MCP25625

****************************************************************************/
void CAN_Initialize_1(uint8_t * * p_data_store)
{   
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
    // Save away the address to the array of addresses to the locations we will
    // fill in data
    a_p_Recv_List = p_data_store;
     336:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <a_p_Recv_List+0x1>
     33a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <a_p_Recv_List>

    // Reset the CAN Module and enter in configuration mode
    CAN_Reset();
     33e:	0e 94 38 01 	call	0x270	; 0x270 <CAN_Reset>
    
    // Enter configuration mode, abort all pending transmissions and disable one shot mode
    TX_Data[0] = (MODE_CONFIG|ABORT_TX);
     342:	80 e9       	ldi	r24, 0x90	; 144
     344:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CANCTRL, TX_Data);
     348:	66 e2       	ldi	r22, 0x26	; 38
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	8f e0       	ldi	r24, 0x0F	; 15
     34e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
	
    // Disable CLKOUT
    TX_Data[0] = CLKOUT_DISABLE;
     352:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, (1 << 2), TX_Data);
     356:	46 e2       	ldi	r20, 0x26	; 38
     358:	51 e0       	ldi	r21, 0x01	; 1
     35a:	64 e0       	ldi	r22, 0x04	; 4
     35c:	8f e0       	ldi	r24, 0x0F	; 15
     35e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
	
    // Set CNF Bit Time registers for Baud Rate = 312500 b/s
	TX_Data[0] = 0x41;
     362:	d1 e4       	ldi	r29, 0x41	; 65
     364:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, (1 << 0), TX_Data);
     368:	46 e2       	ldi	r20, 0x26	; 38
     36a:	51 e0       	ldi	r21, 0x01	; 1
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	8a e2       	ldi	r24, 0x2A	; 42
     370:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     374:	c1 ef       	ldi	r28, 0xF1	; 241
     376:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 0)|(1 << 1)|(1 << 2)), TX_Data);
     37a:	46 e2       	ldi	r20, 0x26	; 38
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	67 e0       	ldi	r22, 0x07	; 7
     380:	89 e2       	ldi	r24, 0x29	; 41
     382:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     386:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 3)|(1 << 4)|(1 << 5)), TX_Data);
     38a:	46 e2       	ldi	r20, 0x26	; 38
     38c:	51 e0       	ldi	r21, 0x01	; 1
     38e:	68 e3       	ldi	r22, 0x38	; 56
     390:	89 e2       	ldi	r24, 0x29	; 41
     392:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     396:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 7)|(1 << 6)), TX_Data);
     39a:	46 e2       	ldi	r20, 0x26	; 38
     39c:	51 e0       	ldi	r21, 0x01	; 1
     39e:	60 ec       	ldi	r22, 0xC0	; 192
     3a0:	89 e2       	ldi	r24, 0x29	; 41
     3a2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
	TX_Data[0] = 0x85;
     3a6:	85 e8       	ldi	r24, 0x85	; 133
     3a8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CNF3, TX_Data);
     3ac:	66 e2       	ldi	r22, 0x26	; 38
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	88 e2       	ldi	r24, 0x28	; 40
     3b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
	TX_Data[0] = 0x41;
     3b6:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, ((1 << 7)|(1 << 6)), TX_Data);
     3ba:	46 e2       	ldi	r20, 0x26	; 38
     3bc:	51 e0       	ldi	r21, 0x01	; 1
     3be:	60 ec       	ldi	r22, 0xC0	; 192
     3c0:	8a e2       	ldi	r24, 0x2A	; 42
     3c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <CAN_Initialize_2>:
void CAN_Initialize_2(void)
{
    // Set interrupt registers
    
    // Enable all interrupts
    TX_Data[0] = 0xFF;
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_CANINTE, TX_Data);
     3d2:	66 e2       	ldi	r22, 0x26	; 38
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8b e2       	ldi	r24, 0x2B	; 43
     3d8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>

    // Set up TX Buffer 0
    TX_Data[0] = MCP_TXB_TXP10_M; // Highest message priority
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0CTRL, TX_Data);
     3e2:	66 e2       	ldi	r22, 0x26	; 38
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	80 e3       	ldi	r24, 0x30	; 48
     3e8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    
    // Set RTS pins as digital inputs
    TX_Data[0] = 0;
     3ec:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_RTSCTRL, TX_Data);
     3f0:	66 e2       	ldi	r22, 0x26	; 38
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    
    // Set identifier of TX Buffer 0 to 1
    TX_Data[0] = 0;
     3fa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0SIDH, TX_Data);
     3fe:	66 e2       	ldi	r22, 0x26	; 38
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	81 e3       	ldi	r24, 0x31	; 49
     404:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    TX_Data[0] = 0x20;
     408:	80 e2       	ldi	r24, 0x20	; 32
     40a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_TXB0SIDL, TX_Data);
     40e:	66 e2       	ldi	r22, 0x26	; 38
     410:	71 e0       	ldi	r23, 0x01	; 1
     412:	82 e3       	ldi	r24, 0x32	; 50
     414:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    
    // Set identifier of RX Buffer 0 to 0
    TX_Data[0] = 0;
     418:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Write(MCP_RXF0SIDH, TX_Data);
     41c:	66 e2       	ldi	r22, 0x26	; 38
     41e:	71 e0       	ldi	r23, 0x01	; 1
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    CAN_Write(MCP_RXF0SIDL, TX_Data);
     426:	66 e2       	ldi	r22, 0x26	; 38
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    
    TX_Data[0] = 0x60;
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
    CAN_Write(MCP_RXB0CTRL, TX_Data);
     436:	66 e2       	ldi	r22, 0x26	; 38
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
    
    // Switch to Normal Mode
    TX_Data[0] = (MCP_NORMAL);
     43e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, ((1 << 5)|(1 << 6)|(1 << 7)), TX_Data);
     442:	46 e2       	ldi	r20, 0x26	; 38
     444:	51 e0       	ldi	r21, 0x01	; 1
     446:	60 ee       	ldi	r22, 0xE0	; 224
     448:	8f e0       	ldi	r24, 0x0F	; 15
     44a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
    
    RX_Data[0] = &Recv_Byte;
     44e:	83 e2       	ldi	r24, 0x23	; 35
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <RX_Data+0x1>
     456:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <RX_Data>
    CAN_Read(MCP_CANSTAT, RX_Data);
     45a:	64 e2       	ldi	r22, 0x24	; 36
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	8e e0       	ldi	r24, 0x0E	; 14
     460:	0e 94 4c 01 	call	0x298	; 0x298 <CAN_Read>
     464:	08 95       	ret

00000466 <CAN_Send_Message>:
        Sends a CAN Message on the CAN Bus

****************************************************************************/

void CAN_Send_Message(uint8_t Msg_Length, uint8_t* Transmit_Data)
{	
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
	// If invalid CAN Message Length don't perform transmit
	if (Msg_Length > 8)
     470:	89 30       	cpi	r24, 0x09	; 9
     472:	30 f5       	brcc	.+76     	; 0x4c0 <CAN_Send_Message+0x5a>
     474:	7b 01       	movw	r14, r22
     476:	c8 2f       	mov	r28, r24
	{
		return;
	}
	// Set message length
	TX_Data[0] = Msg_Length;
     478:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
	CAN_Write(MCP_TXB0DLC, TX_Data);
     47c:	66 e2       	ldi	r22, 0x26	; 38
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	85 e3       	ldi	r24, 0x35	; 53
     482:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     486:	cc 23       	and	r28, r28
     488:	91 f0       	breq	.+36     	; 0x4ae <CAN_Send_Message+0x48>
     48a:	87 01       	movw	r16, r14
     48c:	ec 0e       	add	r14, r28
     48e:	f1 1c       	adc	r15, r1
     490:	c6 e3       	ldi	r28, 0x36	; 54
	{
		TX_Data[0] = Transmit_Data[i];
     492:	f8 01       	movw	r30, r16
     494:	81 91       	ld	r24, Z+
     496:	8f 01       	movw	r16, r30
     498:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
     49c:	66 e2       	ldi	r22, 0x26	; 38
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	8c 2f       	mov	r24, r28
     4a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CAN_Write>
     4a6:	cf 5f       	subi	r28, 0xFF	; 255
	}
	// Set message length
	TX_Data[0] = Msg_Length;
	CAN_Write(MCP_TXB0DLC, TX_Data);
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     4a8:	0e 15       	cp	r16, r14
     4aa:	1f 05       	cpc	r17, r15
     4ac:	91 f7       	brne	.-28     	; 0x492 <CAN_Send_Message+0x2c>
	{
		TX_Data[0] = Transmit_Data[i];
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TX_Data>
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
     4b4:	46 e2       	ldi	r20, 0x26	; 38
     4b6:	51 e0       	ldi	r21, 0x01	; 1
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
}
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(void)
{
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	16 e6       	ldi	r17, 0x66	; 102
     4d4:	c0 e0       	ldi	r28, 0x00	; 0
     4d6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
     4d8:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <a_p_Recv_List>
     4dc:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <a_p_Recv_List+0x1>
     4e0:	6c 0f       	add	r22, r28
     4e2:	7d 1f       	adc	r23, r29
     4e4:	81 2f       	mov	r24, r17
     4e6:	0e 94 4c 01 	call	0x298	; 0x298 <CAN_Read>
     4ea:	22 96       	adiw	r28, 0x02	; 2
     4ec:	1f 5f       	subi	r17, 0xFF	; 255

****************************************************************************/

void CAN_Read_Message(void)
{
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
     4ee:	ca 30       	cpi	r28, 0x0A	; 10
     4f0:	d1 05       	cpc	r29, r1
     4f2:	91 f7       	brne	.-28     	; 0x4d8 <CAN_Read_Message+0xc>
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
	}
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <start_eeprom_write_byte>:
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);

        // Increment num bytes executed
        Num_Bytes_Executed++;
    }
}
     4fc:	9c 01       	movw	r18, r24
     4fe:	9f b7       	in	r25, 0x3f	; 63
     500:	f8 94       	cli
     502:	32 bd       	out	0x22, r19	; 34
     504:	21 bd       	out	0x21, r18	; 33
     506:	fb 01       	movw	r30, r22
     508:	80 81       	ld	r24, Z
     50a:	80 bd       	out	0x20, r24	; 32
     50c:	1f ba       	out	0x1f, r1	; 31
     50e:	fa 9a       	sbi	0x1f, 2	; 31
     510:	8f b3       	in	r24, 0x1f	; 31
     512:	8a 60       	ori	r24, 0x0A	; 10
     514:	8f bb       	out	0x1f, r24	; 31
     516:	9f bf       	out	0x3f, r25	; 63
     518:	08 95       	ret

0000051a <__vector_16>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(EE_RDY_vect)
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	cf 93       	push	r28
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
    // Disable the ready interrupts
    EECR &= ~(1<<EERIE);
     53e:	fb 98       	cbi	0x1f, 3	; 31

    // Check if we've written all the requested values
    if (Num_Bytes_Requested <= Num_Bytes_Executed)
     540:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <Num_Bytes_Executed>
     544:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Num_Bytes_Requested>
     548:	c8 17       	cp	r28, r24
     54a:	18 f0       	brcs	.+6      	; 0x552 <__vector_16+0x38>
    {
        // We are done writing all the bytes.
        IsBusy = false;
     54c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <IsBusy>
     550:	13 c0       	rjmp	.+38     	; 0x578 <__vector_16+0x5e>
    }
    else
    {
        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     552:	8c 2f       	mov	r24, r28
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <p_Caller_Values>
     55a:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <p_Caller_Values+0x1>
     55e:	68 0f       	add	r22, r24
     560:	79 1f       	adc	r23, r25
     562:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <p_Target_EEPROM_Address>
     566:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <p_Target_EEPROM_Address+0x1>
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     572:	cf 5f       	subi	r28, 0xFF	; 255
     574:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <Num_Bytes_Executed>
    }
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	cf 91       	pop	r28
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	8b 01       	movw	r16, r22
     5a2:	9c 01       	movw	r18, r24
    bool event_pending = false;

    // We must enter a critical section here, because it is possible that
    // while we are clearing the event, an interrupt may occur and post an 
    // event. In this situation, we would lose the new event that was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     5a4:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5a6:	f8 94       	cli
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
     5a8:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <Pending_Events>
     5ac:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <Pending_Events+0x1>
     5b0:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <Pending_Events+0x2>
     5b4:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <Pending_Events+0x3>
     5b8:	d9 01       	movw	r26, r18
     5ba:	c8 01       	movw	r24, r16
     5bc:	84 23       	and	r24, r20
     5be:	95 23       	and	r25, r21
     5c0:	a6 23       	and	r26, r22
     5c2:	b7 23       	and	r27, r23
     5c4:	80 17       	cp	r24, r16
     5c6:	91 07       	cpc	r25, r17
     5c8:	a2 07       	cpc	r26, r18
     5ca:	b3 07       	cpc	r27, r19
     5cc:	91 f4       	brne	.+36     	; 0x5f2 <process_event_if_pending+0x56>
        {
            // Set flag
            event_pending = true;

            // Clear the event
            Pending_Events &= ~event_mask;
     5ce:	80 95       	com	r24
     5d0:	90 95       	com	r25
     5d2:	a0 95       	com	r26
     5d4:	b0 95       	com	r27
     5d6:	84 23       	and	r24, r20
     5d8:	95 23       	and	r25, r21
     5da:	a6 23       	and	r26, r22
     5dc:	b7 23       	and	r27, r23
     5de:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Pending_Events>
     5e2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Pending_Events+0x1>
     5e6:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <Pending_Events+0x2>
     5ea:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <Pending_Events+0x3>
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
        {
            // Set flag
            event_pending = true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <process_event_if_pending+0x58>

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
    // Initialize event pending flag to false
    bool event_pending = false;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f4:	ef bf       	out	0x3f, r30	; 63
            Pending_Events &= ~event_mask;
        }           
    }

    // If the event is pending, run all services to process the event.
    if (event_pending) Run_Services(event_mask);
     5f6:	88 23       	and	r24, r24
     5f8:	21 f0       	breq	.+8      	; 0x602 <process_event_if_pending+0x66>
     5fa:	c9 01       	movw	r24, r18
     5fc:	b8 01       	movw	r22, r16
     5fe:	0e 94 a6 03 	call	0x74c	; 0x74c <Run_Services>
}
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
    // We must enter a critical section here, because it is possible that
    // while we are modifying the pending events, an interrupt may occur and 
    // post an event. In this situation, we would lose the new event that 
    // was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     610:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     612:	f8 94       	cli
    {
        // Set flag in event list
        Pending_Events |= event_mask;
     614:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <Pending_Events>
     618:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <Pending_Events+0x1>
     61c:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <Pending_Events+0x2>
     620:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <Pending_Events+0x3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	8c 29       	or	r24, r12
     62a:	9d 29       	or	r25, r13
     62c:	ae 29       	or	r26, r14
     62e:	bf 29       	or	r27, r15
     630:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Pending_Events>
     634:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Pending_Events+0x1>
     638:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <Pending_Events+0x2>
     63c:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <Pending_Events+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     640:	2f bf       	out	0x3f, r18	; 63
    }
}
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
     664:	64 e0       	ldi	r22, 0x04	; 4
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
     670:	68 e0       	ldi	r22, 0x08	; 8
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
     67c:	60 e1       	ldi	r22, 0x10	; 16
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
     688:	60 e2       	ldi	r22, 0x20	; 32
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
     694:	60 e4       	ldi	r22, 0x40	; 64
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
     6a0:	60 e8       	ldi	r22, 0x80	; 128
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	74 e0       	ldi	r23, 0x04	; 4
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	78 e0       	ldi	r23, 0x08	; 8
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e1       	ldi	r23, 0x10	; 16
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e2       	ldi	r23, 0x20	; 32
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e4       	ldi	r23, 0x40	; 64
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (16 <= NUM_EVENTS)
        process_event_if_pending(EVENT_16);
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e8       	ldi	r23, 0x80	; 128
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (17 <= NUM_EVENTS)
        process_event_if_pending(EVENT_17);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (18 <= NUM_EVENTS)
        process_event_if_pending(EVENT_18);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        #endif
        #if (19 <= NUM_EVENTS)
        process_event_if_pending(EVENT_19);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 ce 02 	call	0x59c	; 0x59c <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
     730:	8d cf       	rjmp	.-230    	; 0x64c <Run_Events>

00000732 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
     732:	0e 94 de 06 	call	0xdbc	; 0xdbc <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
     736:	0e 94 59 04 	call	0x8b2	; 0x8b2 <Init_Modem_Service>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
     73a:	0e 94 2e 0a 	call	0x145c	; 0x145c <Init_UART_Service>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
     73e:	0e 94 bb 03 	call	0x776	; 0x776 <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
     742:	0e 94 3a 04 	call	0x874	; 0x874 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
     746:	0e 94 8b 06 	call	0xd16	; 0xd16 <Init_SPI_Service>
     74a:	08 95       	ret

0000074c <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	6b 01       	movw	r12, r22
     756:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
     758:	0e 94 80 04 	call	0x900	; 0x900 <Run_Modem_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 31 0a 	call	0x1462	; 0x1462 <Run_UART_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 90 06 	call	0xd20	; 0xd20 <Run_SPI_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
     776:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
     778:	e9 e6       	ldi	r30, 0x69	; 105
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8e 7f       	andi	r24, 0xFE	; 254
     780:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
     782:	80 81       	ld	r24, Z
     784:	82 60       	ori	r24, 0x02	; 2
     786:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
     788:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
     78a:	e0 9a       	sbi	0x1c, 0	; 28
     78c:	08 95       	ret

0000078e <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
     78e:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <counter>
     792:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <counter+0x1>
     796:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <counter+0x2>
     79a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <counter+0x3>
}
     79e:	08 95       	ret

000007a0 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	4f 93       	push	r20
     7b0:	5f 93       	push	r21
     7b2:	6f 93       	push	r22
     7b4:	7f 93       	push	r23
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	1f 92       	push	r1
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	counter++;
     7cc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <counter>
     7d0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <counter+0x1>
     7d4:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <counter+0x2>
     7d8:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <counter+0x3>
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	a1 1d       	adc	r26, r1
     7e0:	b1 1d       	adc	r27, r1
     7e2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <counter>
     7e6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <counter+0x1>
     7ea:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <counter+0x2>
     7ee:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <counter+0x3>
    // RX_Data[0] = &interrupt_read;
	// Post_Event(EVT_MASTER_NEW_CAN_MSG);
    // CAN_Read(MCP_CANINTF, RX_Data);
    // Fill in message only if the interrupt is a receive interrupt
    // if (interrupt_read & (1<<MCP_STAT_RX0IF)) 
    CAN_Read_Message();
     7f2:	0e 94 66 02 	call	0x4cc	; 0x4cc <CAN_Read_Message>
    // CAN_Read(MCP_EFLG, RX_Data);
    uint8_t TX_Data[1] = {0};
     7f6:	19 82       	std	Y+1, r1	; 0x01
    CAN_Bit_Modify(MCP_EFLG, (1<<6), TX_Data);
     7f8:	ae 01       	movw	r20, r28
     7fa:	4f 5f       	subi	r20, 0xFF	; 255
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	60 e4       	ldi	r22, 0x40	; 64
     800:	8d e2       	ldi	r24, 0x2D	; 45
     802:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
    //CAN_Read(MCP_EFLG_TXEP, RX_Data);
    //CAN_Read(MCP_EFLG_RXEP, RX_Data);
    CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
     806:	ae 01       	movw	r20, r28
     808:	4f 5f       	subi	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	6f ef       	ldi	r22, 0xFF	; 255
     80e:	8c e2       	ldi	r24, 0x2C	; 44
     810:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CAN_Bit_Modify>
}
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
     83c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Parity>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	89 27       	eor	r24, r25
     844:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
     848:	81 11       	cpse	r24, r1
     84a:	0a c0       	rjmp	.+20     	; 0x860 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
     84c:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
     84e:	42 e0       	ldi	r20, 0x02	; 2
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	87 e3       	ldi	r24, 0x37	; 55
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
     85e:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
     860:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     862:	43 e2       	ldi	r20, 0x23	; 35
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	87 e3       	ldi	r24, 0x37	; 55
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
     872:	08 95       	ret

00000874 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
     874:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
     876:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
     878:	6e e1       	ldi	r22, 0x1E	; 30
     87a:	74 e0       	ldi	r23, 0x04	; 4
     87c:	87 e3       	ldi	r24, 0x37	; 55
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 04 07 	call	0xe08	; 0xe08 <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     884:	43 e2       	ldi	r20, 0x23	; 35
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	87 e3       	ldi	r24, 0x37	; 55
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
     894:	08 95       	ret

00000896 <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
     896:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
     898:	e1 e6       	ldi	r30, 0x61	; 97
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 e8       	ldi	r24, 0x80	; 128
     89e:	80 83       	st	Z, r24
    CLKPR = 0;
     8a0:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
     8a2:	0e 94 99 03 	call	0x732	; 0x732 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
     8a6:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
     8a8:	0e 94 26 03 	call	0x64c	; 0x64c <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	08 95       	ret

000008b2 <Init_Modem_Service>:

****************************************************************************/
void Init_Modem_Service(void)
{
   // Initialize UART
	UART_Initialize(Modem_Recv_Data);
     8b2:	8b e3       	ldi	r24, 0x3B	; 59
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 0d 08 	call	0x101a	; 0x101a <UART_Initialize>
	Register_Timer(&Testing_Timer, Post_Event);
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	73 e0       	ldi	r23, 0x03	; 3
     8be:	8c e0       	ldi	r24, 0x0C	; 12
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 04 07 	call	0xe08	; 0xe08 <Register_Timer>
	Start_Timer(&Testing_Timer, 5000);
     8c6:	48 e8       	ldi	r20, 0x88	; 136
     8c8:	53 e1       	ldi	r21, 0x13	; 19
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	8c e0       	ldi	r24, 0x0C	; 12
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
    PORTB &= ~(1<<PINB2);
     8d6:	2a 98       	cbi	0x05, 2	; 5
    DDRB |= (1<<PINB2);
     8d8:	22 9a       	sbi	0x04, 2	; 4
	
	// Register CAN Init 1 timer with Post_Event()
	Register_Timer(&CAN_Timer, Post_Event);
     8da:	64 e0       	ldi	r22, 0x04	; 4
     8dc:	73 e0       	ldi	r23, 0x03	; 3
     8de:	8a e1       	ldi	r24, 0x1A	; 26
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 04 07 	call	0xe08	; 0xe08 <Register_Timer>

	// Kick off CAN Init 1 Timer
	Start_Timer(&CAN_Timer, CAN_INIT_1_MS);
     8e6:	48 ec       	ldi	r20, 0xC8	; 200
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	8a e1       	ldi	r24, 0x1A	; 26
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>

	// Call 1st step of the CAN initialization
	// This will only start once we exit initialization context
	CAN_Initialize_1(a_p_CAN_Volatile_Msg);
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 99 01 	call	0x332	; 0x332 <CAN_Initialize_1>
     8fe:	08 95       	ret

00000900 <Run_Modem_Service>:
    Description
        Processes events for the master node

****************************************************************************/
void Run_Modem_Service(uint32_t event_mask)
{
     900:	0f 93       	push	r16
    switch(event_mask)
     902:	61 15       	cp	r22, r1
     904:	20 e8       	ldi	r18, 0x80	; 128
     906:	72 07       	cpc	r23, r18
     908:	81 05       	cpc	r24, r1
     90a:	91 05       	cpc	r25, r1
     90c:	99 f1       	breq	.+102    	; 0x974 <Run_Modem_Service+0x74>
     90e:	61 15       	cp	r22, r1
     910:	71 05       	cpc	r23, r1
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	82 07       	cpc	r24, r18
     916:	91 05       	cpc	r25, r1
     918:	31 f0       	breq	.+12     	; 0x926 <Run_Modem_Service+0x26>
     91a:	60 34       	cpi	r22, 0x40	; 64
     91c:	71 05       	cpc	r23, r1
     91e:	81 05       	cpc	r24, r1
     920:	91 05       	cpc	r25, r1
     922:	71 f5       	brne	.+92     	; 0x980 <Run_Modem_Service+0x80>
     924:	03 c0       	rjmp	.+6      	; 0x92c <Run_Modem_Service+0x2c>

		 case EVT_CAN_INIT_1_COMPLETE:
		        // The time for CAN 1 has expired

		        // Call step two of the CAN init
		        CAN_Initialize_2();
     926:	0e 94 e6 01 	call	0x3cc	; 0x3cc <CAN_Initialize_2>
		        
		        break;
     92a:	2a c0       	rjmp	.+84     	; 0x980 <Run_Modem_Service+0x80>
				
        case EVT_TEST_TIMEOUT:
			if (do_init_modem)
     92c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <do_init_modem>
     930:	88 23       	and	r24, r24
     932:	59 f0       	breq	.+22     	; 0x94a <Run_Modem_Service+0x4a>
			{
				Write_UART(3, 0, &TX_Data[0], &RX_Data[0], true);
     934:	01 e0       	ldi	r16, 0x01	; 1
     936:	2a e0       	ldi	r18, 0x0A	; 10
     938:	31 e0       	ldi	r19, 0x01	; 1
     93a:	48 e0       	ldi	r20, 0x08	; 8
     93c:	51 e0       	ldi	r21, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	0e 94 92 08 	call	0x1124	; 0x1124 <Write_UART>
				do_init_modem = false;
     946:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <do_init_modem>
			else
			{
				//Write_UART(2, 0, &TX_Data[0], &RX_Data[0], false);
			}
			
			if (flipper)
     94a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flipper>
     94e:	88 23       	and	r24, r24
     950:	21 f0       	breq	.+8      	; 0x95a <Run_Modem_Service+0x5a>
			{
				PORTB |= (1<<PINB2);
     952:	2a 9a       	sbi	0x05, 2	; 5
				flipper = false;
     954:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flipper>
     958:	04 c0       	rjmp	.+8      	; 0x962 <Run_Modem_Service+0x62>
			}
			else
			{
				PORTB &= ~(1<<PINB2);
     95a:	2a 98       	cbi	0x05, 2	; 5
				flipper = true;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flipper>
			}
				
			Start_Timer(&Testing_Timer, 250);
     962:	4a ef       	ldi	r20, 0xFA	; 250
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	8c e0       	ldi	r24, 0x0C	; 12
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 54 07 	call	0xea8	; 0xea8 <Start_Timer>
			break;
     972:	06 c0       	rjmp	.+12     	; 0x980 <Run_Modem_Service+0x80>
		
		case EVT_MODEM_NEW_PACKAGE:
		
			//Modem_Recv_Data =  //{CAN_MODEM_POS_TYPE, 0x00, 0x00, 0x00, 0x00};
			//write_rect_vect(&TX_Away[CAN_MODEM_POS_VECT_IDX], test_positions[test_counter]);
			CAN_Send_Message(5, Modem_Recv_Data);
     974:	6b e3       	ldi	r22, 0x3B	; 59
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 33 02 	call	0x466	; 0x466 <CAN_Send_Message>
			break;
		
        default:
            break;
    }
}
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <SPI_Initialize>:
        Initializes the SPI module as a master/slave and sets SPI TX/RX buffer
        address

****************************************************************************/
void SPI_Initialize(void)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
    // Identify node type
    Master_Slave_Identifier = SPI_MASTER;
     988:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <Master_Slave_Identifier>
    
    if (SPI_MASTER == Master_Slave_Identifier)
    {
        // SPI Data Direction Register (DDR_SPI) = DDRA
        // Set MOSI, SS and SCK output, all others input
        DDR_SPI |= (1<<MOSI)|(1<<SCK)|(1<<SS);
     98c:	81 b1       	in	r24, 0x01	; 1
     98e:	80 67       	ori	r24, 0x70	; 112
     990:	81 b9       	out	0x01, r24	; 1
		//DDR_SPI &= ~(1<<SS);

        // Enable interrupt on transmission complete, enable SPI and set as master,
        // set clock rate io_clk/4, MSB transmitted first, Sample on rising edge 
        SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR);
     992:	80 ed       	ldi	r24, 0xD0	; 208
     994:	8c bd       	out	0x2c, r24	; 44

        // Raise SS from master at Init
        PORTA |= (1<<SS);
     996:	16 9a       	sbi	0x02, 6	; 2

        // Reset indices
        Buffer_Index = 0;
     998:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Buffer_Index>
        TX_Index = 0;
     99c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <TX_Index>
		RX_Index = 0;
     9a0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <RX_Index>
     9a4:	e9 e6       	ldi	r30, 0x69	; 105
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	a0 e5       	ldi	r26, 0x50	; 80
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	24 e6       	ldi	r18, 0x64	; 100
     9ae:	31 e0       	ldi	r19, 0x01	; 1
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	ef 01       	movw	r28, r30
     9b4:	25 97       	sbiw	r28, 0x05	; 5
     9b6:	88 83       	st	Y, r24
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	88 83       	st	Y, r24
     9bc:	21 96       	adiw	r28, 0x01	; 1
     9be:	88 83       	st	Y, r24
     9c0:	21 96       	adiw	r28, 0x01	; 1
     9c2:	88 83       	st	Y, r24
     9c4:	21 96       	adiw	r28, 0x01	; 1
     9c6:	88 83       	st	Y, r24
     9c8:	80 83       	st	Z, r24
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     9ca:	1d 92       	st	X+, r1
     9cc:	1d 92       	st	X+, r1
     9ce:	36 96       	adiw	r30, 0x06	; 6

****************************************************************************/

static void Reset_Command_Receive_Buffer(void)
{
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
     9d0:	a2 17       	cp	r26, r18
     9d2:	b3 07       	cpc	r27, r19
     9d4:	71 f7       	brne	.-36     	; 0x9b2 <SPI_Initialize+0x2e>
        TX_Index = 0;
        RX_Index = 0;

        Reset_Command_Receive_Buffer();
    }
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <SPI_Start_Command>:

****************************************************************************/

void SPI_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][TX_LENGTH_BYTE];
     9dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Buffer_Index>
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	fc 01       	movw	r30, r24
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	df 01       	movw	r26, r30
     9ea:	a8 0f       	add	r26, r24
     9ec:	b9 1f       	adc	r27, r25
     9ee:	aa 0f       	add	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	ac 59       	subi	r26, 0x9C	; 156
     9f4:	be 4f       	sbci	r27, 0xFE	; 254
     9f6:	2c 91       	ld	r18, X
     9f8:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][RX_LENGTH_BYTE];
     9fc:	fd 01       	movw	r30, r26
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <Expected_RX_Length>

    // If somehow the expected lengths are invalid, set them to 
    // reasonable values
    if (Expected_TX_Length == 0xff) Expected_TX_Length = 1;
     a04:	2f 3f       	cpi	r18, 0xFF	; 255
     a06:	19 f4       	brne	.+6      	; 0xa0e <SPI_Start_Command+0x32>
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <Expected_TX_Length>
    if (Expected_RX_Length == 0xff) Expected_RX_Length = 0;
     a0e:	8f 3f       	cpi	r24, 0xFF	; 255
     a10:	11 f4       	brne	.+4      	; 0xa16 <SPI_Start_Command+0x3a>
     a12:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
     a16:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
     a1a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <TX_Index>
	
	// State in TX
	In_Tx = true;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <In_Tx>

    //Debug line
    if (Expected_TX_Length == 0xff)
     a24:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Expected_TX_Length>
     a28:	8f 3f       	cpi	r24, 0xFF	; 255
     a2a:	99 f4       	brne	.+38     	; 0xa52 <SPI_Start_Command+0x76>
    {
        counter_value++;
     a2c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <counter_value>
     a30:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <counter_value+0x1>
     a34:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <counter_value+0x2>
     a38:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <counter_value+0x3>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	a1 1d       	adc	r26, r1
     a40:	b1 1d       	adc	r27, r1
     a42:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <counter_value>
     a46:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <counter_value+0x1>
     a4a:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <counter_value+0x2>
     a4e:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <counter_value+0x3>
    }

    // Set slave select low to indicate start of transmission
    PORTA &= ~(1<<SS);
     a52:	16 98       	cbi	0x02, 6	; 2
     a54:	08 95       	ret

00000a56 <SPI_End_Command>:
****************************************************************************/

void SPI_End_Command (void)
{
    // Set slave select high to indicate end of transmission
    PORTA |= (1<<SS);
     a56:	16 9a       	sbi	0x02, 6	; 2
     a58:	08 95       	ret

00000a5a <SPI_Transmit>:
****************************************************************************/

void SPI_Transmit (void)
{
    // Send byte out
    SPDR = Command_Buffer[Buffer_Index][TX_Index + LENGTH_BYTES];
     a5a:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <Buffer_Index>
     a5e:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <TX_Index>
     a62:	82 2f       	mov	r24, r18
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	82 0f       	add	r24, r18
     a68:	91 1d       	adc	r25, r1
     a6a:	82 0f       	add	r24, r18
     a6c:	91 1d       	adc	r25, r1
     a6e:	fc 01       	movw	r30, r24
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	ec 59       	subi	r30, 0x9C	; 156
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	e3 0f       	add	r30, r19
     a7a:	f1 1d       	adc	r31, r1
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	8e bd       	out	0x2e, r24	; 46
	
	if (In_Tx)
     a80:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <In_Tx>
     a84:	88 23       	and	r24, r24
     a86:	31 f0       	breq	.+12     	; 0xa94 <SPI_Transmit+0x3a>
	{
		// Increment Transmit Index
		TX_Index++;		
     a88:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <TX_Index>
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <TX_Index>
     a92:	08 95       	ret
		/*
		// Increment Receive Index
		RX_Index++;
		*/
		// Increment Transmit Index
		TX_Index++;
     a94:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <TX_Index>
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <TX_Index>
     a9e:	08 95       	ret

00000aa0 <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	d8 2e       	mov	r13, r24
     ab6:	c6 2e       	mov	r12, r22
     ab8:	ea 01       	movw	r28, r20
     aba:	79 01       	movw	r14, r18
	counter_value = query_counter();
     abc:	0e 94 c7 03 	call	0x78e	; 0x78e <query_counter>
     ac0:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <counter_value>
     ac4:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <counter_value+0x1>
     ac8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <counter_value+0x2>
     acc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     ad0:	8d 2d       	mov	r24, r13
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	8c 01       	movw	r16, r24
     ad6:	0e 5f       	subi	r16, 0xFE	; 254
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     ada:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <Next_Available_Row>
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	de 01       	movw	r26, r28
     ae2:	12 97       	sbiw	r26, 0x02	; 2
     ae4:	c9 01       	movw	r24, r18
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	e0 e0       	ldi	r30, 0x00	; 0
     af4:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     af6:	9c 01       	movw	r18, r24
     af8:	2c 59       	subi	r18, 0x9C	; 156
     afa:	3e 4f       	sbci	r19, 0xFE	; 254
     afc:	59 01       	movw	r10, r18
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
     b02:	30 97       	sbiw	r30, 0x00	; 0
     b04:	19 f4       	brne	.+6      	; 0xb0c <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     b06:	e5 01       	movw	r28, r10
     b08:	d8 82       	st	Y, r13
     b0a:	0e c0       	rjmp	.+28     	; 0xb28 <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
     b0c:	e1 30       	cpi	r30, 0x01	; 1
     b0e:	f1 05       	cpc	r31, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     b12:	e9 01       	movw	r28, r18
     b14:	c8 82       	st	Y, r12
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
     b18:	6c 91       	ld	r22, X
     b1a:	af 01       	movw	r20, r30
     b1c:	48 0f       	add	r20, r24
     b1e:	59 1f       	adc	r21, r25
     b20:	4c 59       	subi	r20, 0x9C	; 156
     b22:	5e 4f       	sbci	r21, 0xFE	; 254
     b24:	ea 01       	movw	r28, r20
     b26:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     b28:	31 96       	adiw	r30, 0x01	; 1
     b2a:	11 96       	adiw	r26, 0x01	; 1
     b2c:	e0 17       	cp	r30, r16
     b2e:	f1 07       	cpc	r31, r17
     b30:	44 f3       	brlt	.-48     	; 0xb02 <Write_SPI+0x62>
     b32:	32 c0       	rjmp	.+100    	; 0xb98 <Write_SPI+0xf8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
     b34:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Next_Available_Row>
     b38:	89 30       	cpi	r24, 0x09	; 9
     b3a:	19 f4       	brne	.+6      	; 0xb42 <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
     b3c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <Next_Available_Row>
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
     b48:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Query_SPI_State>
     b4c:	81 11       	cpse	r24, r1
     b4e:	27 c0       	rjmp	.+78     	; 0xb9e <Write_SPI+0xfe>
     b50:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <Buffer_Index>
     b54:	82 2f       	mov	r24, r18
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	82 0f       	add	r24, r18
     b5a:	91 1d       	adc	r25, r1
     b5c:	82 0f       	add	r24, r18
     b5e:	91 1d       	adc	r25, r1
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	fc 01       	movw	r30, r24
     b66:	ec 59       	subi	r30, 0x9C	; 156
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	b9 f0       	breq	.+46     	; 0xb9e <Write_SPI+0xfe>
    {
        Post_Event(EVT_SPI_START);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	78 e0       	ldi	r23, 0x08	; 8
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
     b7c:	10 c0       	rjmp	.+32     	; 0xb9e <Write_SPI+0xfe>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
     b7e:	f7 01       	movw	r30, r14
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Next_Available_Row>
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e0 5b       	subi	r30, 0xB0	; 176
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	80 83       	st	Z, r24
     b96:	ce cf       	rjmp	.-100    	; 0xb34 <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
     b98:	c1 10       	cpse	r12, r1
     b9a:	f1 cf       	rjmp	.-30     	; 0xb7e <Write_SPI+0xde>
     b9c:	cb cf       	rjmp	.-106    	; 0xb34 <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
    {
        Post_Event(EVT_SPI_START);
    }
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	08 95       	ret

00000bb4 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
     bd6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Master_Slave_Identifier>
     bda:	81 11       	cpse	r24, r1
     bdc:	8b c0       	rjmp	.+278    	; 0xcf4 <__vector_14+0x140>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
     bde:	8d b5       	in	r24, 0x2d	; 45
        // Do nothing if statement to "use" the variable
        if (SPSR_Status);
		
		// Once a transmit has been completed
		if (In_Tx)
     be0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <In_Tx>
     be4:	88 23       	and	r24, r24
     be6:	e1 f0       	breq	.+56     	; 0xc20 <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
     be8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <TX_Index>
     bec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Expected_TX_Length>
     bf0:	89 17       	cp	r24, r25
     bf2:	a0 f0       	brcs	.+40     	; 0xc1c <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
     bf4:	98 13       	cpse	r25, r24
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <__vector_14+0x52>
     bf8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <Expected_RX_Length>
     bfc:	81 11       	cpse	r24, r1
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <__vector_14+0x52>
				{
					In_Tx = false;									
     c00:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <In_Tx>
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e1       	ldi	r23, 0x10	; 16
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
     c12:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <In_Tx>
     c16:	81 11       	cpse	r24, r1
     c18:	6d c0       	rjmp	.+218    	; 0xcf4 <__vector_14+0x140>
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
     c1c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
     c20:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Expected_RX_Length>
     c24:	99 23       	and	r25, r25
     c26:	09 f1       	breq	.+66     	; 0xc6a <__vector_14+0xb6>
			{
                if (Receive_List[Buffer_Index][RX_Index] == NULL)
     c28:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <RX_Index>
     c2c:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <Buffer_Index>
     c30:	e8 2f       	mov	r30, r24
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	e2 0f       	add	r30, r18
     c36:	f1 1d       	adc	r31, r1
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e0 5b       	subi	r30, 0xB0	; 176
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	01 90       	ld	r0, Z+
     c42:	f0 81       	ld	r31, Z
     c44:	e0 2d       	mov	r30, r0
     c46:	30 97       	sbiw	r30, 0x00	; 0
     c48:	11 f4       	brne	.+4      	; 0xc4e <__vector_14+0x9a>
                {
                    if (SPDR);
     c4a:	2e b5       	in	r18, 0x2e	; 46
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__vector_14+0x9e>
                }
                else
                {
                    *(Receive_List[Buffer_Index][RX_Index]) = SPDR;
     c4e:	2e b5       	in	r18, 0x2e	; 46
     c50:	20 83       	st	Z, r18
                }
				RX_Index++;				
     c52:	8f 5f       	subi	r24, 0xFF	; 255
     c54:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
     c58:	89 17       	cp	r24, r25
     c5a:	38 f4       	brcc	.+14     	; 0xc6a <__vector_14+0xb6>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e2       	ldi	r23, 0x20	; 32
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
     c68:	45 c0       	rjmp	.+138    	; 0xcf4 <__vector_14+0x140>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
     c6a:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <Buffer_Index>
     c6e:	83 2f       	mov	r24, r19
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	ac 01       	movw	r20, r24
     c74:	44 0f       	add	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	fa 01       	movw	r30, r20
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ec 59       	subi	r30, 0x9C	; 156
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	20 83       	st	Z, r18
     c8a:	21 83       	std	Z+1, r18	; 0x01
     c8c:	22 83       	std	Z+2, r18	; 0x02
     c8e:	23 83       	std	Z+3, r18	; 0x03
     c90:	24 83       	std	Z+4, r18	; 0x04
     c92:	fa 01       	movw	r30, r20
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ec 59       	subi	r30, 0x9C	; 156
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
     ca2:	fa 01       	movw	r30, r20
     ca4:	e0 5b       	subi	r30, 0xB0	; 176
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	11 82       	std	Z+1, r1	; 0x01
     caa:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
     cac:	39 30       	cpi	r19, 0x09	; 9
     cae:	19 f4       	brne	.+6      	; 0xcb6 <__vector_14+0x102>
    {
        Buffer_Index = 0;
     cb0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Buffer_Index>
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <__vector_14+0x108>
    }
    else
    {
        Buffer_Index++;
     cb6:	3f 5f       	subi	r19, 0xFF	; 255
     cb8:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
     cbc:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <Buffer_Index>
     cc0:	82 2f       	mov	r24, r18
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	82 0f       	add	r24, r18
     cc6:	91 1d       	adc	r25, r1
     cc8:	82 0f       	add	r24, r18
     cca:	91 1d       	adc	r25, r1
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	fc 01       	movw	r30, r24
     cd2:	ec 59       	subi	r30, 0x9C	; 156
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 3f       	cpi	r24, 0xFF	; 255
     cda:	31 f0       	breq	.+12     	; 0xce8 <__vector_14+0x134>
    {
        Post_Event(EVT_SPI_START);
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	78 e0       	ldi	r23, 0x08	; 8
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e4       	ldi	r23, 0x40	; 64
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <Init_SPI_Service>:

****************************************************************************/
void Init_SPI_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_STATE;
     d16:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Current_State>

    // Initialize SPI
    SPI_Initialize();
     d1a:	0e 94 c2 04 	call	0x984	; 0x984 <SPI_Initialize>
     d1e:	08 95       	ret

00000d20 <Run_SPI_Service>:
        Processes events for SPI Message transmit/receive

****************************************************************************/
void Run_SPI_Service(uint32_t event_mask)
{
	switch(Current_State)
     d20:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <Current_State>
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	a9 f0       	breq	.+42     	; 0xd52 <Run_SPI_Service+0x32>
     d28:	18 f0       	brcs	.+6      	; 0xd30 <Run_SPI_Service+0x10>
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	89 f1       	breq	.+98     	; 0xd90 <Run_SPI_Service+0x70>
     d2e:	08 95       	ret
    {	
		case NORMAL_STATE:
			if (EVT_SPI_START == event_mask)
     d30:	61 15       	cp	r22, r1
     d32:	78 40       	sbci	r23, 0x08	; 8
     d34:	81 05       	cpc	r24, r1
     d36:	91 05       	cpc	r25, r1
     d38:	e9 f5       	brne	.+122    	; 0xdb4 <Run_SPI_Service+0x94>
			{			
                // Initialize SPI for particular command
                SPI_Start_Command();
     d3a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <SPI_Start_Command>
				// Switch to sending state
				Current_State = SENDING_STATE;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_SPI_SEND_BYTE);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e1       	ldi	r23, 0x10	; 16
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
     d50:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_SPI_SEND_BYTE == event_mask)
     d52:	61 15       	cp	r22, r1
     d54:	20 e1       	ldi	r18, 0x10	; 16
     d56:	72 07       	cpc	r23, r18
     d58:	81 05       	cpc	r24, r1
     d5a:	91 05       	cpc	r25, r1
     d5c:	19 f4       	brne	.+6      	; 0xd64 <Run_SPI_Service+0x44>
			{
    			SPI_Transmit();
     d5e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <SPI_Transmit>
     d62:	08 95       	ret
			}
			else if (EVT_SPI_RECV_BYTE == event_mask)
     d64:	61 15       	cp	r22, r1
     d66:	20 e2       	ldi	r18, 0x20	; 32
     d68:	72 07       	cpc	r23, r18
     d6a:	81 05       	cpc	r24, r1
     d6c:	91 05       	cpc	r25, r1
     d6e:	31 f4       	brne	.+12     	; 0xd7c <Run_SPI_Service+0x5c>
			{
                SPI_Transmit();
     d70:	0e 94 2d 05 	call	0xa5a	; 0xa5a <SPI_Transmit>
				Current_State = RECEIVING_STATE;				
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <Current_State>
     d7a:	08 95       	ret
			}
			else if (EVT_SPI_END == event_mask)
     d7c:	61 15       	cp	r22, r1
     d7e:	70 44       	sbci	r23, 0x40	; 64
     d80:	81 05       	cpc	r24, r1
     d82:	91 05       	cpc	r25, r1
     d84:	b9 f4       	brne	.+46     	; 0xdb4 <Run_SPI_Service+0x94>
			{
                SPI_End_Command();
     d86:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_End_Command>
				Current_State = NORMAL_STATE;
     d8a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Current_State>
     d8e:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_SPI_RECV_BYTE == event_mask)
     d90:	61 15       	cp	r22, r1
     d92:	20 e2       	ldi	r18, 0x20	; 32
     d94:	72 07       	cpc	r23, r18
     d96:	81 05       	cpc	r24, r1
     d98:	91 05       	cpc	r25, r1
     d9a:	19 f4       	brne	.+6      	; 0xda2 <Run_SPI_Service+0x82>
            {
                SPI_Transmit();
     d9c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <SPI_Transmit>
     da0:	08 95       	ret
            }
            if (EVT_SPI_END == event_mask)
     da2:	61 15       	cp	r22, r1
     da4:	70 44       	sbci	r23, 0x40	; 64
     da6:	81 05       	cpc	r24, r1
     da8:	91 05       	cpc	r25, r1
     daa:	21 f4       	brne	.+8      	; 0xdb4 <Run_SPI_Service+0x94>
            {
                SPI_End_Command();
     dac:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_End_Command>
                Current_State = NORMAL_STATE;
     db0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Current_State>
     db4:	08 95       	ret

00000db6 <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
     db6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <Current_State>
     dba:	08 95       	ret

00000dbc <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
     dbc:	e2 ea       	ldi	r30, 0xA2	; 162
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	a6 ea       	ldi	r26, 0xA6	; 166
     dc2:	b1 e0       	ldi	r27, 0x01	; 1
     dc4:	83 ee       	ldi	r24, 0xE3	; 227
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1
     dcc:	13 82       	std	Z+3, r1	; 0x03
     dce:	12 82       	std	Z+2, r1	; 0x02
     dd0:	1c 92       	st	X, r1
     dd2:	15 82       	std	Z+5, r1	; 0x05
     dd4:	16 82       	std	Z+6, r1	; 0x06
     dd6:	17 82       	std	Z+7, r1	; 0x07
     dd8:	10 86       	std	Z+8, r1	; 0x08
     dda:	11 86       	std	Z+9, r1	; 0x09
     ddc:	12 86       	std	Z+10, r1	; 0x0a
     dde:	13 86       	std	Z+11, r1	; 0x0b
     de0:	14 86       	std	Z+12, r1	; 0x0c
     de2:	3d 96       	adiw	r30, 0x0d	; 13
     de4:	1d 96       	adiw	r26, 0x0d	; 13
     de6:	e8 17       	cp	r30, r24
     de8:	f9 07       	cpc	r31, r25
     dea:	71 f7       	brne	.-36     	; 0xdc8 <Init_Timer_Module+0xc>
     dec:	15 bc       	out	0x25, r1	; 37
     dee:	16 bc       	out	0x26, r1	; 38
     df0:	18 bc       	out	0x28, r1	; 40
     df2:	88 b5       	in	r24, 0x28	; 40
     df4:	83 58       	subi	r24, 0x83	; 131
     df6:	88 bd       	out	0x28, r24	; 40
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     dfe:	16 bc       	out	0x26, r1	; 38
     e00:	86 b5       	in	r24, 0x26	; 38
     e02:	83 60       	ori	r24, 0x03	; 3
     e04:	86 bd       	out	0x26, r24	; 38
     e06:	08 95       	ret

00000e08 <Register_Timer>:
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	c0 91 a2 01 	lds	r28, 0x01A2	; 0x8001a2 <Timers>
     e10:	d0 91 a3 01 	lds	r29, 0x01A3	; 0x8001a3 <Timers+0x1>
     e14:	c8 17       	cp	r28, r24
     e16:	d9 07       	cpc	r29, r25
     e18:	09 f4       	brne	.+2      	; 0xe1c <Register_Timer+0x14>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <Register_Timer+0x9a>
     e1c:	a2 ea       	ldi	r26, 0xA2	; 162
     e1e:	b1 e0       	ldi	r27, 0x01	; 1
     e20:	46 ed       	ldi	r20, 0xD6	; 214
     e22:	51 e0       	ldi	r21, 0x01	; 1
     e24:	fd 01       	movw	r30, r26
     e26:	25 85       	ldd	r18, Z+13	; 0x0d
     e28:	36 85       	ldd	r19, Z+14	; 0x0e
     e2a:	28 17       	cp	r18, r24
     e2c:	39 07       	cpc	r19, r25
     e2e:	c9 f1       	breq	.+114    	; 0xea2 <Register_Timer+0x9a>
     e30:	3d 96       	adiw	r30, 0x0d	; 13
     e32:	e4 17       	cp	r30, r20
     e34:	f5 07       	cpc	r31, r21
     e36:	b9 f7       	brne	.-18     	; 0xe26 <Register_Timer+0x1e>
     e38:	2f c0       	rjmp	.+94     	; 0xe98 <Register_Timer+0x90>
     e3a:	1d 96       	adiw	r26, 0x0d	; 13
     e3c:	4d 91       	ld	r20, X+
     e3e:	5c 91       	ld	r21, X
     e40:	1e 97       	sbiw	r26, 0x0e	; 14
     e42:	45 2b       	or	r20, r21
     e44:	11 f5       	brne	.+68     	; 0xe8a <Register_Timer+0x82>
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <Register_Timer+0x44>
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4f b7       	in	r20, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	f9 01       	movw	r30, r18
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	e2 0f       	add	r30, r18
     e58:	f3 1f       	adc	r31, r19
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	2e 0f       	add	r18, r30
     e64:	3f 1f       	adc	r19, r31
     e66:	f9 01       	movw	r30, r18
     e68:	ee 55       	subi	r30, 0x5E	; 94
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
     e70:	73 83       	std	Z+3, r23	; 0x03
     e72:	62 83       	std	Z+2, r22	; 0x02
     e74:	14 82       	std	Z+4, r1	; 0x04
     e76:	15 82       	std	Z+5, r1	; 0x05
     e78:	16 82       	std	Z+6, r1	; 0x06
     e7a:	17 82       	std	Z+7, r1	; 0x07
     e7c:	10 86       	std	Z+8, r1	; 0x08
     e7e:	11 86       	std	Z+9, r1	; 0x09
     e80:	12 86       	std	Z+10, r1	; 0x0a
     e82:	13 86       	std	Z+11, r1	; 0x0b
     e84:	14 86       	std	Z+12, r1	; 0x0c
     e86:	4f bf       	out	0x3f, r20	; 63
     e88:	0c c0       	rjmp	.+24     	; 0xea2 <Register_Timer+0x9a>
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	1d 96       	adiw	r26, 0x0d	; 13
     e90:	25 30       	cpi	r18, 0x05	; 5
     e92:	31 05       	cpc	r19, r1
     e94:	91 f6       	brne	.-92     	; 0xe3a <Register_Timer+0x32>
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <Register_Timer+0x9a>
     e98:	cd 2b       	or	r28, r29
     e9a:	b1 f2       	breq	.-84     	; 0xe48 <Register_Timer+0x40>
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	cc cf       	rjmp	.-104    	; 0xe3a <Register_Timer+0x32>
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <Start_Timer>:
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <Timers>
     eb4:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <Timers+0x1>
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	51 f0       	breq	.+20     	; 0xed2 <Start_Timer+0x2a>
     ebe:	e2 ea       	ldi	r30, 0xA2	; 162
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a5 85       	ldd	r26, Z+13	; 0x0d
     ec8:	b6 85       	ldd	r27, Z+14	; 0x0e
     eca:	a8 17       	cp	r26, r24
     ecc:	b9 07       	cpc	r27, r25
     ece:	29 f5       	brne	.+74     	; 0xf1a <Start_Timer+0x72>
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <Start_Timer+0x2e>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8f b7       	in	r24, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	f9 01       	movw	r30, r18
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	2e 0f       	add	r18, r30
     eee:	3f 1f       	adc	r19, r31
     ef0:	f9 01       	movw	r30, r18
     ef2:	ee 55       	subi	r30, 0x5E	; 94
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	94 83       	std	Z+4, r25	; 0x04
     efa:	15 82       	std	Z+5, r1	; 0x05
     efc:	16 82       	std	Z+6, r1	; 0x06
     efe:	17 82       	std	Z+7, r1	; 0x07
     f00:	10 86       	std	Z+8, r1	; 0x08
     f02:	6a 01       	movw	r12, r20
     f04:	7b 01       	movw	r14, r22
     f06:	cc 0c       	add	r12, r12
     f08:	dd 1c       	adc	r13, r13
     f0a:	ee 1c       	adc	r14, r14
     f0c:	ff 1c       	adc	r15, r15
     f0e:	c1 86       	std	Z+9, r12	; 0x09
     f10:	d2 86       	std	Z+10, r13	; 0x0a
     f12:	e3 86       	std	Z+11, r14	; 0x0b
     f14:	f4 86       	std	Z+12, r15	; 0x0c
     f16:	8f bf       	out	0x3f, r24	; 63
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <Start_Timer+0x7e>
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	3d 96       	adiw	r30, 0x0d	; 13
     f20:	25 30       	cpi	r18, 0x05	; 5
     f22:	31 05       	cpc	r19, r1
     f24:	81 f6       	brne	.-96     	; 0xec6 <Start_Timer+0x1e>
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	08 95       	ret

00000f30 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	4f 93       	push	r20
     f48:	5f 93       	push	r21
     f4a:	6f 93       	push	r22
     f4c:	7f 93       	push	r23
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	af 93       	push	r26
     f54:	bf 93       	push	r27
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
     f5e:	88 b5       	in	r24, 0x28	; 40
     f60:	83 58       	subi	r24, 0x83	; 131
     f62:	88 bd       	out	0x28, r24	; 40
     f64:	06 ea       	ldi	r16, 0xA6	; 166
     f66:	11 e0       	ldi	r17, 0x01	; 1
     f68:	c2 ea       	ldi	r28, 0xA2	; 162
     f6a:	d1 e0       	ldi	r29, 0x01	; 1
     f6c:	0f 2e       	mov	r0, r31
     f6e:	f3 ee       	ldi	r31, 0xE3	; 227
     f70:	ef 2e       	mov	r14, r31
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	ff 2e       	mov	r15, r31
     f76:	f0 2d       	mov	r31, r0
     f78:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
     f7a:	80 81       	ld	r24, Z
     f7c:	88 23       	and	r24, r24
     f7e:	81 f1       	breq	.+96     	; 0xfe0 <__vector_10+0xb0>
     f80:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
     f82:	89 85       	ldd	r24, Y+9	; 0x09
     f84:	9a 85       	ldd	r25, Y+10	; 0x0a
     f86:	ab 85       	ldd	r26, Y+11	; 0x0b
     f88:	bc 85       	ldd	r27, Y+12	; 0x0c
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	a1 05       	cpc	r26, r1
     f8e:	b1 05       	cpc	r27, r1
     f90:	b9 f0       	breq	.+46     	; 0xfc0 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
     f92:	4d 81       	ldd	r20, Y+5	; 0x05
     f94:	5e 81       	ldd	r21, Y+6	; 0x06
     f96:	6f 81       	ldd	r22, Y+7	; 0x07
     f98:	78 85       	ldd	r23, Y+8	; 0x08
     f9a:	4f 5f       	subi	r20, 0xFF	; 255
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	6f 4f       	sbci	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	4d 83       	std	Y+5, r20	; 0x05
     fa4:	5e 83       	std	Y+6, r21	; 0x06
     fa6:	6f 83       	std	Y+7, r22	; 0x07
     fa8:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	a1 09       	sbc	r26, r1
     fae:	b1 09       	sbc	r27, r1
     fb0:	89 87       	std	Y+9, r24	; 0x09
     fb2:	9a 87       	std	Y+10, r25	; 0x0a
     fb4:	ab 87       	std	Y+11, r26	; 0x0b
     fb6:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
     fb8:	89 2b       	or	r24, r25
     fba:	8a 2b       	or	r24, r26
     fbc:	8b 2b       	or	r24, r27
     fbe:	81 f4       	brne	.+32     	; 0xfe0 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
     fc0:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
     fc2:	d9 01       	movw	r26, r18
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	ed 91       	ld	r30, X+
     fc8:	fc 91       	ld	r31, X
     fca:	13 97       	sbiw	r26, 0x03	; 3
     fcc:	30 97       	sbiw	r30, 0x00	; 0
     fce:	41 f0       	breq	.+16     	; 0xfe0 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	dc 01       	movw	r26, r24
     fd6:	6d 91       	ld	r22, X+
     fd8:	7d 91       	ld	r23, X+
     fda:	8d 91       	ld	r24, X+
     fdc:	9c 91       	ld	r25, X
     fde:	09 95       	icall
     fe0:	03 5f       	subi	r16, 0xF3	; 243
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
     fe6:	ce 15       	cp	r28, r14
     fe8:	df 05       	cpc	r29, r15
     fea:	31 f6       	brne	.-116    	; 0xf78 <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <UART_Initialize>:
	// Rx -> A0
	// Tx -> A1
	
	//DDRA &= ~(1<<PINA0);
	//PORTA &= ~(1<<PINA0);
	PORTB &= ~(1<<PINB5);
    101a:	2d 98       	cbi	0x05, 5	; 5
	DDRB |= (1<<PINB5);
    101c:	25 9a       	sbi	0x04, 5	; 4
	
	// Reset UART
	LINCR |= (1<<LSWRES);
    101e:	e8 ec       	ldi	r30, 0xC8	; 200
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	20 81       	ld	r18, Z
    1024:	20 68       	ori	r18, 0x80	; 128
    1026:	20 83       	st	Z, r18
	
    // Set up LINCR with
	// - Command Mode = TxRx Enabled
	// - UART Enable
	// - Odd Parity	
	LINCR = (0<<LCMD0)|(1<<LCMD1)|(1<<LCMD2)|(1<<LENA)|(0<<LCONF0)|(0<<LCONF1);
    1028:	2e e0       	ldi	r18, 0x0E	; 14
    102a:	20 83       	st	Z, r18
	
	// Set up LINBTR
	LINBTR = (1<<LDISR);
    102c:	20 e8       	ldi	r18, 0x80	; 128
    102e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	
	// 19200 baud
	LINBRRL = 12;//(1<<LDIV0);
    1032:	2c e0       	ldi	r18, 0x0C	; 12
    1034:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
	LINBRRH = 0;
    1038:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    
	// LIN Interrupt Enable
	//LINENIR = (1<<LENERR)|(1<<LENTXOK)|(1<<LENRXOK);
	LINENIR = (0<<LENTXOK)|(1<<LENRXOK);
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	// Reset indices
    Buffer_Index = 0;
    1042:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Buffer_Index>
    TX_Index = 0;
    1046:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <TX_Index>
	RX_Index = 0;
    104a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <RX_Index>
	
	Modem_Recv_Data = pCanTXPacket;
    104e:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <Modem_Recv_Data+0x1>
    1052:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <Modem_Recv_Data>
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
    1056:	e9 ef       	ldi	r30, 0xF9	; 249
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	80 83       	st	Z, r24
    105e:	81 83       	std	Z+1, r24	; 0x01
    1060:	82 83       	std	Z+2, r24	; 0x02
    1062:	83 83       	std	Z+3, r24	; 0x03
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
    1064:	a5 ef       	ldi	r26, 0xF5	; 245
    1066:	b1 e0       	ldi	r27, 0x01	; 1
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	1c 92       	st	X, r1
    106c:	1e 92       	st	-X, r1
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
    106e:	84 83       	std	Z+4, r24	; 0x04
    1070:	85 83       	std	Z+5, r24	; 0x05
    1072:	86 83       	std	Z+6, r24	; 0x06
    1074:	87 83       	std	Z+7, r24	; 0x07
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
    1076:	13 96       	adiw	r26, 0x03	; 3
    1078:	1c 92       	st	X, r1
    107a:	1e 92       	st	-X, r1
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	08 95       	ret

00001080 <UART_Start_Command>:

****************************************************************************/

void UART_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE];
    1080:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Buffer_Index>
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	e7 50       	subi	r30, 0x07	; 7
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	80 81       	ld	r24, Z
    1094:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][UART_RX_LENGTH_BYTE];
    1098:	81 81       	ldd	r24, Z+1	; 0x01
    109a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
    109e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
    10a2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <TX_Index>
	
	// State in TX
	In_Tx = true;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <In_Tx>
    10ac:	08 95       	ret

000010ae <UART_End_Command>:
        Ends UART Transmission by setting SS high

****************************************************************************/

void UART_End_Command (void)
{
    10ae:	08 95       	ret

000010b0 <UART_Transmit>:

****************************************************************************/

void UART_Transmit (void)
{
	if (!modem_init)
    10b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <modem_init>
    10b4:	81 11       	cpse	r24, r1
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <UART_Transmit+0x34>
	{
		// Send byte out
		LINDAT = Command_Buffer[Buffer_Index][TX_Index + UART_LENGTH_BYTES];
    10b8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Buffer_Index>
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <TX_Index>
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	e7 50       	subi	r30, 0x07	; 7
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	e8 0f       	add	r30, r24
    10d0:	f1 1d       	adc	r31, r1
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		TX_Index++;
    10d8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <TX_Index>
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <TX_Index>
    10e2:	08 95       	ret
		//}
	}
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
    10e4:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <Text_Index>
    10e8:	82 2f       	mov	r24, r18
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	fc 01       	movw	r30, r24
    10ee:	e0 5b       	subi	r30, 0xB0	; 176
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	34 91       	lpm	r19, Z
    10f4:	3f 32       	cpi	r19, 0x2F	; 47
    10f6:	59 f4       	brne	.+22     	; 0x110e <UART_Transmit+0x5e>
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
    10f8:	fc 01       	movw	r30, r24
    10fa:	ef 5a       	subi	r30, 0xAF	; 175
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	e4 91       	lpm	r30, Z
    1100:	e2 37       	cpi	r30, 0x72	; 114
    1102:	39 f4       	brne	.+14     	; 0x1112 <UART_Transmit+0x62>
				set_as = 0x0D;
				Text_Index++;
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <Text_Index>
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
				set_as = 0x0D;
    110a:	ed e0       	ldi	r30, 0x0D	; 13
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <UART_Transmit+0x64>
				set_as = '/';	
			}
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
    110e:	e4 91       	lpm	r30, Z
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <UART_Transmit+0x64>
				set_as = 0x0D;
				Text_Index++;
			}
			
			else {
				set_as = '/';	
    1112:	ef e2       	ldi	r30, 0x2F	; 47
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
		}
		LINDAT = set_as;
    1114:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		Text_Index++;
    1118:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Text_Index>
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Text_Index>
    1122:	08 95       	ret

00001124 <Write_UART>:
    Description
        Fills in current command into UART command buffer
****************************************************************************/

void Write_UART(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive, bool Init_Seq)
{
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	d8 2e       	mov	r13, r24
    1136:	c6 2e       	mov	r12, r22
    1138:	ea 01       	movw	r28, r20
    113a:	79 01       	movw	r14, r18
	if (!Init_Seq)
    113c:	01 11       	cpse	r16, r1
    113e:	4f c0       	rjmp	.+158    	; 0x11de <Write_UART+0xba>
	{
		modem_init = false;
    1140:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <modem_init>
		counter_value = query_counter();
    1144:	0e 94 c7 03 	call	0x78e	; 0x78e <query_counter>
    1148:	60 93 e9 01 	sts	0x01E9, r22	; 0x8001e9 <counter_value>
    114c:	70 93 ea 01 	sts	0x01EA, r23	; 0x8001ea <counter_value+0x1>
    1150:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <counter_value+0x2>
    1154:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <counter_value+0x3>
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    1158:	0d 2d       	mov	r16, r13
    115a:	10 e0       	ldi	r17, 0x00	; 0
    115c:	0e 5f       	subi	r16, 0xFE	; 254
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    1160:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <Next_Available_Row>
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	de 01       	movw	r26, r28
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	c9 01       	movw	r24, r18
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	e0 e0       	ldi	r30, 0x00	; 0
    1176:	f0 e0       	ldi	r31, 0x00	; 0
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    1178:	9c 01       	movw	r18, r24
    117a:	27 50       	subi	r18, 0x07	; 7
    117c:	3e 4f       	sbci	r19, 0xFE	; 254
    117e:	a9 01       	movw	r20, r18
    1180:	4f 5f       	subi	r20, 0xFF	; 255
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
    1184:	30 97       	sbiw	r30, 0x00	; 0
    1186:	19 f4       	brne	.+6      	; 0x118e <Write_UART+0x6a>
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    1188:	e9 01       	movw	r28, r18
    118a:	d8 82       	st	Y, r13
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <Write_UART+0x84>
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
    118e:	e1 30       	cpi	r30, 0x01	; 1
    1190:	f1 05       	cpc	r31, r1
    1192:	19 f4       	brne	.+6      	; 0x119a <Write_UART+0x76>
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    1194:	ea 01       	movw	r28, r20
    1196:	c8 82       	st	Y, r12
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <Write_UART+0x84>
			}
			// Fill in remaining data to TX
			else
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
    119a:	6c 91       	ld	r22, X
    119c:	ef 01       	movw	r28, r30
    119e:	c8 0f       	add	r28, r24
    11a0:	d9 1f       	adc	r29, r25
    11a2:	c7 50       	subi	r28, 0x07	; 7
    11a4:	de 4f       	sbci	r29, 0xFE	; 254
    11a6:	68 83       	st	Y, r22
	{
		modem_init = false;
		counter_value = query_counter();
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    11a8:	31 96       	adiw	r30, 0x01	; 1
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	e0 17       	cp	r30, r16
    11ae:	f1 07       	cpc	r31, r17
    11b0:	4c f3       	brlt	.-46     	; 0x1184 <Write_UART+0x60>
    11b2:	2a c0       	rjmp	.+84     	; 0x1208 <Write_UART+0xe4>
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
			}
		}
		// If reached Command Buffer end
		if (Next_Available_Row == UART_COMMAND_BUFFER_SIZE - 1)
    11b4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Next_Available_Row>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <Write_UART+0x9e>
		{
			Next_Available_Row = 0;
    11bc:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <Next_Available_Row>
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <Write_UART+0xa4>
		}
		else
		{
			Next_Available_Row++;
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Next_Available_Row>
		}
		// If UART is currently idling, start transmission
		if (Query_UART_State() == NORMAL_UART_STATE)
    11c8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Query_UART_State>
    11cc:	81 11       	cpse	r24, r1
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <Write_UART+0xea>
		{
			Post_Event(EVT_UART_START);
    11d0:	60 e8       	ldi	r22, 0x80	; 128
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
    11dc:	18 c0       	rjmp	.+48     	; 0x120e <Write_UART+0xea>
		}
	}
	else
	{
		modem_init = true;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <modem_init>
		Text_Index = 0;
    11e4:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <Text_Index>
		UART_Transmit();
    11e8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <Write_UART+0xea>
		if (RX_Length > 0)
		{
			for (int i = 0; i < RX_Length; i++)
			{
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
    11ee:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <Next_Available_Row>
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	eb 50       	subi	r30, 0x0B	; 11
    11fa:	fe 4f       	sbci	r31, 0xFE	; 254
    11fc:	d7 01       	movw	r26, r14
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	d6 cf       	rjmp	.-84     	; 0x11b4 <Write_UART+0x90>
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
			}
		}
		// Data is expected to be received
		if (RX_Length > 0)
    1208:	c1 10       	cpse	r12, r1
    120a:	f1 cf       	rjmp	.-30     	; 0x11ee <Write_UART+0xca>
    120c:	d3 cf       	rjmp	.-90     	; 0x11b4 <Write_UART+0x90>
	{
		modem_init = true;
		Text_Index = 0;
		UART_Transmit();
	}	
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	08 95       	ret

00001220 <__vector_12>:
        Handles UART transmission completed interrupts

****************************************************************************/

ISR(LIN_TC_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
	//LINSIR = (1<<3)|(1<<2)|(1<<1)|(1<<0);
	
	// Received a byte
	if (LINSIR & RX_ISR_FLAG)	
    1242:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    1246:	80 ff       	sbrs	r24, 0
    1248:	5f c0       	rjmp	.+190    	; 0x1308 <__vector_12+0xe8>
	//if (!modem_init && !In_Tx)
	{
		LINSIR |= RX_ISR_FLAG;	// Clear Receive Flag
    124a:	e9 ec       	ldi	r30, 0xC9	; 201
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	80 83       	st	Z, r24
		
		// If the correct sequence was received, prepare to store packet sent from phone
		if (first_byte_T && second_byte_slash_n && third_slash_r)
    1254:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <first_byte_T>
    1258:	88 23       	and	r24, r24
    125a:	41 f1       	breq	.+80     	; 0x12ac <__vector_12+0x8c>
    125c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <second_byte_slash_n>
    1260:	88 23       	and	r24, r24
    1262:	21 f1       	breq	.+72     	; 0x12ac <__vector_12+0x8c>
    1264:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <third_slash_r>
    1268:	88 23       	and	r24, r24
    126a:	01 f1       	breq	.+64     	; 0x12ac <__vector_12+0x8c>
		{
			Modem_Recv_Data[byte_space_counter - 1] = LINDAT;
    126c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <byte_space_counter>
    1270:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    1274:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <Modem_Recv_Data>
    1278:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <Modem_Recv_Data+0x1>
    127c:	e8 0f       	add	r30, r24
    127e:	f1 1d       	adc	r31, r1
    1280:	31 97       	sbiw	r30, 0x01	; 1
    1282:	90 83       	st	Z, r25
			byte_space_counter++;
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <byte_space_counter>
			
			if (byte_space_counter >= MAX_MODEM_RECEIVE + 1)
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	08 f4       	brcc	.+2      	; 0x1290 <__vector_12+0x70>
    128e:	d5 c0       	rjmp	.+426    	; 0x143a <__vector_12+0x21a>
			{
				PORTB |= (1<<PINB5);
    1290:	2d 9a       	sbi	0x05, 5	; 5
				first_byte_T = false;
    1292:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <first_byte_T>
				second_byte_slash_n = false;
    1296:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <second_byte_slash_n>
				third_slash_r = false;
    129a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <third_slash_r>
				Post_Event(EVT_MODEM_NEW_PACKAGE);
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e8       	ldi	r23, 0x80	; 128
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
    12aa:	c7 c0       	rjmp	.+398    	; 0x143a <__vector_12+0x21a>
		}
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			PORTB &= ~(1<<PINB5);
    12ac:	2d 98       	cbi	0x05, 5	; 5
			uint8_t Current_Read = LINDAT;
    12ae:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
    12b2:	84 35       	cpi	r24, 0x54	; 84
    12b4:	31 f4       	brne	.+12     	; 0x12c2 <__vector_12+0xa2>
			{
				byte_space_counter = 0;
    12b6:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <byte_space_counter>
				first_byte_T = true;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <first_byte_T>
    12c0:	1d c0       	rjmp	.+58     	; 0x12fc <__vector_12+0xdc>
			}
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
    12c2:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <first_byte_T>
    12c6:	99 23       	and	r25, r25
    12c8:	99 f0       	breq	.+38     	; 0x12f0 <__vector_12+0xd0>
    12ca:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <byte_space_counter>
    12ce:	91 30       	cpi	r25, 0x01	; 1
    12d0:	79 f4       	brne	.+30     	; 0x12f0 <__vector_12+0xd0>
    12d2:	8d 30       	cpi	r24, 0x0D	; 13
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <__vector_12+0xb8>
    12d6:	ac c0       	rjmp	.+344    	; 0x1430 <__vector_12+0x210>
			{
				second_byte_slash_n = true;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <second_byte_slash_n>
				byte_space_counter = 0;
    12de:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <byte_space_counter>
    12e2:	0c c0       	rjmp	.+24     	; 0x12fc <__vector_12+0xdc>
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
			{
				third_slash_r = true;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <third_slash_r>
				byte_space_counter = 0;
    12ea:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <byte_space_counter>
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <__vector_12+0xdc>
			}
			else {
				first_byte_T = false;
    12f0:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <first_byte_T>
				second_byte_slash_n = false;
    12f4:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <second_byte_slash_n>
				third_slash_r = false;
    12f8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <third_slash_r>
			}
			byte_space_counter++;
    12fc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <byte_space_counter>
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <byte_space_counter>
    1306:	99 c0       	rjmp	.+306    	; 0x143a <__vector_12+0x21a>
		}
	}
	
	// Completed transmission of a byte
	else if (LINSIR && TX_ISR_FLAG)
    1308:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <__vector_12+0xf2>
    1310:	94 c0       	rjmp	.+296    	; 0x143a <__vector_12+0x21a>
	{
		LINSIR |= TX_ISR_FLAG;	// Clear Transmit flag
    1312:	e9 ec       	ldi	r30, 0xC9	; 201
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
		if (!modem_init)
    131c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <modem_init>
    1320:	81 11       	cpse	r24, r1
    1322:	74 c0       	rjmp	.+232    	; 0x140c <__vector_12+0x1ec>
		{
			// Once a transmit has been completed
			if (In_Tx)
    1324:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <In_Tx>
    1328:	88 23       	and	r24, r24
    132a:	e1 f0       	breq	.+56     	; 0x1364 <__vector_12+0x144>
			{
				// If more bytes left to transmit post transmission event
				if (TX_Index <= Expected_TX_Length)
    132c:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <TX_Index>
    1330:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Expected_TX_Length>
    1334:	89 17       	cp	r24, r25
    1336:	a0 f0       	brcs	.+40     	; 0x1360 <__vector_12+0x140>
				{
					if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
    1338:	98 13       	cpse	r25, r24
    133a:	07 c0       	rjmp	.+14     	; 0x134a <__vector_12+0x12a>
    133c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Expected_RX_Length>
    1340:	81 11       	cpse	r24, r1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <__vector_12+0x12a>
					{
						In_Tx = false;
    1344:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <In_Tx>
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <__vector_12+0x144>
					}
					else
					{
						Post_Event(EVT_UART_SEND_BYTE);
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	71 e0       	ldi	r23, 0x01	; 1
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
				{
					In_Tx = false;
				}
			}
			
			if (!In_Tx)
    1356:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <In_Tx>
    135a:	81 11       	cpse	r24, r1
    135c:	6e c0       	rjmp	.+220    	; 0x143a <__vector_12+0x21a>
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <__vector_12+0x144>
						Post_Event(EVT_UART_SEND_BYTE);
					}
				}
				else
				{
					In_Tx = false;
    1360:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <In_Tx>
				}
			}
			
			if (!In_Tx)
			{
				if (Expected_RX_Length > 0)
    1364:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Expected_RX_Length>
    1368:	99 23       	and	r25, r25
    136a:	c1 f0       	breq	.+48     	; 0x139c <__vector_12+0x17c>
				{
					*(Receive_List[Buffer_Index][RX_Index]) = LINDAT;
    136c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <RX_Index>
    1370:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <Buffer_Index>
    1374:	e8 2f       	mov	r30, r24
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	e2 0f       	add	r30, r18
    137a:	f1 1d       	adc	r31, r1
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	eb 50       	subi	r30, 0x0B	; 11
    1382:	fe 4f       	sbci	r31, 0xFE	; 254
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
    138a:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    138e:	20 83       	st	Z, r18
					RX_Index++;
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <RX_Index>
				if (RX_Index < Expected_RX_Length)
				{
					// Do Nothing
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
    1396:	89 17       	cp	r24, r25
    1398:	08 f4       	brcc	.+2      	; 0x139c <__vector_12+0x17c>
    139a:	4f c0       	rjmp	.+158    	; 0x143a <__vector_12+0x21a>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < UART_MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
    139c:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <Buffer_Index>
    13a0:	82 2f       	mov	r24, r18
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	fc 01       	movw	r30, r24
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	e7 50       	subi	r30, 0x07	; 7
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	30 83       	st	Z, r19
    13b6:	31 83       	std	Z+1, r19	; 0x01
    13b8:	32 83       	std	Z+2, r19	; 0x02
    13ba:	33 83       	std	Z+3, r19	; 0x03
    }
    // Point current receive list row to NULL
    for (int i = 0; i < UART_MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	eb 50       	subi	r30, 0x0B	; 11
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == UART_COMMAND_BUFFER_SIZE - 1)
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	19 f4       	brne	.+6      	; 0x13d4 <__vector_12+0x1b4>
    {
        Buffer_Index = 0;
    13ce:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Buffer_Index>
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <__vector_12+0x1ba>
    }
    else
    {
        Buffer_Index++;
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE] != 0xFF)
    13da:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Buffer_Index>
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e7 50       	subi	r30, 0x07	; 7
    13ea:	fe 4f       	sbci	r31, 0xFE	; 254
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	31 f0       	breq	.+12     	; 0x13fe <__vector_12+0x1de>
    {
        Post_Event(EVT_UART_START);
    13f2:	60 e8       	ldi	r22, 0x80	; 128
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
				{
					Update_Buffer_Index();
					Post_Event(EVT_UART_END);
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	74 e0       	ldi	r23, 0x04	; 4
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
    140a:	17 c0       	rjmp	.+46     	; 0x143a <__vector_12+0x21a>
		}
		
		// If in startup sequence for modem commands
		else
		{
			if (Text_Index >= sizeof(Init_Text)/sizeof(Init_Text[0]))
    140c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Text_Index>
    1410:	85 39       	cpi	r24, 0x95	; 149
    1412:	18 f0       	brcs	.+6      	; 0x141a <__vector_12+0x1fa>
			{
				modem_init = false;
    1414:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <modem_init>
    1418:	10 c0       	rjmp	.+32     	; 0x143a <__vector_12+0x21a>
    141a:	81 e2       	ldi	r24, 0x21	; 33
    141c:	9e e4       	ldi	r25, 0x4E	; 78
    141e:	01 97       	sbiw	r24, 0x01	; 1
			else
			{
				int i = 0;
				while (true) {
					i++;
					if (i > 20000) break;
    1420:	f1 f7       	brne	.-4      	; 0x141e <__vector_12+0x1fe>
				}
				UART_Transmit();
    1422:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
    1426:	09 c0       	rjmp	.+18     	; 0x143a <__vector_12+0x21a>
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
			{
				second_byte_slash_n = true;
				byte_space_counter = 0;
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
    1428:	8a 30       	cpi	r24, 0x0A	; 10
    142a:	09 f0       	breq	.+2      	; 0x142e <__vector_12+0x20e>
    142c:	61 cf       	rjmp	.-318    	; 0x12f0 <__vector_12+0xd0>
    142e:	5a cf       	rjmp	.-332    	; 0x12e4 <__vector_12+0xc4>
    1430:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <second_byte_slash_n>
    1434:	91 11       	cpse	r25, r1
    1436:	f8 cf       	rjmp	.-16     	; 0x1428 <__vector_12+0x208>
    1438:	5b cf       	rjmp	.-330    	; 0x12f0 <__vector_12+0xd0>
				}
				UART_Transmit();
			}
		}
	}	
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <Init_UART_Service>:

****************************************************************************/
void Init_UART_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_UART_STATE;
    145c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <Current_State>
    1460:	08 95       	ret

00001462 <Run_UART_Service>:
        Processes events for UART Message transmit/receive

****************************************************************************/
void Run_UART_Service(uint32_t event_mask)
{
	switch(Current_State)
    1462:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <Current_State>
    1466:	21 30       	cpi	r18, 0x01	; 1
    1468:	a9 f0       	breq	.+42     	; 0x1494 <Run_UART_Service+0x32>
    146a:	18 f0       	brcs	.+6      	; 0x1472 <Run_UART_Service+0x10>
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	89 f1       	breq	.+98     	; 0x14d2 <Run_UART_Service+0x70>
    1470:	08 95       	ret
    {	
		case NORMAL_UART_STATE:
			if (EVT_UART_START == event_mask)
    1472:	60 38       	cpi	r22, 0x80	; 128
    1474:	71 05       	cpc	r23, r1
    1476:	81 05       	cpc	r24, r1
    1478:	91 05       	cpc	r25, r1
    147a:	e9 f5       	brne	.+122    	; 0x14f6 <Run_UART_Service+0x94>
			{			
                // Initialize UART for particular command
                UART_Start_Command();
    147c:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_Start_Command>
				// Switch to sending state
				Current_State = SENDING_UART_STATE;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_UART_SEND_BYTE);
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	71 e0       	ldi	r23, 0x01	; 1
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 04 03 	call	0x608	; 0x608 <Post_Event>
    1492:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_UART_SEND_BYTE == event_mask)
    1494:	61 15       	cp	r22, r1
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	72 07       	cpc	r23, r18
    149a:	81 05       	cpc	r24, r1
    149c:	91 05       	cpc	r25, r1
    149e:	19 f4       	brne	.+6      	; 0x14a6 <Run_UART_Service+0x44>
			{
    			UART_Transmit();
    14a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
    14a4:	08 95       	ret
			}
			else if (EVT_UART_RECV_BYTE == event_mask)
    14a6:	61 15       	cp	r22, r1
    14a8:	22 e0       	ldi	r18, 0x02	; 2
    14aa:	72 07       	cpc	r23, r18
    14ac:	81 05       	cpc	r24, r1
    14ae:	91 05       	cpc	r25, r1
    14b0:	31 f4       	brne	.+12     	; 0x14be <Run_UART_Service+0x5c>
			{
                UART_Transmit();
    14b2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
				Current_State = RECEIVING_UART_STATE;				
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Current_State>
    14bc:	08 95       	ret
			}
			else if (EVT_UART_END == event_mask)
    14be:	61 15       	cp	r22, r1
    14c0:	74 40       	sbci	r23, 0x04	; 4
    14c2:	81 05       	cpc	r24, r1
    14c4:	91 05       	cpc	r25, r1
    14c6:	b9 f4       	brne	.+46     	; 0x14f6 <Run_UART_Service+0x94>
			{
                UART_End_Command();
    14c8:	0e 94 57 08 	call	0x10ae	; 0x10ae <UART_End_Command>
				Current_State = NORMAL_UART_STATE;
    14cc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <Current_State>
    14d0:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_UART_RECV_BYTE == event_mask)
    14d2:	61 15       	cp	r22, r1
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	72 07       	cpc	r23, r18
    14d8:	81 05       	cpc	r24, r1
    14da:	91 05       	cpc	r25, r1
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <Run_UART_Service+0x82>
            {
                UART_Transmit();
    14de:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
    14e2:	08 95       	ret
            }
            if (EVT_UART_END == event_mask)
    14e4:	61 15       	cp	r22, r1
    14e6:	74 40       	sbci	r23, 0x04	; 4
    14e8:	81 05       	cpc	r24, r1
    14ea:	91 05       	cpc	r25, r1
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <Run_UART_Service+0x94>
            {
                UART_End_Command();
    14ee:	0e 94 57 08 	call	0x10ae	; 0x10ae <UART_End_Command>
                Current_State = NORMAL_UART_STATE;
    14f2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <Current_State>
    14f6:	08 95       	ret

000014f8 <Query_UART_State>:
****************************************************************************/

UART_State_t Query_UART_State(void)
{
    return Current_State;
}
    14f8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Current_State>
    14fc:	08 95       	ret

000014fe <_exit>:
    14fe:	f8 94       	cli

00001500 <__stop_program>:
    1500:	ff cf       	rjmp	.-2      	; 0x1500 <__stop_program>
