
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000014b8  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800124  00800124  00001570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a9b  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001983  00000000  00000000  0000542f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002103  00000000  00000000  00006db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  00008eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f90  00000000  00000000  000098b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d8  00000000  00000000  0000a840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000cb18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
       4:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_1>
       8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_3>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_4>
      14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_9>
      28:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_10>
      2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      30:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_12>
      34:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_13>
      38:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_14>
      3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_15>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_16>
      44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000050 <__trampolines_end>:
      50:	41 54       	subi	r20, 0x41	; 65
      52:	5e 53       	subi	r21, 0x3E	; 62
      54:	49 53       	subi	r20, 0x39	; 57
      56:	53 3f       	cpi	r21, 0xF3	; 243
      58:	0d 00       	.word	0x000d	; ????

0000005a <__ctors_end>:
      5a:	11 24       	eor	r1, r1
      5c:	1f be       	out	0x3f, r1	; 63
      5e:	cf ef       	ldi	r28, 0xFF	; 255
      60:	d2 e0       	ldi	r29, 0x02	; 2
      62:	de bf       	out	0x3e, r29	; 62
      64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
      66:	11 e0       	ldi	r17, 0x01	; 1
      68:	a0 e0       	ldi	r26, 0x00	; 0
      6a:	b1 e0       	ldi	r27, 0x01	; 1
      6c:	e8 eb       	ldi	r30, 0xB8	; 184
      6e:	f4 e1       	ldi	r31, 0x14	; 20
      70:	02 c0       	rjmp	.+4      	; 0x76 <__do_copy_data+0x10>
      72:	05 90       	lpm	r0, Z+
      74:	0d 92       	st	X+, r0
      76:	a4 32       	cpi	r26, 0x24	; 36
      78:	b1 07       	cpc	r27, r17
      7a:	d9 f7       	brne	.-10     	; 0x72 <__do_copy_data+0xc>

0000007c <__do_clear_bss>:
      7c:	22 e0       	ldi	r18, 0x02	; 2
      7e:	a4 e2       	ldi	r26, 0x24	; 36
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
      84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
      86:	a6 30       	cpi	r26, 0x06	; 6
      88:	b2 07       	cpc	r27, r18
      8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
      8c:	0e 94 05 04 	call	0x80a	; 0x80a <main>
      90:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <_exit>

00000094 <__bad_interrupt>:
      94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
      98:	1f 92       	push	r1
      9a:	0f 92       	push	r0
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	0f 92       	push	r0
      a0:	11 24       	eor	r1, r1
      a2:	8f 93       	push	r24
      a4:	9f 93       	push	r25
      a6:	ef 93       	push	r30
      a8:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
      aa:	ea e7       	ldi	r30, 0x7A	; 122
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	80 61       	ori	r24, 0x10	; 16
      b2:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
      b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
      b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
      bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	9f 91       	pop	r25
      ca:	8f 91       	pop	r24
      cc:	0f 90       	pop	r0
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	8f 93       	push	r24
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
      e6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
      ea:	88 23       	and	r24, r24
      ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_9+0x1e>
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	39 f0       	breq	.+14     	; 0x100 <__vector_9+0x2a>
      f2:	0c c0       	rjmp	.+24     	; 0x10c <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
      f4:	e3 e8       	ldi	r30, 0x83	; 131
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	80 62       	ori	r24, 0x20	; 32
      fc:	80 83       	st	Z, r24
            break;
      fe:	06 c0       	rjmp	.+12     	; 0x10c <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
     100:	e3 e8       	ldi	r30, 0x83	; 131
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8f 7d       	andi	r24, 0xDF	; 223
     108:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
     10a:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
     10c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     110:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
     112:	83 70       	andi	r24, 0x03	; 3
     114:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
}
     118:	ff 91       	pop	r31
     11a:	ef 91       	pop	r30
     11c:	8f 91       	pop	r24
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <__vector_3>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(PCINT0_vect)
{
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	2f 93       	push	r18
     134:	3f 93       	push	r19
     136:	4f 93       	push	r20
     138:	5f 93       	push	r21
     13a:	6f 93       	push	r22
     13c:	7f 93       	push	r23
     13e:	8f 93       	push	r24
     140:	9f 93       	push	r25
     142:	af 93       	push	r26
     144:	bf 93       	push	r27
     146:	ef 93       	push	r30
     148:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE0);
     14a:	e8 e6       	ldi	r30, 0x68	; 104
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	8e 7f       	andi	r24, 0xFE	; 254
     152:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     154:	4a e0       	ldi	r20, 0x0A	; 10
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
}
     164:	ff 91       	pop	r31
     166:	ef 91       	pop	r30
     168:	bf 91       	pop	r27
     16a:	af 91       	pop	r26
     16c:	9f 91       	pop	r25
     16e:	8f 91       	pop	r24
     170:	7f 91       	pop	r23
     172:	6f 91       	pop	r22
     174:	5f 91       	pop	r21
     176:	4f 91       	pop	r20
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <__vector_4>:

ISR(PCINT1_vect)
{
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	4f 93       	push	r20
     196:	5f 93       	push	r21
     198:	6f 93       	push	r22
     19a:	7f 93       	push	r23
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
    // Disable pin interrupts for this port
    PCICR &= ~(1<<PCIE1);
     1a8:	e8 e6       	ldi	r30, 0x68	; 104
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8d 7f       	andi	r24, 0xFD	; 253
     1b0:	80 83       	st	Z, r24
    // Start debounce timer
    Start_Timer(&Debounce_Timer, DEBOUNCE_TIME_MS);
     1b2:	4a e0       	ldi	r20, 0x0A	; 10
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <CAN_Reset>:
	// Value to Set
	uint8_t Data_2_Write[RX_STATUS_TX_LENGTH] = {MCP_RX_STATUS};
	
	// Call SPI command
	Write_SPI(RX_STATUS_TX_LENGTH, RX_STATUS_RX_LENGTH, Data_2_Write, Variable_2_Set);	
}
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	ae 01       	movw	r20, r28
     1f8:	4f 5f       	subi	r20, 0xFF	; 255
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 12 05 	call	0xa24	; 0xa24 <Write_SPI>
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <CAN_Read>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	00 d0       	rcall	.+0      	; 0x212 <CAN_Read+0x6>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	9b 01       	movw	r18, r22
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	99 83       	std	Y+1, r25	; 0x01
     21c:	8a 83       	std	Y+2, r24	; 0x02
     21e:	ae 01       	movw	r20, r28
     220:	4f 5f       	subi	r20, 0xFF	; 255
     222:	5f 4f       	sbci	r21, 0xFF	; 255
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 12 05 	call	0xa24	; 0xa24 <Write_SPI>
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <CAN_Write>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <CAN_Write+0x6>
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	99 83       	std	Y+1, r25	; 0x01
     246:	8a 83       	std	Y+2, r24	; 0x02
     248:	fb 01       	movw	r30, r22
     24a:	80 81       	ld	r24, Z
     24c:	8b 83       	std	Y+3, r24	; 0x03
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	ae 01       	movw	r20, r28
     254:	4f 5f       	subi	r20, 0xFF	; 255
     256:	5f 4f       	sbci	r21, 0xFF	; 255
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	0e 94 12 05 	call	0xa24	; 0xa24 <Write_SPI>
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <CAN_Bit_Modify>:
        Performs bit modify operation on CAN module

****************************************************************************/

void CAN_Bit_Modify(uint8_t Register_2_Set, uint8_t Bits_2_Change, uint8_t* Value_2_Set)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <CAN_Bit_Modify+0x6>
     272:	00 d0       	rcall	.+0      	; 0x274 <CAN_Bit_Modify+0x8>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    // Define constants
    #define BM_TX_LENGTH 4
    #define BM_RX_LENGTH 0
	
    // Value to Set
    uint8_t Data_2_Write[BM_TX_LENGTH] = {MCP_BITMOD, Register_2_Set, Bits_2_Change, Value_2_Set[0]};
     278:	95 e0       	ldi	r25, 0x05	; 5
     27a:	99 83       	std	Y+1, r25	; 0x01
     27c:	8a 83       	std	Y+2, r24	; 0x02
     27e:	6b 83       	std	Y+3, r22	; 0x03
     280:	fa 01       	movw	r30, r20
     282:	80 81       	ld	r24, Z
     284:	8c 83       	std	Y+4, r24	; 0x04
    
    // Call SPI command
    Write_SPI(BM_TX_LENGTH, BM_RX_LENGTH, Data_2_Write, NULL);
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	ae 01       	movw	r20, r28
     28c:	4f 5f       	subi	r20, 0xFF	; 255
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	0e 94 12 05 	call	0xa24	; 0xa24 <Write_SPI>
}
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <CAN_Initialize_1>:
    Description
        Initializes the CAN module MCP25625

****************************************************************************/
void CAN_Initialize_1(uint8_t * * p_data_store)
{   
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
    // Save away the address to the array of addresses to the locations we will
    // fill in data
    a_p_Recv_List = p_data_store;
     2aa:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <a_p_Recv_List+0x1>
     2ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <a_p_Recv_List>

    // Reset the CAN Module and enter in configuration mode
    CAN_Reset();
     2b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <CAN_Reset>
    
    // Enter configuration mode, abort all pending transmissions and disable one shot mode
    TX_Data[0] = (MODE_CONFIG|ABORT_TX);
     2b6:	80 e9       	ldi	r24, 0x90	; 144
     2b8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_CANCTRL, TX_Data);
     2bc:	6a e2       	ldi	r22, 0x2A	; 42
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	
    // Disable CLKOUT
    TX_Data[0] = CLKOUT_DISABLE;
     2c6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, (1 << 2), TX_Data);
     2ca:	4a e2       	ldi	r20, 0x2A	; 42
     2cc:	51 e0       	ldi	r21, 0x01	; 1
     2ce:	64 e0       	ldi	r22, 0x04	; 4
     2d0:	8f e0       	ldi	r24, 0x0F	; 15
     2d2:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	
    // Set CNF Bit Time registers for Baud Rate = 312500 b/s
	TX_Data[0] = 0x41;
     2d6:	d1 e4       	ldi	r29, 0x41	; 65
     2d8:	d0 93 2a 01 	sts	0x012A, r29	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, (1 << 0), TX_Data);
     2dc:	4a e2       	ldi	r20, 0x2A	; 42
     2de:	51 e0       	ldi	r21, 0x01	; 1
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	8a e2       	ldi	r24, 0x2A	; 42
     2e4:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     2e8:	c1 ef       	ldi	r28, 0xF1	; 241
     2ea:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 0)|(1 << 1)|(1 << 2)), TX_Data);
     2ee:	4a e2       	ldi	r20, 0x2A	; 42
     2f0:	51 e0       	ldi	r21, 0x01	; 1
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	89 e2       	ldi	r24, 0x29	; 41
     2f6:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     2fa:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 3)|(1 << 4)|(1 << 5)), TX_Data);
     2fe:	4a e2       	ldi	r20, 0x2A	; 42
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	68 e3       	ldi	r22, 0x38	; 56
     304:	89 e2       	ldi	r24, 0x29	; 41
     306:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0xF1;
     30a:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_CNF2, ((1 << 7)|(1 << 6)), TX_Data);
     30e:	4a e2       	ldi	r20, 0x2A	; 42
     310:	51 e0       	ldi	r21, 0x01	; 1
     312:	60 ec       	ldi	r22, 0xC0	; 192
     314:	89 e2       	ldi	r24, 0x29	; 41
     316:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
	TX_Data[0] = 0x85;
     31a:	85 e8       	ldi	r24, 0x85	; 133
     31c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_CNF3, TX_Data);
     320:	6a e2       	ldi	r22, 0x2A	; 42
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	88 e2       	ldi	r24, 0x28	; 40
     326:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	TX_Data[0] = 0x41;
     32a:	d0 93 2a 01 	sts	0x012A, r29	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_CNF1, ((1 << 7)|(1 << 6)), TX_Data);
     32e:	4a e2       	ldi	r20, 0x2A	; 42
     330:	51 e0       	ldi	r21, 0x01	; 1
     332:	60 ec       	ldi	r22, 0xC0	; 192
     334:	8a e2       	ldi	r24, 0x2A	; 42
     336:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <CAN_Initialize_2>:
void CAN_Initialize_2(void)
{
    // Set interrupt registers
    
    // Enable all interrupts
    TX_Data[0] = 0xFF;
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_CANINTE, TX_Data);
     346:	6a e2       	ldi	r22, 0x2A	; 42
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8b e2       	ldi	r24, 0x2B	; 43
     34c:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>

    // Set up TX Buffer 0
    TX_Data[0] = MCP_TXB_TXP10_M; // Highest message priority
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_TXB0CTRL, TX_Data);
     356:	6a e2       	ldi	r22, 0x2A	; 42
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	80 e3       	ldi	r24, 0x30	; 48
     35c:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set RTS pins as digital inputs
    TX_Data[0] = 0;
     360:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TX_Data>
    CAN_Write(MCP_RTSCTRL, TX_Data);
     364:	6a e2       	ldi	r22, 0x2A	; 42
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	8d e0       	ldi	r24, 0x0D	; 13
     36a:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set identifier of TX Buffer 0 to 1
    TX_Data[0] = 0;
     36e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TX_Data>
    CAN_Write(MCP_TXB0SIDH, TX_Data);
     372:	6a e2       	ldi	r22, 0x2A	; 42
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	81 e3       	ldi	r24, 0x31	; 49
     378:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    TX_Data[0] = 0x20;
     37c:	80 e2       	ldi	r24, 0x20	; 32
     37e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_TXB0SIDL, TX_Data);
     382:	6a e2       	ldi	r22, 0x2A	; 42
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	82 e3       	ldi	r24, 0x32	; 50
     388:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Set identifier of RX Buffer 0 to 0
    TX_Data[0] = 0;
     38c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TX_Data>
    CAN_Write(MCP_RXF0SIDH, TX_Data);
     390:	6a e2       	ldi	r22, 0x2A	; 42
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    CAN_Write(MCP_RXF0SIDL, TX_Data);
     39a:	6a e2       	ldi	r22, 0x2A	; 42
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    TX_Data[0] = 0x60;
     3a4:	80 e6       	ldi	r24, 0x60	; 96
     3a6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
    CAN_Write(MCP_RXB0CTRL, TX_Data);
     3aa:	6a e2       	ldi	r22, 0x2A	; 42
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
    
    // Switch to Normal Mode
    TX_Data[0] = (MCP_NORMAL);
     3b2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TX_Data>
    CAN_Bit_Modify(MCP_CANCTRL, ((1 << 5)|(1 << 6)|(1 << 7)), TX_Data);
     3b6:	4a e2       	ldi	r20, 0x2A	; 42
     3b8:	51 e0       	ldi	r21, 0x01	; 1
     3ba:	60 ee       	ldi	r22, 0xE0	; 224
     3bc:	8f e0       	ldi	r24, 0x0F	; 15
     3be:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
    
    RX_Data[0] = &Recv_Byte;
     3c2:	87 e2       	ldi	r24, 0x27	; 39
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <RX_Data+0x1>
     3ca:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <RX_Data>
    CAN_Read(MCP_CANSTAT, RX_Data);
     3ce:	68 e2       	ldi	r22, 0x28	; 40
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	8e e0       	ldi	r24, 0x0E	; 14
     3d4:	0e 94 06 01 	call	0x20c	; 0x20c <CAN_Read>
     3d8:	08 95       	ret

000003da <CAN_Send_Message>:
        Sends a CAN Message on the CAN Bus

****************************************************************************/

void CAN_Send_Message(uint8_t Msg_Length, uint8_t* Transmit_Data)
{	
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
	// If invalid CAN Message Length don't perform transmit
	if (Msg_Length > 8)
     3e4:	89 30       	cpi	r24, 0x09	; 9
     3e6:	30 f5       	brcc	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3e8:	7b 01       	movw	r14, r22
     3ea:	c8 2f       	mov	r28, r24
	{
		return;
	}
	// Set message length
	TX_Data[0] = Msg_Length;
     3ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
	CAN_Write(MCP_TXB0DLC, TX_Data);
     3f0:	6a e2       	ldi	r22, 0x2A	; 42
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	85 e3       	ldi	r24, 0x35	; 53
     3f6:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     3fa:	cc 23       	and	r28, r28
     3fc:	91 f0       	breq	.+36     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3fe:	87 01       	movw	r16, r14
     400:	ec 0e       	add	r14, r28
     402:	f1 1c       	adc	r15, r1
     404:	c6 e3       	ldi	r28, 0x36	; 54
	{
		TX_Data[0] = Transmit_Data[i];
     406:	f8 01       	movw	r30, r16
     408:	81 91       	ld	r24, Z+
     40a:	8f 01       	movw	r16, r30
     40c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
     410:	6a e2       	ldi	r22, 0x2A	; 42
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_Write>
     41a:	cf 5f       	subi	r28, 0xFF	; 255
	}
	// Set message length
	TX_Data[0] = Msg_Length;
	CAN_Write(MCP_TXB0DLC, TX_Data);
	// Write in transmit data to required registers
	for (int i = 0; i < Msg_Length; i++)
     41c:	0e 15       	cp	r16, r14
     41e:	1f 05       	cpc	r17, r15
     420:	91 f7       	brne	.-28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		TX_Data[0] = Transmit_Data[i];
		CAN_Write(MCP_TXB0D0 + i, TX_Data);
	}
	// Transmit message
	TX_Data[0] = 0xFF;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TX_Data>
	CAN_Bit_Modify(MCP_TXB0CTRL, (1 << 3), TX_Data);
     428:	4a e2       	ldi	r20, 0x2A	; 42
     42a:	51 e0       	ldi	r21, 0x01	; 1
     42c:	68 e0       	ldi	r22, 0x08	; 8
     42e:	80 e3       	ldi	r24, 0x30	; 48
     430:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <CAN_Read_Message>:
        Reads CAN message from the CAN Bus

****************************************************************************/

void CAN_Read_Message(void)
{
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	16 e6       	ldi	r17, 0x66	; 102
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
     44c:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <a_p_Recv_List>
     450:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <a_p_Recv_List+0x1>
     454:	6c 0f       	add	r22, r28
     456:	7d 1f       	adc	r23, r29
     458:	81 2f       	mov	r24, r17
     45a:	0e 94 06 01 	call	0x20c	; 0x20c <CAN_Read>
     45e:	22 96       	adiw	r28, 0x02	; 2
     460:	1f 5f       	subi	r17, 0xFF	; 255

****************************************************************************/

void CAN_Read_Message(void)
{
	for (int i = 0; i < CAN_MODEM_PACKET_LEN; i++)
     462:	ca 30       	cpi	r28, 0x0A	; 10
     464:	d1 05       	cpc	r29, r1
     466:	91 f7       	brne	.-28     	; 0x44c <CAN_Read_Message+0xc>
	{
		CAN_Read(MCP_RXB0D0 + i, &(*(a_p_Recv_List+i)));
	}
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <start_eeprom_write_byte>:
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);

        // Increment num bytes executed
        Num_Bytes_Executed++;
    }
}
     470:	9c 01       	movw	r18, r24
     472:	9f b7       	in	r25, 0x3f	; 63
     474:	f8 94       	cli
     476:	32 bd       	out	0x22, r19	; 34
     478:	21 bd       	out	0x21, r18	; 33
     47a:	fb 01       	movw	r30, r22
     47c:	80 81       	ld	r24, Z
     47e:	80 bd       	out	0x20, r24	; 32
     480:	1f ba       	out	0x1f, r1	; 31
     482:	fa 9a       	sbi	0x1f, 2	; 31
     484:	8f b3       	in	r24, 0x1f	; 31
     486:	8a 60       	ori	r24, 0x0A	; 10
     488:	8f bb       	out	0x1f, r24	; 31
     48a:	9f bf       	out	0x3f, r25	; 63
     48c:	08 95       	ret

0000048e <__vector_16>:
// #############################################################################
// ------------ INTERRUPT SERVICE ROUTINE
// #############################################################################

ISR(EE_RDY_vect)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	cf 93       	push	r28
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
    // Disable the ready interrupts
    EECR &= ~(1<<EERIE);
     4b2:	fb 98       	cbi	0x1f, 3	; 31

    // Check if we've written all the requested values
    if (Num_Bytes_Requested <= Num_Bytes_Executed)
     4b4:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <Num_Bytes_Executed>
     4b8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Num_Bytes_Requested>
     4bc:	c8 17       	cp	r28, r24
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <__vector_16+0x38>
    {
        // We are done writing all the bytes.
        IsBusy = false;
     4c0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <IsBusy>
     4c4:	13 c0       	rjmp	.+38     	; 0x4ec <__vector_16+0x5e>
    }
    else
    {
        // Start the EEPROM write
        start_eeprom_write_byte(p_Target_EEPROM_Address+Num_Bytes_Executed, p_Caller_Values+Num_Bytes_Executed);
     4c6:	8c 2f       	mov	r24, r28
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <p_Caller_Values>
     4ce:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <p_Caller_Values+0x1>
     4d2:	68 0f       	add	r22, r24
     4d4:	79 1f       	adc	r23, r25
     4d6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <p_Target_EEPROM_Address>
     4da:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <p_Target_EEPROM_Address+0x1>
     4de:	82 0f       	add	r24, r18
     4e0:	93 1f       	adc	r25, r19
     4e2:	0e 94 38 02 	call	0x470	; 0x470 <start_eeprom_write_byte>

        // Increment num bytes executed
        Num_Bytes_Executed++;
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <Num_Bytes_Executed>
    }
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	cf 91       	pop	r28
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	8b 01       	movw	r16, r22
     516:	9c 01       	movw	r18, r24
    bool event_pending = false;

    // We must enter a critical section here, because it is possible that
    // while we are clearing the event, an interrupt may occur and post an 
    // event. In this situation, we would lose the new event that was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     518:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51a:	f8 94       	cli
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
     51c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <Pending_Events>
     520:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <Pending_Events+0x1>
     524:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Pending_Events+0x2>
     528:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <Pending_Events+0x3>
     52c:	d9 01       	movw	r26, r18
     52e:	c8 01       	movw	r24, r16
     530:	84 23       	and	r24, r20
     532:	95 23       	and	r25, r21
     534:	a6 23       	and	r26, r22
     536:	b7 23       	and	r27, r23
     538:	80 17       	cp	r24, r16
     53a:	91 07       	cpc	r25, r17
     53c:	a2 07       	cpc	r26, r18
     53e:	b3 07       	cpc	r27, r19
     540:	91 f4       	brne	.+36     	; 0x566 <process_event_if_pending+0x56>
        {
            // Set flag
            event_pending = true;

            // Clear the event
            Pending_Events &= ~event_mask;
     542:	80 95       	com	r24
     544:	90 95       	com	r25
     546:	a0 95       	com	r26
     548:	b0 95       	com	r27
     54a:	84 23       	and	r24, r20
     54c:	95 23       	and	r25, r21
     54e:	a6 23       	and	r26, r22
     550:	b7 23       	and	r27, r23
     552:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <Pending_Events>
     556:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <Pending_Events+0x1>
     55a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <Pending_Events+0x2>
     55e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <Pending_Events+0x3>
    {
        // If this event is pending
        if (event_mask == (Pending_Events & event_mask))
        {
            // Set flag
            event_pending = true;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	01 c0       	rjmp	.+2      	; 0x568 <process_event_if_pending+0x58>

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
    // Initialize event pending flag to false
    bool event_pending = false;
     566:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     568:	ef bf       	out	0x3f, r30	; 63
            Pending_Events &= ~event_mask;
        }           
    }

    // If the event is pending, run all services to process the event.
    if (event_pending) Run_Services(event_mask);
     56a:	88 23       	and	r24, r24
     56c:	21 f0       	breq	.+8      	; 0x576 <process_event_if_pending+0x66>
     56e:	c9 01       	movw	r24, r18
     570:	b8 01       	movw	r22, r16
     572:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Run_Services>
}
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
    // We must enter a critical section here, because it is possible that
    // while we are modifying the pending events, an interrupt may occur and 
    // post an event. In this situation, we would lose the new event that 
    // was posted.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     584:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     586:	f8 94       	cli
    {
        // Set flag in event list
        Pending_Events |= event_mask;
     588:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <Pending_Events>
     58c:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <Pending_Events+0x1>
     590:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <Pending_Events+0x2>
     594:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <Pending_Events+0x3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	8c 29       	or	r24, r12
     59e:	9d 29       	or	r25, r13
     5a0:	ae 29       	or	r26, r14
     5a2:	bf 29       	or	r27, r15
     5a4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <Pending_Events>
     5a8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <Pending_Events+0x1>
     5ac:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <Pending_Events+0x2>
     5b0:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <Pending_Events+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5b4:	2f bf       	out	0x3f, r18	; 63
    }
}
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	08 95       	ret

000005c0 <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
     5e4:	68 e0       	ldi	r22, 0x08	; 8
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
     5f0:	60 e1       	ldi	r22, 0x10	; 16
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
     5fc:	60 e2       	ldi	r22, 0x20	; 32
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
     608:	60 e4       	ldi	r22, 0x40	; 64
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
     614:	60 e8       	ldi	r22, 0x80	; 128
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	72 e0       	ldi	r23, 0x02	; 2
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	74 e0       	ldi	r23, 0x04	; 4
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (12 <= NUM_EVENTS)
        process_event_if_pending(EVENT_12);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	78 e0       	ldi	r23, 0x08	; 8
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (13 <= NUM_EVENTS)
        process_event_if_pending(EVENT_13);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e1       	ldi	r23, 0x10	; 16
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (14 <= NUM_EVENTS)
        process_event_if_pending(EVENT_14);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e2       	ldi	r23, 0x20	; 32
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (15 <= NUM_EVENTS)
        process_event_if_pending(EVENT_15);
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e4       	ldi	r23, 0x40	; 64
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (16 <= NUM_EVENTS)
        process_event_if_pending(EVENT_16);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e8       	ldi	r23, 0x80	; 128
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (17 <= NUM_EVENTS)
        process_event_if_pending(EVENT_17);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (18 <= NUM_EVENTS)
        process_event_if_pending(EVENT_18);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        #endif
        #if (19 <= NUM_EVENTS)
        process_event_if_pending(EVENT_19);
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 88 02 	call	0x510	; 0x510 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
     6a4:	8d cf       	rjmp	.-230    	; 0x5c0 <Run_Events>

000006a6 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
     6a6:	0e 94 a0 06 	call	0xd40	; 0xd40 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
     6aa:	0e 94 4d 06 	call	0xc9a	; 0xc9a <Init_SPI_Service>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
     6ae:	0e 94 09 0a 	call	0x1412	; 0x1412 <Init_UART_Service>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
     6b2:	0e 94 75 03 	call	0x6ea	; 0x6ea <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
     6b6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
     6ba:	0e 94 13 04 	call	0x826	; 0x826 <Init_Modem_Service>
     6be:	08 95       	ret

000006c0 <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
     6cc:	0e 94 32 04 	call	0x864	; 0x864 <Run_Modem_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <Run_UART_Service>
    #endif
    #ifdef SERVICE_02
    SERVICE_02(event);
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 52 06 	call	0xca4	; 0xca4 <Run_SPI_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
     6ea:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC00);
     6ec:	e9 e6       	ldi	r30, 0x69	; 105
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	8e 7f       	andi	r24, 0xFE	; 254
     6f4:	80 83       	st	Z, r24
    EICRA |= (1<<ISC01);
     6f6:	80 81       	ld	r24, Z
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
     6fc:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
     6fe:	e0 9a       	sbi	0x1c, 0	; 28
     700:	08 95       	ret

00000702 <query_counter>:
}

uint32_t query_counter(void)
{
	return counter;
     702:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <counter>
     706:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <counter+0x1>
     70a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter+0x2>
     70e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <counter+0x3>
}
     712:	08 95       	ret

00000714 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
	counter++;
     740:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <counter>
     744:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <counter+0x1>
     748:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <counter+0x2>
     74c:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <counter+0x3>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	a1 1d       	adc	r26, r1
     754:	b1 1d       	adc	r27, r1
     756:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <counter>
     75a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <counter+0x1>
     75e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <counter+0x2>
     762:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <counter+0x3>
    // RX_Data[0] = &interrupt_read;
	// Post_Event(EVT_MASTER_NEW_CAN_MSG);
    // CAN_Read(MCP_CANINTF, RX_Data);
    // Fill in message only if the interrupt is a receive interrupt
    // if (interrupt_read & (1<<MCP_STAT_RX0IF)) 
    CAN_Read_Message();
     766:	0e 94 20 02 	call	0x440	; 0x440 <CAN_Read_Message>
    // CAN_Read(MCP_EFLG, RX_Data);
    uint8_t TX_Data[1] = {0};
     76a:	19 82       	std	Y+1, r1	; 0x01
    CAN_Bit_Modify(MCP_EFLG, (1<<6), TX_Data);
     76c:	ae 01       	movw	r20, r28
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	60 e4       	ldi	r22, 0x40	; 64
     774:	8d e2       	ldi	r24, 0x2D	; 45
     776:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
    //CAN_Read(MCP_EFLG_TXEP, RX_Data);
    //CAN_Read(MCP_EFLG_RXEP, RX_Data);
    CAN_Bit_Modify(MCP_CANINTF, 0xFF, TX_Data); 
     77a:	ae 01       	movw	r20, r28
     77c:	4f 5f       	subi	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	6f ef       	ldi	r22, 0xFF	; 255
     782:	8c e2       	ldi	r24, 0x2C	; 44
     784:	0e 94 36 01 	call	0x26c	; 0x26c <CAN_Bit_Modify>
}
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
     7b0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Parity>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	89 27       	eor	r24, r25
     7b8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
     7bc:	81 11       	cpse	r24, r1
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
     7c0:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
     7c2:	42 e0       	ldi	r20, 0x02	; 2
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	8b e3       	ldi	r24, 0x3B	; 59
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
     7d2:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
     7d4:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     7d6:	43 e2       	ldi	r20, 0x23	; 35
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	8b e3       	ldi	r24, 0x3B	; 59
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
     7e6:	08 95       	ret

000007e8 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
     7e8:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
     7ea:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
     7ec:	68 ed       	ldi	r22, 0xD8	; 216
     7ee:	73 e0       	ldi	r23, 0x03	; 3
     7f0:	8b e3       	ldi	r24, 0x3B	; 59
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
     7f8:	43 e2       	ldi	r20, 0x23	; 35
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	8b e3       	ldi	r24, 0x3B	; 59
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
     808:	08 95       	ret

0000080a <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
     80a:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
     80c:	e1 e6       	ldi	r30, 0x61	; 97
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 e8       	ldi	r24, 0x80	; 128
     812:	80 83       	st	Z, r24
    CLKPR = 0;
     814:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
     816:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
     81a:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
     81c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	08 95       	ret

00000826 <Init_Modem_Service>:

****************************************************************************/
void Init_Modem_Service(void)
{
   // Initialize UART
	UART_Initialize(Modem_Recv_Data);
     826:	8f e3       	ldi	r24, 0x3F	; 63
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <UART_Initialize>
	Register_Timer(&Testing_Timer, Post_Event);
     82e:	6e eb       	ldi	r22, 0xBE	; 190
     830:	72 e0       	ldi	r23, 0x02	; 2
     832:	81 e1       	ldi	r24, 0x11	; 17
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Register_Timer>
	
    PORTB &= ~(1<<PINB2);
     83a:	2a 98       	cbi	0x05, 2	; 5
    DDRB |= (1<<PINB2);
     83c:	22 9a       	sbi	0x04, 2	; 4
	
	// Register CAN Init 1 timer with Post_Event()
	Register_Timer(&CAN_Timer, Post_Event);
     83e:	6e eb       	ldi	r22, 0xBE	; 190
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	8f e1       	ldi	r24, 0x1F	; 31
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Register_Timer>

	// Kick off CAN Init 1 Timer
	Start_Timer(&CAN_Timer, CAN_INIT_1_MS);
     84a:	48 ec       	ldi	r20, 0xC8	; 200
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	8f e1       	ldi	r24, 0x1F	; 31
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>

	// Call 1st step of the CAN initialization
	// This will only start once we exit initialization context
	CAN_Initialize_1(a_p_CAN_Volatile_Msg);
     85a:	85 e1       	ldi	r24, 0x15	; 21
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <CAN_Initialize_1>
     862:	08 95       	ret

00000864 <Run_Modem_Service>:
    Description
        Processes events for the master node

****************************************************************************/
void Run_Modem_Service(uint32_t event_mask)
{
     864:	0f 93       	push	r16
    switch(event_mask)
     866:	61 15       	cp	r22, r1
     868:	20 e8       	ldi	r18, 0x80	; 128
     86a:	72 07       	cpc	r23, r18
     86c:	81 05       	cpc	r24, r1
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <Run_Modem_Service+0x10>
     872:	42 c0       	rjmp	.+132    	; 0x8f8 <Run_Modem_Service+0x94>
     874:	61 15       	cp	r22, r1
     876:	71 05       	cpc	r23, r1
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	82 07       	cpc	r24, r18
     87c:	91 05       	cpc	r25, r1
     87e:	31 f0       	breq	.+12     	; 0x88c <Run_Modem_Service+0x28>
     880:	60 34       	cpi	r22, 0x40	; 64
     882:	71 05       	cpc	r23, r1
     884:	81 05       	cpc	r24, r1
     886:	91 05       	cpc	r25, r1
     888:	e9 f5       	brne	.+122    	; 0x904 <Run_Modem_Service+0xa0>
     88a:	0b c0       	rjmp	.+22     	; 0x8a2 <Run_Modem_Service+0x3e>

		 case EVT_CAN_INIT_1_COMPLETE:
		        // The time for CAN 1 has expired

		        // Call step two of the CAN init
		        CAN_Initialize_2();
     88c:	0e 94 a0 01 	call	0x340	; 0x340 <CAN_Initialize_2>
				
				// Start Testing Timer now once we've begun the CAN 2 Init Process
				Start_Timer(&Testing_Timer, 200);
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	81 e1       	ldi	r24, 0x11	; 17
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
		        
		        break;
     8a0:	31 c0       	rjmp	.+98     	; 0x904 <Run_Modem_Service+0xa0>
				
        case EVT_TEST_TIMEOUT:
			if (do_init_modem)
     8a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <do_init_modem>
     8a6:	88 23       	and	r24, r24
     8a8:	61 f0       	breq	.+24     	; 0x8c2 <Run_Modem_Service+0x5e>
			{
				Write_UART(3, 0, &TX_Data[0], &RX_Data[0], true);
     8aa:	01 e0       	ldi	r16, 0x01	; 1
     8ac:	2f e0       	ldi	r18, 0x0F	; 15
     8ae:	31 e0       	ldi	r19, 0x01	; 1
     8b0:	4d e0       	ldi	r20, 0x0D	; 13
     8b2:	51 e0       	ldi	r21, 0x01	; 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	0e 94 55 08 	call	0x10aa	; 0x10aa <Write_UART>
				do_init_modem = false;
     8bc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <do_init_modem>
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <Run_Modem_Service+0x6a>
			}
			else
			{
				//Write_UART(2, 0, &TX_Data[0], &RX_Data[0], false);
				CAN_Send_Message(5, TX_Away);
     8c2:	66 e0       	ldi	r22, 0x06	; 6
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 ed 01 	call	0x3da	; 0x3da <CAN_Send_Message>
			}
			
			if (flipper)
     8ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <flipper>
     8d2:	88 23       	and	r24, r24
     8d4:	21 f0       	breq	.+8      	; 0x8de <Run_Modem_Service+0x7a>
			{
				PORTB |= (1<<PINB2);
     8d6:	2a 9a       	sbi	0x05, 2	; 5
				flipper = false;
     8d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flipper>
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <Run_Modem_Service+0x82>
			}
			else
			{
				PORTB &= ~(1<<PINB2);
     8de:	2a 98       	cbi	0x05, 2	; 5
				flipper = true;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <flipper>
			}
				
			Start_Timer(&Testing_Timer, 250);
     8e6:	4a ef       	ldi	r20, 0xFA	; 250
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	81 e1       	ldi	r24, 0x11	; 17
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 16 07 	call	0xe2c	; 0xe2c <Start_Timer>
			break;
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <Run_Modem_Service+0xa0>
		
		case EVT_MODEM_NEW_PACKAGE:
		
			//Modem_Recv_Data =  //{CAN_MODEM_POS_TYPE, 0x00, 0x00, 0x00, 0x00};
			//write_rect_vect(&TX_Away[CAN_MODEM_POS_VECT_IDX], test_positions[test_counter]);
			CAN_Send_Message(5, Modem_Recv_Data);
     8f8:	6f e3       	ldi	r22, 0x3F	; 63
     8fa:	71 e0       	ldi	r23, 0x01	; 1
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 ed 01 	call	0x3da	; 0x3da <CAN_Send_Message>
			break;
		
        default:
            break;
    }
}
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <SPI_Initialize>:
        Initializes the SPI module as a master/slave and sets SPI TX/RX buffer
        address

****************************************************************************/
void SPI_Initialize(void)
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
    // Identify node type
    Master_Slave_Identifier = SPI_MASTER;
     90c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Master_Slave_Identifier>
    
    if (SPI_MASTER == Master_Slave_Identifier)
    {
        // SPI Data Direction Register (DDR_SPI) = DDRA
        // Set MOSI, SS and SCK output, all others input
        DDR_SPI |= (1<<MOSI)|(1<<SCK)|(1<<SS);
     910:	81 b1       	in	r24, 0x01	; 1
     912:	80 67       	ori	r24, 0x70	; 112
     914:	81 b9       	out	0x01, r24	; 1
		//DDR_SPI &= ~(1<<SS);

        // Enable interrupt on transmission complete, enable SPI and set as master,
        // set clock rate io_clk/4, MSB transmitted first, Sample on rising edge 
        SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR);
     916:	80 ed       	ldi	r24, 0xD0	; 208
     918:	8c bd       	out	0x2c, r24	; 44

        // Raise SS from master at Init
        PORTA |= (1<<SS);
     91a:	16 9a       	sbi	0x02, 6	; 2

        // Reset indices
        Buffer_Index = 0;
     91c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Buffer_Index>
        TX_Index = 0;
     920:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TX_Index>
		RX_Index = 0;
     924:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <RX_Index>
     928:	ed e6       	ldi	r30, 0x6D	; 109
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	a4 e5       	ldi	r26, 0x54	; 84
     92e:	b1 e0       	ldi	r27, 0x01	; 1
     930:	28 e6       	ldi	r18, 0x68	; 104
     932:	31 e0       	ldi	r19, 0x01	; 1
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	ef 01       	movw	r28, r30
     938:	25 97       	sbiw	r28, 0x05	; 5
     93a:	88 83       	st	Y, r24
     93c:	21 96       	adiw	r28, 0x01	; 1
     93e:	88 83       	st	Y, r24
     940:	21 96       	adiw	r28, 0x01	; 1
     942:	88 83       	st	Y, r24
     944:	21 96       	adiw	r28, 0x01	; 1
     946:	88 83       	st	Y, r24
     948:	21 96       	adiw	r28, 0x01	; 1
     94a:	88 83       	st	Y, r24
     94c:	80 83       	st	Z, r24
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     94e:	1d 92       	st	X+, r1
     950:	1d 92       	st	X+, r1
     952:	36 96       	adiw	r30, 0x06	; 6

****************************************************************************/

static void Reset_Command_Receive_Buffer(void)
{
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
     954:	a2 17       	cp	r26, r18
     956:	b3 07       	cpc	r27, r19
     958:	71 f7       	brne	.-36     	; 0x936 <SPI_Initialize+0x2e>
        TX_Index = 0;
        RX_Index = 0;

        Reset_Command_Receive_Buffer();
    }
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <SPI_Start_Command>:

****************************************************************************/

void SPI_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][TX_LENGTH_BYTE];
     960:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Buffer_Index>
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	df 01       	movw	r26, r30
     96e:	a8 0f       	add	r26, r24
     970:	b9 1f       	adc	r27, r25
     972:	aa 0f       	add	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	a8 59       	subi	r26, 0x98	; 152
     978:	be 4f       	sbci	r27, 0xFE	; 254
     97a:	2c 91       	ld	r18, X
     97c:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][RX_LENGTH_BYTE];
     980:	fd 01       	movw	r30, r26
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Expected_RX_Length>

    // If somehow the expected lengths are invalid, set them to 
    // reasonable values
    if (Expected_TX_Length == 0xff) Expected_TX_Length = 1;
     988:	2f 3f       	cpi	r18, 0xFF	; 255
     98a:	19 f4       	brne	.+6      	; 0x992 <SPI_Start_Command+0x32>
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <Expected_TX_Length>
    if (Expected_RX_Length == 0xff) Expected_RX_Length = 0;
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	11 f4       	brne	.+4      	; 0x99a <SPI_Start_Command+0x3a>
     996:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
     99a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
     99e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TX_Index>
	
	// State in TX
	In_Tx = true;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <In_Tx>

    //Debug line
    if (Expected_TX_Length == 0xff)
     9a8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Expected_TX_Length>
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	99 f4       	brne	.+38     	; 0x9d6 <SPI_Start_Command+0x76>
    {
        counter_value++;
     9b0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <counter_value>
     9b4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <counter_value+0x1>
     9b8:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <counter_value+0x2>
     9bc:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <counter_value+0x3>
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	a1 1d       	adc	r26, r1
     9c4:	b1 1d       	adc	r27, r1
     9c6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <counter_value>
     9ca:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <counter_value+0x1>
     9ce:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <counter_value+0x2>
     9d2:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <counter_value+0x3>
    }

    // Set slave select low to indicate start of transmission
    PORTA &= ~(1<<SS);
     9d6:	16 98       	cbi	0x02, 6	; 2
     9d8:	08 95       	ret

000009da <SPI_End_Command>:
****************************************************************************/

void SPI_End_Command (void)
{
    // Set slave select high to indicate end of transmission
    PORTA |= (1<<SS);
     9da:	16 9a       	sbi	0x02, 6	; 2
     9dc:	08 95       	ret

000009de <SPI_Transmit>:
****************************************************************************/

void SPI_Transmit (void)
{
    // Send byte out
    SPDR = Command_Buffer[Buffer_Index][TX_Index + LENGTH_BYTES];
     9de:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <Buffer_Index>
     9e2:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <TX_Index>
     9e6:	82 2f       	mov	r24, r18
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	82 0f       	add	r24, r18
     9ec:	91 1d       	adc	r25, r1
     9ee:	82 0f       	add	r24, r18
     9f0:	91 1d       	adc	r25, r1
     9f2:	fc 01       	movw	r30, r24
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	e8 59       	subi	r30, 0x98	; 152
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	e3 0f       	add	r30, r19
     9fe:	f1 1d       	adc	r31, r1
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	8e bd       	out	0x2e, r24	; 46
	
	if (In_Tx)
     a04:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <In_Tx>
     a08:	88 23       	and	r24, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <SPI_Transmit+0x3a>
	{
		// Increment Transmit Index
		TX_Index++;		
     a0c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <TX_Index>
     a10:	8f 5f       	subi	r24, 0xFF	; 255
     a12:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <TX_Index>
     a16:	08 95       	ret
		/*
		// Increment Receive Index
		RX_Index++;
		*/
		// Increment Transmit Index
		TX_Index++;
     a18:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <TX_Index>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <TX_Index>
     a22:	08 95       	ret

00000a24 <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	d8 2e       	mov	r13, r24
     a3a:	c6 2e       	mov	r12, r22
     a3c:	ea 01       	movw	r28, r20
     a3e:	79 01       	movw	r14, r18
	counter_value = query_counter();
     a40:	0e 94 81 03 	call	0x702	; 0x702 <query_counter>
     a44:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <counter_value>
     a48:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <counter_value+0x1>
     a4c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <counter_value+0x2>
     a50:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <counter_value+0x3>
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     a54:	8d 2d       	mov	r24, r13
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	8c 01       	movw	r16, r24
     a5a:	0e 5f       	subi	r16, 0xFE	; 254
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     a5e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <Next_Available_Row>
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	de 01       	movw	r26, r28
     a66:	12 97       	sbiw	r26, 0x02	; 2
     a68:	c9 01       	movw	r24, r18
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	e0 e0       	ldi	r30, 0x00	; 0
     a78:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     a7a:	9c 01       	movw	r18, r24
     a7c:	28 59       	subi	r18, 0x98	; 152
     a7e:	3e 4f       	sbci	r19, 0xFE	; 254
     a80:	59 01       	movw	r10, r18
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	19 f4       	brne	.+6      	; 0xa90 <Write_SPI+0x6c>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
     a8a:	e5 01       	movw	r28, r10
     a8c:	d8 82       	st	Y, r13
     a8e:	0e c0       	rjmp	.+28     	; 0xaac <Write_SPI+0x88>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
     a90:	e1 30       	cpi	r30, 0x01	; 1
     a92:	f1 05       	cpc	r31, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <Write_SPI+0x78>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
     a96:	e9 01       	movw	r28, r18
     a98:	c8 82       	st	Y, r12
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <Write_SPI+0x88>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
     a9c:	6c 91       	ld	r22, X
     a9e:	af 01       	movw	r20, r30
     aa0:	48 0f       	add	r20, r24
     aa2:	59 1f       	adc	r21, r25
     aa4:	48 59       	subi	r20, 0x98	; 152
     aa6:	5e 4f       	sbci	r21, 0xFE	; 254
     aa8:	ea 01       	movw	r28, r20
     aaa:	68 83       	st	Y, r22
void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
	counter_value = query_counter();
	
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
     aac:	31 96       	adiw	r30, 0x01	; 1
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	e0 17       	cp	r30, r16
     ab2:	f1 07       	cpc	r31, r17
     ab4:	44 f3       	brlt	.-48     	; 0xa86 <Write_SPI+0x62>
     ab6:	32 c0       	rjmp	.+100    	; 0xb1c <Write_SPI+0xf8>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
     ab8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <Next_Available_Row>
     abc:	89 30       	cpi	r24, 0x09	; 9
     abe:	19 f4       	brne	.+6      	; 0xac6 <Write_SPI+0xa2>
    {
        Next_Available_Row = 0;
     ac0:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <Next_Available_Row>
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <Write_SPI+0xa8>
    }
    else
    {
        Next_Available_Row++;
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
     acc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <Query_SPI_State>
     ad0:	81 11       	cpse	r24, r1
     ad2:	27 c0       	rjmp	.+78     	; 0xb22 <Write_SPI+0xfe>
     ad4:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <Buffer_Index>
     ad8:	82 2f       	mov	r24, r18
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	82 0f       	add	r24, r18
     ade:	91 1d       	adc	r25, r1
     ae0:	82 0f       	add	r24, r18
     ae2:	91 1d       	adc	r25, r1
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	fc 01       	movw	r30, r24
     aea:	e8 59       	subi	r30, 0x98	; 152
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	80 81       	ld	r24, Z
     af0:	8f 3f       	cpi	r24, 0xFF	; 255
     af2:	b9 f0       	breq	.+46     	; 0xb22 <Write_SPI+0xfe>
    {
        Post_Event(EVT_SPI_START);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	78 e0       	ldi	r23, 0x08	; 8
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     b00:	10 c0       	rjmp	.+32     	; 0xb22 <Write_SPI+0xfe>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
     b02:	f7 01       	movw	r30, r14
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Next_Available_Row>
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	ec 5a       	subi	r30, 0xAC	; 172
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
     b1a:	ce cf       	rjmp	.-100    	; 0xab8 <Write_SPI+0x94>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
     b1c:	c1 10       	cpse	r12, r1
     b1e:	f1 cf       	rjmp	.-30     	; 0xb02 <Write_SPI+0xde>
     b20:	cb cf       	rjmp	.-106    	; 0xab8 <Write_SPI+0x94>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE && Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF )
    {
        Post_Event(EVT_SPI_START);
    }
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	08 95       	ret

00000b38 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
     b5a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Master_Slave_Identifier>
     b5e:	81 11       	cpse	r24, r1
     b60:	8b c0       	rjmp	.+278    	; 0xc78 <__vector_14+0x140>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
     b62:	8d b5       	in	r24, 0x2d	; 45
        // Do nothing if statement to "use" the variable
        if (SPSR_Status);
		
		// Once a transmit has been completed
		if (In_Tx)
     b64:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <In_Tx>
     b68:	88 23       	and	r24, r24
     b6a:	e1 f0       	breq	.+56     	; 0xba4 <__vector_14+0x6c>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
     b6c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <TX_Index>
     b70:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Expected_TX_Length>
     b74:	89 17       	cp	r24, r25
     b76:	a0 f0       	brcs	.+40     	; 0xba0 <__vector_14+0x68>
			{
				if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
     b78:	98 13       	cpse	r25, r24
     b7a:	07 c0       	rjmp	.+14     	; 0xb8a <__vector_14+0x52>
     b7c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Expected_RX_Length>
     b80:	81 11       	cpse	r24, r1
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <__vector_14+0x52>
				{
					In_Tx = false;									
     b84:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <In_Tx>
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__vector_14+0x6c>
				}
				else
				{
					Post_Event(EVT_SPI_SEND_BYTE);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e1       	ldi	r23, 0x10	; 16
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
     b96:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <In_Tx>
     b9a:	81 11       	cpse	r24, r1
     b9c:	6d c0       	rjmp	.+218    	; 0xc78 <__vector_14+0x140>
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__vector_14+0x6c>
					Post_Event(EVT_SPI_SEND_BYTE);
				}
			}
			else
			{
				In_Tx = false;
     ba0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			if (Expected_RX_Length > 0)
     ba4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Expected_RX_Length>
     ba8:	99 23       	and	r25, r25
     baa:	09 f1       	breq	.+66     	; 0xbee <__vector_14+0xb6>
			{
                if (Receive_List[Buffer_Index][RX_Index] == NULL)
     bac:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <RX_Index>
     bb0:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <Buffer_Index>
     bb4:	e8 2f       	mov	r30, r24
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	e2 0f       	add	r30, r18
     bba:	f1 1d       	adc	r31, r1
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ec 5a       	subi	r30, 0xAC	; 172
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	01 90       	ld	r0, Z+
     bc6:	f0 81       	ld	r31, Z
     bc8:	e0 2d       	mov	r30, r0
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <__vector_14+0x9a>
                {
                    if (SPDR);
     bce:	2e b5       	in	r18, 0x2e	; 46
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__vector_14+0x9e>
                }
                else
                {
                    *(Receive_List[Buffer_Index][RX_Index]) = SPDR;
     bd2:	2e b5       	in	r18, 0x2e	; 46
     bd4:	20 83       	st	Z, r18
                }
				RX_Index++;				
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <RX_Index>
			}
			if (RX_Index < Expected_RX_Length)
     bdc:	89 17       	cp	r24, r25
     bde:	38 f4       	brcc	.+14     	; 0xbee <__vector_14+0xb6>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e2       	ldi	r23, 0x20	; 32
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     bec:	45 c0       	rjmp	.+138    	; 0xc78 <__vector_14+0x140>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
     bee:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <Buffer_Index>
     bf2:	83 2f       	mov	r24, r19
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	ac 01       	movw	r20, r24
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	fa 01       	movw	r30, r20
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	e8 59       	subi	r30, 0x98	; 152
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	2f ef       	ldi	r18, 0xFF	; 255
     c0c:	20 83       	st	Z, r18
     c0e:	21 83       	std	Z+1, r18	; 0x01
     c10:	22 83       	std	Z+2, r18	; 0x02
     c12:	23 83       	std	Z+3, r18	; 0x03
     c14:	24 83       	std	Z+4, r18	; 0x04
     c16:	fa 01       	movw	r30, r20
     c18:	e8 0f       	add	r30, r24
     c1a:	f9 1f       	adc	r31, r25
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	e8 59       	subi	r30, 0x98	; 152
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	25 83       	std	Z+5, r18	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
     c26:	fa 01       	movw	r30, r20
     c28:	ec 5a       	subi	r30, 0xAC	; 172
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	11 82       	std	Z+1, r1	; 0x01
     c2e:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
     c30:	39 30       	cpi	r19, 0x09	; 9
     c32:	19 f4       	brne	.+6      	; 0xc3a <__vector_14+0x102>
    {
        Buffer_Index = 0;
     c34:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Buffer_Index>
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <__vector_14+0x108>
    }
    else
    {
        Buffer_Index++;
     c3a:	3f 5f       	subi	r19, 0xFF	; 255
     c3c:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
     c40:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <Buffer_Index>
     c44:	82 2f       	mov	r24, r18
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	82 0f       	add	r24, r18
     c4a:	91 1d       	adc	r25, r1
     c4c:	82 0f       	add	r24, r18
     c4e:	91 1d       	adc	r25, r1
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	fc 01       	movw	r30, r24
     c56:	e8 59       	subi	r30, 0x98	; 152
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	31 f0       	breq	.+12     	; 0xc6c <__vector_14+0x134>
    {
        Post_Event(EVT_SPI_START);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	78 e0       	ldi	r23, 0x08	; 8
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index >= Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e4       	ldi	r23, 0x40	; 64
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <Init_SPI_Service>:

****************************************************************************/
void Init_SPI_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_STATE;
     c9a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Current_State>

    // Initialize SPI
    SPI_Initialize();
     c9e:	0e 94 84 04 	call	0x908	; 0x908 <SPI_Initialize>
     ca2:	08 95       	ret

00000ca4 <Run_SPI_Service>:
        Processes events for SPI Message transmit/receive

****************************************************************************/
void Run_SPI_Service(uint32_t event_mask)
{
	switch(Current_State)
     ca4:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <Current_State>
     ca8:	21 30       	cpi	r18, 0x01	; 1
     caa:	a9 f0       	breq	.+42     	; 0xcd6 <Run_SPI_Service+0x32>
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <Run_SPI_Service+0x10>
     cae:	22 30       	cpi	r18, 0x02	; 2
     cb0:	89 f1       	breq	.+98     	; 0xd14 <Run_SPI_Service+0x70>
     cb2:	08 95       	ret
    {	
		case NORMAL_STATE:
			if (EVT_SPI_START == event_mask)
     cb4:	61 15       	cp	r22, r1
     cb6:	78 40       	sbci	r23, 0x08	; 8
     cb8:	81 05       	cpc	r24, r1
     cba:	91 05       	cpc	r25, r1
     cbc:	e9 f5       	brne	.+122    	; 0xd38 <Run_SPI_Service+0x94>
			{			
                // Initialize SPI for particular command
                SPI_Start_Command();
     cbe:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_Start_Command>
				// Switch to sending state
				Current_State = SENDING_STATE;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_SPI_SEND_BYTE);
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e1       	ldi	r23, 0x10	; 16
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
     cd4:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_SPI_SEND_BYTE == event_mask)
     cd6:	61 15       	cp	r22, r1
     cd8:	20 e1       	ldi	r18, 0x10	; 16
     cda:	72 07       	cpc	r23, r18
     cdc:	81 05       	cpc	r24, r1
     cde:	91 05       	cpc	r25, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <Run_SPI_Service+0x44>
			{
    			SPI_Transmit();
     ce2:	0e 94 ef 04 	call	0x9de	; 0x9de <SPI_Transmit>
     ce6:	08 95       	ret
			}
			else if (EVT_SPI_RECV_BYTE == event_mask)
     ce8:	61 15       	cp	r22, r1
     cea:	20 e2       	ldi	r18, 0x20	; 32
     cec:	72 07       	cpc	r23, r18
     cee:	81 05       	cpc	r24, r1
     cf0:	91 05       	cpc	r25, r1
     cf2:	31 f4       	brne	.+12     	; 0xd00 <Run_SPI_Service+0x5c>
			{
                SPI_Transmit();
     cf4:	0e 94 ef 04 	call	0x9de	; 0x9de <SPI_Transmit>
				Current_State = RECEIVING_STATE;				
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Current_State>
     cfe:	08 95       	ret
			}
			else if (EVT_SPI_END == event_mask)
     d00:	61 15       	cp	r22, r1
     d02:	70 44       	sbci	r23, 0x40	; 64
     d04:	81 05       	cpc	r24, r1
     d06:	91 05       	cpc	r25, r1
     d08:	b9 f4       	brne	.+46     	; 0xd38 <Run_SPI_Service+0x94>
			{
                SPI_End_Command();
     d0a:	0e 94 ed 04 	call	0x9da	; 0x9da <SPI_End_Command>
				Current_State = NORMAL_STATE;
     d0e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Current_State>
     d12:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_SPI_RECV_BYTE == event_mask)
     d14:	61 15       	cp	r22, r1
     d16:	20 e2       	ldi	r18, 0x20	; 32
     d18:	72 07       	cpc	r23, r18
     d1a:	81 05       	cpc	r24, r1
     d1c:	91 05       	cpc	r25, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <Run_SPI_Service+0x82>
            {
                SPI_Transmit();
     d20:	0e 94 ef 04 	call	0x9de	; 0x9de <SPI_Transmit>
     d24:	08 95       	ret
            }
            if (EVT_SPI_END == event_mask)
     d26:	61 15       	cp	r22, r1
     d28:	70 44       	sbci	r23, 0x40	; 64
     d2a:	81 05       	cpc	r24, r1
     d2c:	91 05       	cpc	r25, r1
     d2e:	21 f4       	brne	.+8      	; 0xd38 <Run_SPI_Service+0x94>
            {
                SPI_End_Command();
     d30:	0e 94 ed 04 	call	0x9da	; 0x9da <SPI_End_Command>
                Current_State = NORMAL_STATE;
     d34:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Current_State>
     d38:	08 95       	ret

00000d3a <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
     d3a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Current_State>
     d3e:	08 95       	ret

00000d40 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
     d40:	e6 ea       	ldi	r30, 0xA6	; 166
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	aa ea       	ldi	r26, 0xAA	; 170
     d46:	b1 e0       	ldi	r27, 0x01	; 1
     d48:	87 ee       	ldi	r24, 0xE7	; 231
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	11 82       	std	Z+1, r1	; 0x01
     d4e:	10 82       	st	Z, r1
     d50:	13 82       	std	Z+3, r1	; 0x03
     d52:	12 82       	std	Z+2, r1	; 0x02
     d54:	1c 92       	st	X, r1
     d56:	15 82       	std	Z+5, r1	; 0x05
     d58:	16 82       	std	Z+6, r1	; 0x06
     d5a:	17 82       	std	Z+7, r1	; 0x07
     d5c:	10 86       	std	Z+8, r1	; 0x08
     d5e:	11 86       	std	Z+9, r1	; 0x09
     d60:	12 86       	std	Z+10, r1	; 0x0a
     d62:	13 86       	std	Z+11, r1	; 0x0b
     d64:	14 86       	std	Z+12, r1	; 0x0c
     d66:	3d 96       	adiw	r30, 0x0d	; 13
     d68:	1d 96       	adiw	r26, 0x0d	; 13
     d6a:	e8 17       	cp	r30, r24
     d6c:	f9 07       	cpc	r31, r25
     d6e:	71 f7       	brne	.-36     	; 0xd4c <Init_Timer_Module+0xc>
     d70:	15 bc       	out	0x25, r1	; 37
     d72:	16 bc       	out	0x26, r1	; 38
     d74:	18 bc       	out	0x28, r1	; 40
     d76:	88 b5       	in	r24, 0x28	; 40
     d78:	83 58       	subi	r24, 0x83	; 131
     d7a:	88 bd       	out	0x28, r24	; 40
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d82:	16 bc       	out	0x26, r1	; 38
     d84:	86 b5       	in	r24, 0x26	; 38
     d86:	83 60       	ori	r24, 0x03	; 3
     d88:	86 bd       	out	0x26, r24	; 38
     d8a:	08 95       	ret

00000d8c <Register_Timer>:
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	c0 91 a6 01 	lds	r28, 0x01A6	; 0x8001a6 <Timers>
     d94:	d0 91 a7 01 	lds	r29, 0x01A7	; 0x8001a7 <Timers+0x1>
     d98:	c8 17       	cp	r28, r24
     d9a:	d9 07       	cpc	r29, r25
     d9c:	09 f4       	brne	.+2      	; 0xda0 <Register_Timer+0x14>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <Register_Timer+0x9a>
     da0:	a6 ea       	ldi	r26, 0xA6	; 166
     da2:	b1 e0       	ldi	r27, 0x01	; 1
     da4:	4a ed       	ldi	r20, 0xDA	; 218
     da6:	51 e0       	ldi	r21, 0x01	; 1
     da8:	fd 01       	movw	r30, r26
     daa:	25 85       	ldd	r18, Z+13	; 0x0d
     dac:	36 85       	ldd	r19, Z+14	; 0x0e
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	c9 f1       	breq	.+114    	; 0xe26 <Register_Timer+0x9a>
     db4:	3d 96       	adiw	r30, 0x0d	; 13
     db6:	e4 17       	cp	r30, r20
     db8:	f5 07       	cpc	r31, r21
     dba:	b9 f7       	brne	.-18     	; 0xdaa <Register_Timer+0x1e>
     dbc:	2f c0       	rjmp	.+94     	; 0xe1c <Register_Timer+0x90>
     dbe:	1d 96       	adiw	r26, 0x0d	; 13
     dc0:	4d 91       	ld	r20, X+
     dc2:	5c 91       	ld	r21, X
     dc4:	1e 97       	sbiw	r26, 0x0e	; 14
     dc6:	45 2b       	or	r20, r21
     dc8:	11 f5       	brne	.+68     	; 0xe0e <Register_Timer+0x82>
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <Register_Timer+0x44>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4f b7       	in	r20, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	f9 01       	movw	r30, r18
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	2e 0f       	add	r18, r30
     de8:	3f 1f       	adc	r19, r31
     dea:	f9 01       	movw	r30, r18
     dec:	ea 55       	subi	r30, 0x5A	; 90
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	73 83       	std	Z+3, r23	; 0x03
     df6:	62 83       	std	Z+2, r22	; 0x02
     df8:	14 82       	std	Z+4, r1	; 0x04
     dfa:	15 82       	std	Z+5, r1	; 0x05
     dfc:	16 82       	std	Z+6, r1	; 0x06
     dfe:	17 82       	std	Z+7, r1	; 0x07
     e00:	10 86       	std	Z+8, r1	; 0x08
     e02:	11 86       	std	Z+9, r1	; 0x09
     e04:	12 86       	std	Z+10, r1	; 0x0a
     e06:	13 86       	std	Z+11, r1	; 0x0b
     e08:	14 86       	std	Z+12, r1	; 0x0c
     e0a:	4f bf       	out	0x3f, r20	; 63
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <Register_Timer+0x9a>
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	1d 96       	adiw	r26, 0x0d	; 13
     e14:	25 30       	cpi	r18, 0x05	; 5
     e16:	31 05       	cpc	r19, r1
     e18:	91 f6       	brne	.-92     	; 0xdbe <Register_Timer+0x32>
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <Register_Timer+0x9a>
     e1c:	cd 2b       	or	r28, r29
     e1e:	b1 f2       	breq	.-84     	; 0xdcc <Register_Timer+0x40>
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	cc cf       	rjmp	.-104    	; 0xdbe <Register_Timer+0x32>
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <Start_Timer>:
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <Timers>
     e38:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <Timers+0x1>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	51 f0       	breq	.+20     	; 0xe56 <Start_Timer+0x2a>
     e42:	e6 ea       	ldi	r30, 0xA6	; 166
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	a5 85       	ldd	r26, Z+13	; 0x0d
     e4c:	b6 85       	ldd	r27, Z+14	; 0x0e
     e4e:	a8 17       	cp	r26, r24
     e50:	b9 07       	cpc	r27, r25
     e52:	29 f5       	brne	.+74     	; 0xe9e <Start_Timer+0x72>
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <Start_Timer+0x2e>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	8f b7       	in	r24, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	f9 01       	movw	r30, r18
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	2e 0f       	add	r18, r30
     e72:	3f 1f       	adc	r19, r31
     e74:	f9 01       	movw	r30, r18
     e76:	ea 55       	subi	r30, 0x5A	; 90
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	94 83       	std	Z+4, r25	; 0x04
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	16 82       	std	Z+6, r1	; 0x06
     e82:	17 82       	std	Z+7, r1	; 0x07
     e84:	10 86       	std	Z+8, r1	; 0x08
     e86:	6a 01       	movw	r12, r20
     e88:	7b 01       	movw	r14, r22
     e8a:	cc 0c       	add	r12, r12
     e8c:	dd 1c       	adc	r13, r13
     e8e:	ee 1c       	adc	r14, r14
     e90:	ff 1c       	adc	r15, r15
     e92:	c1 86       	std	Z+9, r12	; 0x09
     e94:	d2 86       	std	Z+10, r13	; 0x0a
     e96:	e3 86       	std	Z+11, r14	; 0x0b
     e98:	f4 86       	std	Z+12, r15	; 0x0c
     e9a:	8f bf       	out	0x3f, r24	; 63
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <Start_Timer+0x7e>
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	3d 96       	adiw	r30, 0x0d	; 13
     ea4:	25 30       	cpi	r18, 0x05	; 5
     ea6:	31 05       	cpc	r19, r1
     ea8:	81 f6       	brne	.-96     	; 0xe4a <Start_Timer+0x1e>
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	08 95       	ret

00000eb4 <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
     ee2:	88 b5       	in	r24, 0x28	; 40
     ee4:	83 58       	subi	r24, 0x83	; 131
     ee6:	88 bd       	out	0x28, r24	; 40
     ee8:	0a ea       	ldi	r16, 0xAA	; 170
     eea:	11 e0       	ldi	r17, 0x01	; 1
     eec:	c6 ea       	ldi	r28, 0xA6	; 166
     eee:	d1 e0       	ldi	r29, 0x01	; 1
     ef0:	0f 2e       	mov	r0, r31
     ef2:	f7 ee       	ldi	r31, 0xE7	; 231
     ef4:	ef 2e       	mov	r14, r31
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	ff 2e       	mov	r15, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
     efe:	80 81       	ld	r24, Z
     f00:	88 23       	and	r24, r24
     f02:	81 f1       	breq	.+96     	; 0xf64 <__vector_10+0xb0>
     f04:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	ab 85       	ldd	r26, Y+11	; 0x0b
     f0c:	bc 85       	ldd	r27, Y+12	; 0x0c
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	a1 05       	cpc	r26, r1
     f12:	b1 05       	cpc	r27, r1
     f14:	b9 f0       	breq	.+46     	; 0xf44 <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
     f16:	4d 81       	ldd	r20, Y+5	; 0x05
     f18:	5e 81       	ldd	r21, Y+6	; 0x06
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	4f 5f       	subi	r20, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	6f 4f       	sbci	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	4d 83       	std	Y+5, r20	; 0x05
     f28:	5e 83       	std	Y+6, r21	; 0x06
     f2a:	6f 83       	std	Y+7, r22	; 0x07
     f2c:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	a1 09       	sbc	r26, r1
     f32:	b1 09       	sbc	r27, r1
     f34:	89 87       	std	Y+9, r24	; 0x09
     f36:	9a 87       	std	Y+10, r25	; 0x0a
     f38:	ab 87       	std	Y+11, r26	; 0x0b
     f3a:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
     f3c:	89 2b       	or	r24, r25
     f3e:	8a 2b       	or	r24, r26
     f40:	8b 2b       	or	r24, r27
     f42:	81 f4       	brne	.+32     	; 0xf64 <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
     f44:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
     f46:	d9 01       	movw	r26, r18
     f48:	12 96       	adiw	r26, 0x02	; 2
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	13 97       	sbiw	r26, 0x03	; 3
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	41 f0       	breq	.+16     	; 0xf64 <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
     f54:	8d 91       	ld	r24, X+
     f56:	9c 91       	ld	r25, X
     f58:	dc 01       	movw	r26, r24
     f5a:	6d 91       	ld	r22, X+
     f5c:	7d 91       	ld	r23, X+
     f5e:	8d 91       	ld	r24, X+
     f60:	9c 91       	ld	r25, X
     f62:	09 95       	icall
     f64:	03 5f       	subi	r16, 0xF3	; 243
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
     f6a:	ce 15       	cp	r28, r14
     f6c:	df 05       	cpc	r29, r15
     f6e:	31 f6       	brne	.-116    	; 0xefc <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <UART_Initialize>:
	// Rx -> A0
	// Tx -> A1
	
	//DDRA &= ~(1<<PINA0);
	//PORTA &= ~(1<<PINA0);
	PORTB &= ~(1<<PINB1);
     f9e:	29 98       	cbi	0x05, 1	; 5
	DDRB |= (1<<PINB1);
     fa0:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<PINB5);
     fa2:	2d 98       	cbi	0x05, 5	; 5
	DDRB |= (1<<PINB5);
     fa4:	25 9a       	sbi	0x04, 5	; 4
	
	// Reset UART
	LINCR |= (1<<LSWRES);
     fa6:	e8 ec       	ldi	r30, 0xC8	; 200
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	20 81       	ld	r18, Z
     fac:	20 68       	ori	r18, 0x80	; 128
     fae:	20 83       	st	Z, r18
	
    // Set up LINCR with
	// - Command Mode = TxRx Enabled
	// - UART Enable
	// - Odd Parity	
	LINCR = (1<<LCMD0)|(1<<LCMD1)|(1<<LCMD2)|(1<<LENA)|(0<<LCONF0)|(0<<LCONF1);
     fb0:	2f e0       	ldi	r18, 0x0F	; 15
     fb2:	20 83       	st	Z, r18
	
	// Set up LINBTR
	LINBTR = (0<<LDISR);
     fb4:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	
	// 19200 baud
	LINBRRL = 12;//(1<<LDIV0);
     fb8:	2c e0       	ldi	r18, 0x0C	; 12
     fba:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
	LINBRRH = 0;
     fbe:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    
	// LIN Interrupt Enable
	LINENIR = (1<<LENERR)|(1<<LENTXOK)|(1<<LENRXOK);
     fc2:	2b e0       	ldi	r18, 0x0B	; 11
     fc4:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	//LINENIR = (1<<LENTXOK)|(1<<LENRXOK);
	// Reset indices
    Buffer_Index = 0;
     fc8:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <Buffer_Index>
    TX_Index = 0;
     fcc:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <TX_Index>
	RX_Index = 0;
     fd0:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <RX_Index>
	
	Modem_Recv_Data = pCanTXPacket;
     fd4:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <Modem_Recv_Data+0x1>
     fd8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <Modem_Recv_Data>
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     fdc:	ed ef       	ldi	r30, 0xFD	; 253
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	80 83       	st	Z, r24
     fe4:	81 83       	std	Z+1, r24	; 0x01
     fe6:	82 83       	std	Z+2, r24	; 0x02
     fe8:	83 83       	std	Z+3, r24	; 0x03
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     fea:	a9 ef       	ldi	r26, 0xF9	; 249
     fec:	b1 e0       	ldi	r27, 0x01	; 1
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	1c 92       	st	X, r1
     ff2:	1e 92       	st	-X, r1
    for (int row = 0; row < UART_COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < UART_MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
     ff4:	84 83       	std	Z+4, r24	; 0x04
     ff6:	85 83       	std	Z+5, r24	; 0x05
     ff8:	86 83       	std	Z+6, r24	; 0x06
     ffa:	87 83       	std	Z+7, r24	; 0x07
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < UART_MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
     ffc:	13 96       	adiw	r26, 0x03	; 3
     ffe:	1c 92       	st	X, r1
    1000:	1e 92       	st	-X, r1
    1002:	12 97       	sbiw	r26, 0x02	; 2
    1004:	08 95       	ret

00001006 <UART_Start_Command>:

****************************************************************************/

void UART_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE];
    1006:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <Buffer_Index>
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e3 50       	subi	r30, 0x03	; 3
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][UART_RX_LENGTH_BYTE];
    101e:	81 81       	ldd	r24, Z+1	; 0x01
    1020:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
    1024:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
    1028:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <TX_Index>
	
	// State in TX
	In_Tx = true;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <In_Tx>
    1032:	08 95       	ret

00001034 <UART_End_Command>:
        Ends UART Transmission by setting SS high

****************************************************************************/

void UART_End_Command (void)
{
    1034:	08 95       	ret

00001036 <UART_Transmit>:

****************************************************************************/

void UART_Transmit (void)
{
	if (!modem_init)
    1036:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <modem_init>
    103a:	81 11       	cpse	r24, r1
    103c:	16 c0       	rjmp	.+44     	; 0x106a <UART_Transmit+0x34>
	{
		// Send byte out
		LINDAT = Command_Buffer[Buffer_Index][TX_Index + UART_LENGTH_BYTES];
    103e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <Buffer_Index>
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TX_Index>
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e3 50       	subi	r30, 0x03	; 3
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	e8 0f       	add	r30, r24
    1056:	f1 1d       	adc	r31, r1
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		TX_Index++;
    105e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TX_Index>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <TX_Index>
    1068:	08 95       	ret
		//}
	}
	else
	{
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
    106a:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <Text_Index>
    106e:	82 2f       	mov	r24, r18
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	e0 5b       	subi	r30, 0xB0	; 176
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	34 91       	lpm	r19, Z
    107a:	3f 32       	cpi	r19, 0x2F	; 47
    107c:	59 f4       	brne	.+22     	; 0x1094 <UART_Transmit+0x5e>
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
    107e:	fc 01       	movw	r30, r24
    1080:	ef 5a       	subi	r30, 0xAF	; 175
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	e4 91       	lpm	r30, Z
    1086:	e2 37       	cpi	r30, 0x72	; 114
    1088:	39 f4       	brne	.+14     	; 0x1098 <UART_Transmit+0x62>
				set_as = 0x0D;
				Text_Index++;
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	20 93 f2 01 	sts	0x01F2, r18	; 0x8001f2 <Text_Index>
		char set_as;
		if (pgm_read_byte(&(Init_Text[Text_Index])) == '/')
		{
			// If an escape sequence, skip slash and send special character
			if (pgm_read_byte(&(Init_Text[Text_Index+1])) == 'r') {
				set_as = 0x0D;
    1090:	ed e0       	ldi	r30, 0x0D	; 13
    1092:	03 c0       	rjmp	.+6      	; 0x109a <UART_Transmit+0x64>
				set_as = '/';	
			}
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
    1094:	e4 91       	lpm	r30, Z
    1096:	01 c0       	rjmp	.+2      	; 0x109a <UART_Transmit+0x64>
				set_as = 0x0D;
				Text_Index++;
			}
			
			else {
				set_as = '/';	
    1098:	ef e2       	ldi	r30, 0x2F	; 47
		}
		else
		{
			set_as = pgm_read_byte(&(Init_Text[Text_Index]));	
		}
		LINDAT = set_as;
    109a:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
		Text_Index++;
    109e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Text_Index>
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Text_Index>
    10a8:	08 95       	ret

000010aa <Write_UART>:
    Description
        Fills in current command into UART command buffer
****************************************************************************/

void Write_UART(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive, bool Init_Seq)
{
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	d8 2e       	mov	r13, r24
    10bc:	c6 2e       	mov	r12, r22
    10be:	ea 01       	movw	r28, r20
    10c0:	79 01       	movw	r14, r18
	if (!Init_Seq)
    10c2:	01 11       	cpse	r16, r1
    10c4:	4f c0       	rjmp	.+158    	; 0x1164 <Write_UART+0xba>
	{
		modem_init = false;
    10c6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <modem_init>
		counter_value = query_counter();
    10ca:	0e 94 81 03 	call	0x702	; 0x702 <query_counter>
    10ce:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <counter_value>
    10d2:	70 93 ee 01 	sts	0x01EE, r23	; 0x8001ee <counter_value+0x1>
    10d6:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <counter_value+0x2>
    10da:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <counter_value+0x3>
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    10de:	0d 2d       	mov	r16, r13
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	0e 5f       	subi	r16, 0xFE	; 254
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    10e6:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <Next_Available_Row>
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	de 01       	movw	r26, r28
    10ee:	12 97       	sbiw	r26, 0x02	; 2
    10f0:	c9 01       	movw	r24, r18
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    10fe:	9c 01       	movw	r18, r24
    1100:	23 50       	subi	r18, 0x03	; 3
    1102:	3e 4f       	sbci	r19, 0xFE	; 254
    1104:	a9 01       	movw	r20, r18
    1106:	4f 5f       	subi	r20, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
		{
			// Fill in expected TX length
			if (i == UART_TX_LENGTH_BYTE)
    110a:	30 97       	sbiw	r30, 0x00	; 0
    110c:	19 f4       	brne	.+6      	; 0x1114 <Write_UART+0x6a>
			{
				Command_Buffer[Next_Available_Row][UART_TX_LENGTH_BYTE] = TX_Length;
    110e:	e9 01       	movw	r28, r18
    1110:	d8 82       	st	Y, r13
    1112:	0d c0       	rjmp	.+26     	; 0x112e <Write_UART+0x84>
			}
			// Fill in expected RX Length
			else if (i == UART_RX_LENGTH_BYTE)
    1114:	e1 30       	cpi	r30, 0x01	; 1
    1116:	f1 05       	cpc	r31, r1
    1118:	19 f4       	brne	.+6      	; 0x1120 <Write_UART+0x76>
			{
				Command_Buffer[Next_Available_Row][UART_RX_LENGTH_BYTE] = RX_Length;
    111a:	ea 01       	movw	r28, r20
    111c:	c8 82       	st	Y, r12
    111e:	07 c0       	rjmp	.+14     	; 0x112e <Write_UART+0x84>
			}
			// Fill in remaining data to TX
			else
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
    1120:	6c 91       	ld	r22, X
    1122:	ef 01       	movw	r28, r30
    1124:	c8 0f       	add	r28, r24
    1126:	d9 1f       	adc	r29, r25
    1128:	c3 50       	subi	r28, 0x03	; 3
    112a:	de 4f       	sbci	r29, 0xFE	; 254
    112c:	68 83       	st	Y, r22
	{
		modem_init = false;
		counter_value = query_counter();
		
		// Over all columns of next available command row
		for (int i = 0; i < (UART_LENGTH_BYTES + TX_Length); i++)
    112e:	31 96       	adiw	r30, 0x01	; 1
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	e0 17       	cp	r30, r16
    1134:	f1 07       	cpc	r31, r17
    1136:	4c f3       	brlt	.-46     	; 0x110a <Write_UART+0x60>
    1138:	2a c0       	rjmp	.+84     	; 0x118e <Write_UART+0xe4>
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
			}
		}
		// If reached Command Buffer end
		if (Next_Available_Row == UART_COMMAND_BUFFER_SIZE - 1)
    113a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Next_Available_Row>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	19 f4       	brne	.+6      	; 0x1148 <Write_UART+0x9e>
		{
			Next_Available_Row = 0;
    1142:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <Next_Available_Row>
    1146:	03 c0       	rjmp	.+6      	; 0x114e <Write_UART+0xa4>
		}
		else
		{
			Next_Available_Row++;
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Next_Available_Row>
		}
		// If UART is currently idling, start transmission
		if (Query_UART_State() == NORMAL_UART_STATE)
    114e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <Query_UART_State>
    1152:	81 11       	cpse	r24, r1
    1154:	1f c0       	rjmp	.+62     	; 0x1194 <Write_UART+0xea>
		{
			Post_Event(EVT_UART_START);
    1156:	60 e8       	ldi	r22, 0x80	; 128
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1162:	18 c0       	rjmp	.+48     	; 0x1194 <Write_UART+0xea>
		}
	}
	else
	{
		modem_init = true;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <modem_init>
		Text_Index = 0;
    116a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Text_Index>
		UART_Transmit();
    116e:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Transmit>
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <Write_UART+0xea>
		if (RX_Length > 0)
		{
			for (int i = 0; i < RX_Length; i++)
			{
				// Add pointers to variables that shall be updated with receive data
				Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
    1174:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <Next_Available_Row>
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	e7 50       	subi	r30, 0x07	; 7
    1180:	fe 4f       	sbci	r31, 0xFE	; 254
    1182:	d7 01       	movw	r26, r14
    1184:	8d 91       	ld	r24, X+
    1186:	9c 91       	ld	r25, X
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	d6 cf       	rjmp	.-84     	; 0x113a <Write_UART+0x90>
			{
				Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - UART_LENGTH_BYTES));
			}
		}
		// Data is expected to be received
		if (RX_Length > 0)
    118e:	c1 10       	cpse	r12, r1
    1190:	f1 cf       	rjmp	.-30     	; 0x1174 <Write_UART+0xca>
    1192:	d3 cf       	rjmp	.-90     	; 0x113a <Write_UART+0x90>
	{
		modem_init = true;
		Text_Index = 0;
		UART_Transmit();
	}	
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret

000011a6 <__vector_13>:
    Description
        Handles UART transmission completed interrupts

****************************************************************************/
ISR(LIN_ERR_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	8f 93       	push	r24
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	PORTB |= (1<<PINB1);
    11b6:	29 9a       	sbi	0x05, 1	; 5
	LINSIR |= (1<LERR);
    11b8:	e9 ec       	ldi	r30, 0xC9	; 201
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	8f 91       	pop	r24
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_12>:

ISR(LIN_TC_vect)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	6f 93       	push	r22
    11e6:	7f 93       	push	r23
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	af 93       	push	r26
    11ee:	bf 93       	push	r27
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
	//LINSIR = (1<<3)|(1<<2)|(1<<1)|(1<<0);
	// Received a byte
	if (LINSIR & RX_ISR_FLAG)	
    11f4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    11f8:	80 ff       	sbrs	r24, 0
    11fa:	5f c0       	rjmp	.+190    	; 0x12ba <__vector_12+0xe8>
	//if (!modem_init && !In_Tx)
	{
		LINSIR |= RX_ISR_FLAG;	// Clear Receive Flag
    11fc:	e9 ec       	ldi	r30, 0xC9	; 201
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	80 83       	st	Z, r24

						
		// If the correct sequence was received, prepare to store packet sent from phone
		if (first_byte_T && second_byte_slash_n && third_slash_r)
    1206:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <first_byte_T>
    120a:	88 23       	and	r24, r24
    120c:	69 f1       	breq	.+90     	; 0x1268 <__vector_12+0x96>
    120e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <second_byte_slash_n>
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <__vector_12+0x46>
    1216:	dd c0       	rjmp	.+442    	; 0x13d2 <__vector_12+0x200>
    1218:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <third_slash_r>
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <__vector_12+0x50>
    1220:	d8 c0       	rjmp	.+432    	; 0x13d2 <__vector_12+0x200>
		{
			Modem_Recv_Data[byte_space_counter - 1] = LINDAT;
    1222:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <byte_space_counter>
    1226:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    122a:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <Modem_Recv_Data>
    122e:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <Modem_Recv_Data+0x1>
    1232:	e8 0f       	add	r30, r24
    1234:	f1 1d       	adc	r31, r1
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	90 83       	st	Z, r25
			byte_space_counter++;
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <byte_space_counter>
			
			if (byte_space_counter >= MAX_MODEM_RECEIVE + 1)
    1240:	85 30       	cpi	r24, 0x05	; 5
    1242:	08 f4       	brcc	.+2      	; 0x1246 <__vector_12+0x74>
    1244:	d5 c0       	rjmp	.+426    	; 0x13f0 <__vector_12+0x21e>
			{
				PORTB ^= (1<<PINB5);
    1246:	95 b1       	in	r25, 0x05	; 5
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	89 27       	eor	r24, r25
    124c:	85 b9       	out	0x05, r24	; 5
				first_byte_T = false;
    124e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <first_byte_T>
				second_byte_slash_n = false;
    1252:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <second_byte_slash_n>
				third_slash_r = false;
    1256:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <third_slash_r>
				Post_Event(EVT_MODEM_NEW_PACKAGE);
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e8       	ldi	r23, 0x80	; 128
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1266:	c4 c0       	rjmp	.+392    	; 0x13f0 <__vector_12+0x21e>
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			//PORTB &= ~(1<<PINB5);
			uint8_t Current_Read = LINDAT;
    1268:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
    126c:	84 35       	cpi	r24, 0x54	; 84
    126e:	c9 f4       	brne	.+50     	; 0x12a2 <__vector_12+0xd0>
			{
				byte_space_counter = 0;
    1270:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <byte_space_counter>
				first_byte_T = true;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <first_byte_T>
    127a:	19 c0       	rjmp	.+50     	; 0x12ae <__vector_12+0xdc>
			}
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
    127c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <byte_space_counter>
    1280:	91 30       	cpi	r25, 0x01	; 1
    1282:	79 f4       	brne	.+30     	; 0x12a2 <__vector_12+0xd0>
    1284:	8d 30       	cpi	r24, 0x0D	; 13
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_12+0xb8>
    1288:	ae c0       	rjmp	.+348    	; 0x13e6 <__vector_12+0x214>
			{
				second_byte_slash_n = true;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <second_byte_slash_n>
				byte_space_counter = 0;
    1290:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <byte_space_counter>
    1294:	0c c0       	rjmp	.+24     	; 0x12ae <__vector_12+0xdc>
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
			{
				third_slash_r = true;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <third_slash_r>
				byte_space_counter = 0;
    129c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <byte_space_counter>
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <__vector_12+0xdc>
			}
			else {
				first_byte_T = false;
    12a2:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <first_byte_T>
				second_byte_slash_n = false;
    12a6:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <second_byte_slash_n>
				third_slash_r = false;
    12aa:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <third_slash_r>
			}
			byte_space_counter++;
    12ae:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <byte_space_counter>
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <byte_space_counter>
    12b8:	9b c0       	rjmp	.+310    	; 0x13f0 <__vector_12+0x21e>
		}
	}
	
	// Completed transmission of a byte
	else if (LINSIR && TX_ISR_FLAG)
    12ba:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__vector_12+0xf2>
    12c2:	96 c0       	rjmp	.+300    	; 0x13f0 <__vector_12+0x21e>
	{
		LINSIR |= TX_ISR_FLAG;	// Clear Transmit flag
    12c4:	e9 ec       	ldi	r30, 0xC9	; 201
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	80 83       	st	Z, r24
		if (!modem_init)
    12ce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <modem_init>
    12d2:	81 11       	cpse	r24, r1
    12d4:	74 c0       	rjmp	.+232    	; 0x13be <__vector_12+0x1ec>
		{
			// Once a transmit has been completed
			if (In_Tx)
    12d6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <In_Tx>
    12da:	88 23       	and	r24, r24
    12dc:	e1 f0       	breq	.+56     	; 0x1316 <__vector_12+0x144>
			{
				// If more bytes left to transmit post transmission event
				if (TX_Index <= Expected_TX_Length)
    12de:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <TX_Index>
    12e2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <Expected_TX_Length>
    12e6:	89 17       	cp	r24, r25
    12e8:	a0 f0       	brcs	.+40     	; 0x1312 <__vector_12+0x140>
				{
					if ((TX_Index == Expected_TX_Length) && Expected_RX_Length == 0)
    12ea:	98 13       	cpse	r25, r24
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <__vector_12+0x12a>
    12ee:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Expected_RX_Length>
    12f2:	81 11       	cpse	r24, r1
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <__vector_12+0x12a>
					{
						In_Tx = false;
    12f6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <In_Tx>
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <__vector_12+0x144>
					}
					else
					{
						Post_Event(EVT_UART_SEND_BYTE);
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	71 e0       	ldi	r23, 0x01	; 1
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
				{
					In_Tx = false;
				}
			}
			
			if (!In_Tx)
    1308:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <In_Tx>
    130c:	81 11       	cpse	r24, r1
    130e:	70 c0       	rjmp	.+224    	; 0x13f0 <__vector_12+0x21e>
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <__vector_12+0x144>
						Post_Event(EVT_UART_SEND_BYTE);
					}
				}
				else
				{
					In_Tx = false;
    1312:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <In_Tx>
				}
			}
			
			if (!In_Tx)
			{
				if (Expected_RX_Length > 0)
    1316:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <Expected_RX_Length>
    131a:	99 23       	and	r25, r25
    131c:	c1 f0       	breq	.+48     	; 0x134e <__vector_12+0x17c>
				{
					*(Receive_List[Buffer_Index][RX_Index]) = LINDAT;
    131e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <RX_Index>
    1322:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <Buffer_Index>
    1326:	e8 2f       	mov	r30, r24
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	e2 0f       	add	r30, r18
    132c:	f1 1d       	adc	r31, r1
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	e7 50       	subi	r30, 0x07	; 7
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	01 90       	ld	r0, Z+
    1338:	f0 81       	ld	r31, Z
    133a:	e0 2d       	mov	r30, r0
    133c:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    1340:	20 83       	st	Z, r18
					RX_Index++;
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <RX_Index>
				if (RX_Index < Expected_RX_Length)
				{
					// Do Nothing
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
    1348:	89 17       	cp	r24, r25
    134a:	08 f4       	brcc	.+2      	; 0x134e <__vector_12+0x17c>
    134c:	51 c0       	rjmp	.+162    	; 0x13f0 <__vector_12+0x21e>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < UART_MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
    134e:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <Buffer_Index>
    1352:	82 2f       	mov	r24, r18
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	fc 01       	movw	r30, r24
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e3 50       	subi	r30, 0x03	; 3
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	30 83       	st	Z, r19
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	32 83       	std	Z+2, r19	; 0x02
    136c:	33 83       	std	Z+3, r19	; 0x03
    }
    // Point current receive list row to NULL
    for (int i = 0; i < UART_MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	fc 01       	movw	r30, r24
    1374:	e7 50       	subi	r30, 0x07	; 7
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	11 82       	std	Z+1, r1	; 0x01
    137a:	10 82       	st	Z, r1
    }
    // If at end of buffer
    if (Buffer_Index == UART_COMMAND_BUFFER_SIZE - 1)
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	19 f4       	brne	.+6      	; 0x1386 <__vector_12+0x1b4>
    {
        Buffer_Index = 0;
    1380:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <Buffer_Index>
    1384:	03 c0       	rjmp	.+6      	; 0x138c <__vector_12+0x1ba>
    }
    else
    {
        Buffer_Index++;
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][UART_TX_LENGTH_BYTE] != 0xFF)
    138c:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <Buffer_Index>
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e3 50       	subi	r30, 0x03	; 3
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	80 81       	ld	r24, Z
    13a0:	8f 3f       	cpi	r24, 0xFF	; 255
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <__vector_12+0x1de>
    {
        Post_Event(EVT_UART_START);
    13a4:	60 e8       	ldi	r22, 0x80	; 128
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
					// Post_Event(EVT_UART_RECV_BYTE);
				}
				else if (RX_Index >= Expected_RX_Length)
				{
					Update_Buffer_Index();
					Post_Event(EVT_UART_END);
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	74 e0       	ldi	r23, 0x04	; 4
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    13bc:	19 c0       	rjmp	.+50     	; 0x13f0 <__vector_12+0x21e>
		}
		
		// If in startup sequence for modem commands
		else
		{
			if (Text_Index >= sizeof(Init_Text)/sizeof(Init_Text[0]))
    13be:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Text_Index>
    13c2:	8a 30       	cpi	r24, 0x0A	; 10
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <__vector_12+0x1fa>
			{
				modem_init = false;
    13c6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <modem_init>
    13ca:	12 c0       	rjmp	.+36     	; 0x13f0 <__vector_12+0x21e>
				int i = 0;
				//while (true) {
					//i++;
					//if (i > 20000) break;
				//}
				UART_Transmit();
    13cc:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Transmit>
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <__vector_12+0x21e>
		
		// Check for correct sequence from modem to see if a packet is coming
		else
		{
			//PORTB &= ~(1<<PINB5);
			uint8_t Current_Read = LINDAT;
    13d2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
			if (Current_Read == 'T')
    13d6:	84 35       	cpi	r24, 0x54	; 84
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__vector_12+0x20a>
    13da:	50 cf       	rjmp	.-352    	; 0x127c <__vector_12+0xaa>
    13dc:	49 cf       	rjmp	.-366    	; 0x1270 <__vector_12+0x9e>
			else if (first_byte_T && byte_space_counter == 1 && Current_Read == 0x0D)
			{
				second_byte_slash_n = true;
				byte_space_counter = 0;
			}
			else if (first_byte_T && second_byte_slash_n && byte_space_counter == 1 && Current_Read == 0x0A)
    13de:	8a 30       	cpi	r24, 0x0A	; 10
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <__vector_12+0x212>
    13e2:	5f cf       	rjmp	.-322    	; 0x12a2 <__vector_12+0xd0>
    13e4:	58 cf       	rjmp	.-336    	; 0x1296 <__vector_12+0xc4>
    13e6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <second_byte_slash_n>
    13ea:	91 11       	cpse	r25, r1
    13ec:	f8 cf       	rjmp	.-16     	; 0x13de <__vector_12+0x20c>
    13ee:	59 cf       	rjmp	.-334    	; 0x12a2 <__vector_12+0xd0>
				//}
				UART_Transmit();
			}
		}
	}	
}
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <Init_UART_Service>:
    1412:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <Current_State>
    1416:	08 95       	ret

00001418 <Run_UART_Service>:
    1418:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Current_State>
    141c:	21 30       	cpi	r18, 0x01	; 1
    141e:	a9 f0       	breq	.+42     	; 0x144a <Run_UART_Service+0x32>
    1420:	18 f0       	brcs	.+6      	; 0x1428 <Run_UART_Service+0x10>
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	89 f1       	breq	.+98     	; 0x1488 <Run_UART_Service+0x70>
    1426:	08 95       	ret
    1428:	60 38       	cpi	r22, 0x80	; 128
    142a:	71 05       	cpc	r23, r1
    142c:	81 05       	cpc	r24, r1
    142e:	91 05       	cpc	r25, r1
    1430:	e9 f5       	brne	.+122    	; 0x14ac <Run_UART_Service+0x94>
    1432:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_Start_Command>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Current_State>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 be 02 	call	0x57c	; 0x57c <Post_Event>
    1448:	08 95       	ret
    144a:	61 15       	cp	r22, r1
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	72 07       	cpc	r23, r18
    1450:	81 05       	cpc	r24, r1
    1452:	91 05       	cpc	r25, r1
    1454:	19 f4       	brne	.+6      	; 0x145c <Run_UART_Service+0x44>
    1456:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Transmit>
    145a:	08 95       	ret
    145c:	61 15       	cp	r22, r1
    145e:	22 e0       	ldi	r18, 0x02	; 2
    1460:	72 07       	cpc	r23, r18
    1462:	81 05       	cpc	r24, r1
    1464:	91 05       	cpc	r25, r1
    1466:	31 f4       	brne	.+12     	; 0x1474 <Run_UART_Service+0x5c>
    1468:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Transmit>
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Current_State>
    1472:	08 95       	ret
    1474:	61 15       	cp	r22, r1
    1476:	74 40       	sbci	r23, 0x04	; 4
    1478:	81 05       	cpc	r24, r1
    147a:	91 05       	cpc	r25, r1
    147c:	b9 f4       	brne	.+46     	; 0x14ac <Run_UART_Service+0x94>
    147e:	0e 94 1a 08 	call	0x1034	; 0x1034 <UART_End_Command>
    1482:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <Current_State>
    1486:	08 95       	ret
    1488:	61 15       	cp	r22, r1
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	72 07       	cpc	r23, r18
    148e:	81 05       	cpc	r24, r1
    1490:	91 05       	cpc	r25, r1
    1492:	19 f4       	brne	.+6      	; 0x149a <Run_UART_Service+0x82>
    1494:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Transmit>
    1498:	08 95       	ret
    149a:	61 15       	cp	r22, r1
    149c:	74 40       	sbci	r23, 0x04	; 4
    149e:	81 05       	cpc	r24, r1
    14a0:	91 05       	cpc	r25, r1
    14a2:	21 f4       	brne	.+8      	; 0x14ac <Run_UART_Service+0x94>
    14a4:	0e 94 1a 08 	call	0x1034	; 0x1034 <UART_End_Command>
    14a8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <Current_State>
    14ac:	08 95       	ret

000014ae <Query_UART_State>:
    14ae:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Current_State>
    14b2:	08 95       	ret

000014b4 <_exit>:
    14b4:	f8 94       	cli

000014b6 <__stop_program>:
    14b6:	ff cf       	rjmp	.-2      	; 0x14b6 <__stop_program>
