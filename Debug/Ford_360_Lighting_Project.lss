
Ford_360_Lighting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012a  0080010a  0080010a  00000ffa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b71  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e1  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196b  00000000  00000000  000055ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00006f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dac  00000000  00000000  0000765c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016d4  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_9>
  28:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_10>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_12>
  34:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_13>
  38:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_15>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	ec e5       	ldi	r30, 0x5C	; 92
  64:	ff e0       	ldi	r31, 0x0F	; 15
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	aa 30       	cpi	r26, 0x0A	; 10
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	22 e0       	ldi	r18, 0x02	; 2
  74:	aa e0       	ldi	r26, 0x0A	; 10
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a4 33       	cpi	r26, 0x34	; 52
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 94 02 	call	0x528	; 0x528 <main>
  86:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Init_ADC_Module>:

****************************************************************************/
void Start_ADC_Measurement(void)
{
    // Writing this bit kicks off the ADC measurement
    ADCSRA |= (1<<ADSC);
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	80 83       	st	Z, r24
  98:	a7 e7       	ldi	r26, 0x77	; 119
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	8c 91       	ld	r24, X
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	8c 93       	st	X, r24
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	80 83       	st	Z, r24
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 68       	ori	r24, 0x88	; 136
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <__vector_15>:
    Description
        Handles ADC specific interrupts

****************************************************************************/
ISR(ADC_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
    // Clear ADC Interrupt Flag
    ADCSRA |= (1<<ADIF);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
    // Get ADC from 2, 8-bit regs,
    //      no need for atomic because we are
    //      in an ISR which is technically an
    //      atomic section
    Last_ADC_Value = ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
  e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <stop_signal>:
    }
    else
    {
        return true;
    }
}
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 24 04 	call	0x848	; 0x848 <Set_PWM_Duty_Cycle>
 106:	08 95       	ret

00000108 <Init_Analog_Servo_Driver>:
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	cb 01       	movw	r24, r22
 10e:	0e 94 7f 00 	call	0xfe	; 0xfe <stop_signal>
 112:	e3 e8       	ldi	r30, 0x83	; 131
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	80 83       	st	Z, r24
 11c:	2b 98       	cbi	0x05, 3	; 5
 11e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
 12c:	6f e7       	ldi	r22, 0x7F	; 127
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 a9 06 	call	0xd52	; 0xd52 <Register_Timer>
 138:	08 95       	ret

0000013a <__vector_9>:
        -       TOP Interrupt
        3       Do nothing

****************************************************************************/
ISR(TIMER1_OVF_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
    // Switch for fastest execution time
    switch (Step)
 14a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14e:	88 23       	and	r24, r24
 150:	19 f0       	breq	.+6      	; 0x158 <__vector_9+0x1e>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	39 f0       	breq	.+14     	; 0x164 <__vector_9+0x2a>
 156:	0c c0       	rjmp	.+24     	; 0x170 <__vector_9+0x36>
    {
        case STEP0:
            // Enable PWM out on the analog servo drive pin
            TCCR1D |= (1<<ANALOG_SERVO_PWM_EN);
 158:	e3 e8       	ldi	r30, 0x83	; 131
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	80 83       	st	Z, r24
            break;
 162:	06 c0       	rjmp	.+12     	; 0x170 <__vector_9+0x36>

        case STEP1:
            // Disable PWM out on the analog servo drive pin
            TCCR1D &= ~(1<<ANALOG_SERVO_PWM_EN);
 164:	e3 e8       	ldi	r30, 0x83	; 131
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	80 83       	st	Z, r24
            // Drive line low (This order is okay because at TOP
            //  the line should be low, this also seems to have
            //  less jitter based on o'scope-ing)
            ANALOG_SERVO_DRV_PORT &= ~(1<<ANALOG_SERVO_DRV_PIN);
 16e:	2b 98       	cbi	0x05, 3	; 5
        default:
            break;
    }

    // Increment step number for next TOP interrupt
    Step++;
 170:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 174:	8f 5f       	subi	r24, 0xFF	; 255
    Step &= STEP_BITS_XOR_MASK;
 176:	83 70       	andi	r24, 0x03	; 3
 178:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <Write_Intensity_Data>:

****************************************************************************/
void Write_Intensity_Data(uint8_t * p_LIN_packet, intensity_data_t data_to_write)
{
    intensity_data_t temp = data_to_write;
    memcpy(p_LIN_packet+INTENSITY_DATA_INDEX, &temp, INTENSITY_DATA_LEN);
 18c:	fc 01       	movw	r30, r24
 18e:	60 83       	st	Z, r22
 190:	08 95       	ret

00000192 <Write_Position_Data>:

****************************************************************************/
void Write_Position_Data(uint8_t * p_LIN_packet, position_data_t data_to_write)
{
    position_data_t temp = data_to_write;
    memcpy(p_LIN_packet+POSITION_DATA_INDEX, &temp, POSITION_DATA_LEN);
 192:	fc 01       	movw	r30, r24
 194:	72 83       	std	Z+2, r23	; 0x02
 196:	61 83       	std	Z+1, r22	; 0x01
 198:	08 95       	ret

0000019a <Get_Pointer_To_Slave_Data>:
****************************************************************************/
uint8_t * Get_Pointer_To_Slave_Data(uint8_t * p_master_array, uint8_t slave_num)
{
    // This assumes the first section of the master array corresponds
    //  to the lowest slave number (the first slave)
    return (p_master_array+((slave_num-LOWEST_SLAVE_NUMBER)*LIN_PACKET_LEN));
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	61 50       	subi	r22, 0x01	; 1
 19e:	71 09       	sbc	r23, r1
 1a0:	9b 01       	movw	r18, r22
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	62 0f       	add	r22, r18
 1a8:	73 1f       	adc	r23, r19
}
 1aa:	86 0f       	add	r24, r22
 1ac:	97 1f       	adc	r25, r23
 1ae:	08 95       	ret

000001b0 <process_event_if_pending>:
        Checks if an particular event is pending and if so, clears it, then
            calls the run functions to process the event

****************************************************************************/
static void process_event_if_pending(uint32_t event_mask)
{
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17

****************************************************************************/
static bool is_event_pending(uint32_t event_mask)
{
    // If this event is pending
    if (event_mask == (Pending_Events & event_mask))
 1bc:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <Pending_Events>
 1c0:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <Pending_Events+0x1>
 1c4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <Pending_Events+0x2>
 1c8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <Pending_Events+0x3>
 1cc:	6b 01       	movw	r12, r22
 1ce:	7c 01       	movw	r14, r24
 1d0:	c0 22       	and	r12, r16
 1d2:	d1 22       	and	r13, r17
 1d4:	e2 22       	and	r14, r18
 1d6:	f3 22       	and	r15, r19
 1d8:	6c 15       	cp	r22, r12
 1da:	7d 05       	cpc	r23, r13
 1dc:	8e 05       	cpc	r24, r14
 1de:	9f 05       	cpc	r25, r15
 1e0:	a1 f4       	brne	.+40     	; 0x20a <process_event_if_pending+0x5a>
    {
        // Clear Event
        Pending_Events &= ~event_mask;
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
 1e6:	c0 94       	com	r12
 1e8:	d0 94       	com	r13
 1ea:	e0 94       	com	r14
 1ec:	f0 94       	com	r15
 1ee:	0c 21       	and	r16, r12
 1f0:	1d 21       	and	r17, r13
 1f2:	2e 21       	and	r18, r14
 1f4:	3f 21       	and	r19, r15
 1f6:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <Pending_Events>
 1fa:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <Pending_Events+0x1>
 1fe:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <Pending_Events+0x2>
 202:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <Pending_Events+0x3>
{
    // If event is pending
    if (is_event_pending(event_mask))
    {
        // Run the services with this event
        Run_Services(event_mask);
 206:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Run_Services>
    }
}
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

00000218 <Post_Event>:
    Description
        Posts an event to the event list

****************************************************************************/
void Post_Event(uint32_t event_mask)
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
    // Set flag in event list
    Pending_Events |= event_mask;
 21c:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <Pending_Events>
 220:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <Pending_Events+0x1>
 224:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <Pending_Events+0x2>
 228:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <Pending_Events+0x3>
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	80 2b       	or	r24, r16
 232:	91 2b       	or	r25, r17
 234:	a2 2b       	or	r26, r18
 236:	b3 2b       	or	r27, r19
 238:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Pending_Events>
 23c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <Pending_Events+0x1>
 240:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <Pending_Events+0x2>
 244:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <Pending_Events+0x3>
}
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <Run_Events>:
    // Run no-end main loop
    while (1)
    {
        // Loop through all events
        #if (1 <= NUM_EVENTS)
        process_event_if_pending(EVENT_01);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (2 <= NUM_EVENTS)
        process_event_if_pending(EVENT_02);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (3 <= NUM_EVENTS)
        process_event_if_pending(EVENT_03);
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (4 <= NUM_EVENTS)
        process_event_if_pending(EVENT_04);
 272:	68 e0       	ldi	r22, 0x08	; 8
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (5 <= NUM_EVENTS)
        process_event_if_pending(EVENT_05);
 27e:	60 e1       	ldi	r22, 0x10	; 16
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (6 <= NUM_EVENTS)
        process_event_if_pending(EVENT_06);
 28a:	60 e2       	ldi	r22, 0x20	; 32
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (7 <= NUM_EVENTS)
        process_event_if_pending(EVENT_07);
 296:	60 e4       	ldi	r22, 0x40	; 64
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (8 <= NUM_EVENTS)
        process_event_if_pending(EVENT_08);
 2a2:	60 e8       	ldi	r22, 0x80	; 128
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (9 <= NUM_EVENTS)
        process_event_if_pending(EVENT_09);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (10 <= NUM_EVENTS)
        process_event_if_pending(EVENT_10);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	72 e0       	ldi	r23, 0x02	; 2
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        #endif
        #if (11 <= NUM_EVENTS)
        process_event_if_pending(EVENT_11);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	74 e0       	ldi	r23, 0x04	; 4
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <process_event_if_pending>
        process_event_if_pending(EVENT_31);
        #endif
        #if (32 <= NUM_EVENTS)
        process_event_if_pending(EVENT_32);
        #endif
    }
 2d2:	bd cf       	rjmp	.-134    	; 0x24e <Run_Events>

000002d4 <Initialize_Framework>:
****************************************************************************/
void Initialize_Framework(void)
{
    // Call all initializers
    #ifdef INITIALIZER_00
    INITIALIZER_00();
 2d4:	0e 94 83 06 	call	0xd06	; 0xd06 <Init_Timer_Module>
    #endif
    #ifdef INITIALIZER_01
    INITIALIZER_01();
 2d8:	0e 94 83 02 	call	0x506	; 0x506 <Init_LIN_XCVR_WD_Kicker>
    #endif
    #ifdef INITIALIZER_02
    INITIALIZER_02();
 2dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Init_PWM_Module>
    #endif
    #ifdef INITIALIZER_03
    INITIALIZER_03();
 2e0:	0e 94 8c 01 	call	0x318	; 0x318 <Init_IOC_Module>
    #endif
    #ifdef INITIALIZER_04
    INITIALIZER_04();
 2e4:	0e 94 47 00 	call	0x8e	; 0x8e <Init_ADC_Module>
    #endif
    #ifdef INITIALIZER_05
    INITIALIZER_05();
 2e8:	0e 94 84 00 	call	0x108	; 0x108 <Init_Analog_Servo_Driver>
    #endif
    #ifdef INITIALIZER_06
    INITIALIZER_06();
 2ec:	0e 94 32 06 	call	0xc64	; 0xc64 <Init_SPI_Service>
    #endif
    #ifdef INITIALIZER_07
    INITIALIZER_07();
 2f0:	0e 94 ba 02 	call	0x574	; 0x574 <Init_Master_Service>
 2f4:	08 95       	ret

000002f6 <Run_Services>:
        Calls the services which process events, 
            can service up to 99 functions

****************************************************************************/
void Run_Services(uint32_t event)
{
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
    // Call all services
    #ifdef SERVICE_00
    SERVICE_00(event);
 302:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Run_Master_Service>
    #endif
    #ifdef SERVICE_01
    SERVICE_01(event);
 306:	c7 01       	movw	r24, r14
 308:	b6 01       	movw	r22, r12
 30a:	0e 94 35 06 	call	0xc6a	; 0xc6a <Run_SPI_Service>
    SERVICE_14(event);
    #endif
    #ifdef SERVICE_15
    SERVICE_15(event);
    #endif
}
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

00000318 <Init_IOC_Module>:
    // The I/O Clock has no reason to be halted currently, but if it is
    // i.e. when it is coming out of sleep mode, I/O clock requires to be
    // enabled.
         
    // Setting up PB6 as an input pin
    DDRB &= ~(1<<INT0_PIN);
 318:	26 98       	cbi	0x04, 6	; 4
         
    // Set External Interrupt Control Register A to detect toggles.
    EICRA &= ~(1<<ISC01);
 31a:	e9 e6       	ldi	r30, 0x69	; 105
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8d 7f       	andi	r24, 0xFD	; 253
 322:	80 83       	st	Z, r24
    EICRA |= (1<<ISC00);
 324:	80 81       	ld	r24, Z
 326:	81 60       	ori	r24, 0x01	; 1
 328:	80 83       	st	Z, r24
         
    // When the INT0 bit is set (one) and the I-bit in the Status Register (SREG) 
    // is set (one), the external pin interrupt is enabled.
    EIMSK |= (1<<INT0);
 32a:	e8 9a       	sbi	0x1d, 0	; 29
         
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
 32c:	e0 9a       	sbi	0x1c, 0	; 28
 32e:	08 95       	ret

00000330 <__vector_1>:
    Description
        Handles IOC specific interrupts

****************************************************************************/
ISR(INT0_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
    // Clear External Interrupt Flag
    EIFR |= (1<<INTF0);
 33a:	e0 9a       	sbi	0x1c, 0	; 28
}
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <lin_init>:
 346:	08 98       	cbi	0x01, 0	; 1
 348:	09 98       	cbi	0x01, 1	; 1
 34a:	10 9a       	sbi	0x02, 0	; 2
 34c:	11 9a       	sbi	0x02, 1	; 2
 34e:	90 e8       	ldi	r25, 0x80	; 128
 350:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 354:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 358:	ed ec       	ldi	r30, 0xCD	; 205
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	10 82       	st	Z, r1
 35e:	ae ec       	ldi	r26, 0xCE	; 206
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	1c 92       	st	X, r1
 364:	25 2f       	mov	r18, r21
 366:	33 27       	eor	r19, r19
 368:	2c 93       	st	X, r18
 36a:	40 83       	st	Z, r20
 36c:	80 34       	cpi	r24, 0x40	; 64
 36e:	21 f4       	brne	.+8      	; 0x378 <lin_init+0x32>
 370:	88 e4       	ldi	r24, 0x48	; 72
 372:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 376:	05 c0       	rjmp	.+10     	; 0x382 <lin_init+0x3c>
 378:	81 11       	cpse	r24, r1
 37a:	0d c0       	rjmp	.+26     	; 0x396 <lin_init+0x50>
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 382:	8f e0       	ldi	r24, 0x0F	; 15
 384:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 388:	ec ec       	ldi	r30, 0xCC	; 204
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 83       	st	Z, r24
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret

0000039a <lin_tx_header>:
 39a:	e8 ec       	ldi	r30, 0xC8	; 200
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	90 81       	ld	r25, Z
 3a0:	9c 7f       	andi	r25, 0xFC	; 252
 3a2:	90 83       	st	Z, r25
 3a4:	80 34       	cpi	r24, 0x40	; 64
 3a6:	c1 f4       	brne	.+48     	; 0x3d8 <lin_tx_header+0x3e>
 3a8:	e0 ed       	ldi	r30, 0xD0	; 208
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 7f       	andi	r24, 0xF0	; 240
 3b0:	80 83       	st	Z, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	6f 70       	andi	r22, 0x0F	; 15
 3b6:	68 2b       	or	r22, r24
 3b8:	60 83       	st	Z, r22
 3ba:	80 81       	ld	r24, Z
 3bc:	8f 7c       	andi	r24, 0xCF	; 207
 3be:	80 83       	st	Z, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	4c 5f       	subi	r20, 0xFC	; 252
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	40 73       	andi	r20, 0x30	; 48
 3d2:	48 2b       	or	r20, r24
 3d4:	40 83       	st	Z, r20
 3d6:	0b c0       	rjmp	.+22     	; 0x3ee <lin_tx_header+0x54>
 3d8:	81 11       	cpse	r24, r1
 3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3dc:	e0 ed       	ldi	r30, 0xD0	; 208
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 7c       	andi	r24, 0xC0	; 192
 3e4:	80 83       	st	Z, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	6f 73       	andi	r22, 0x3F	; 63
 3ea:	68 2b       	or	r22, r24
 3ec:	60 83       	st	Z, r22
 3ee:	e8 ec       	ldi	r30, 0xC8	; 200
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8c 7f       	andi	r24, 0xFC	; 252
 3f6:	80 83       	st	Z, r24
 3f8:	80 81       	ld	r24, Z
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	80 83       	st	Z, r24
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret

00000406 <lin_rx_response>:
 406:	80 34       	cpi	r24, 0x40	; 64
 408:	31 f4       	brne	.+12     	; 0x416 <lin_rx_response+0x10>
 40a:	e8 ec       	ldi	r30, 0xC8	; 200
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	80 64       	ori	r24, 0x40	; 64
 412:	80 83       	st	Z, r24
 414:	09 c0       	rjmp	.+18     	; 0x428 <lin_rx_response+0x22>
 416:	81 11       	cpse	r24, r1
 418:	11 c0       	rjmp	.+34     	; 0x43c <lin_rx_response+0x36>
 41a:	e8 ec       	ldi	r30, 0xC8	; 200
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	80 83       	st	Z, r24
 422:	6f 70       	andi	r22, 0x0F	; 15
 424:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
 428:	e8 ec       	ldi	r30, 0xC8	; 200
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	8c 7f       	andi	r24, 0xFC	; 252
 430:	80 83       	st	Z, r24
 432:	80 81       	ld	r24, Z
 434:	82 60       	ori	r24, 0x02	; 2
 436:	80 83       	st	Z, r24
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret

00000440 <lin_tx_response>:
 440:	80 34       	cpi	r24, 0x40	; 64
 442:	31 f4       	brne	.+12     	; 0x450 <lin_tx_response+0x10>
 444:	e8 ec       	ldi	r30, 0xC8	; 200
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 64       	ori	r24, 0x40	; 64
 44c:	80 83       	st	Z, r24
 44e:	0b c0       	rjmp	.+22     	; 0x466 <lin_tx_response+0x26>
 450:	81 11       	cpse	r24, r1
 452:	25 c0       	rjmp	.+74     	; 0x49e <lin_tx_response+0x5e>
 454:	e8 ec       	ldi	r30, 0xC8	; 200
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	80 83       	st	Z, r24
 45c:	84 2f       	mov	r24, r20
 45e:	82 95       	swap	r24
 460:	80 7f       	andi	r24, 0xF0	; 240
 462:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
 466:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
 46a:	44 23       	and	r20, r20
 46c:	71 f0       	breq	.+28     	; 0x48a <lin_tx_response+0x4a>
 46e:	fb 01       	movw	r30, r22
 470:	41 50       	subi	r20, 0x01	; 1
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	64 0f       	add	r22, r20
 47a:	75 1f       	adc	r23, r21
 47c:	a2 ed       	ldi	r26, 0xD2	; 210
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	81 91       	ld	r24, Z+
 482:	8c 93       	st	X, r24
 484:	e6 17       	cp	r30, r22
 486:	f7 07       	cpc	r31, r23
 488:	d9 f7       	brne	.-10     	; 0x480 <lin_tx_response+0x40>
 48a:	e8 ec       	ldi	r30, 0xC8	; 200
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	8c 7f       	andi	r24, 0xFC	; 252
 492:	80 83       	st	Z, r24
 494:	80 81       	ld	r24, Z
 496:	83 60       	ori	r24, 0x03	; 3
 498:	80 83       	st	Z, r24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <lin_get_response>:
 4a2:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <__EEPROM_REGION_LENGTH__+0x7f00cf>
 4a6:	2f 70       	andi	r18, 0x0F	; 15
 4a8:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <__EEPROM_REGION_LENGTH__+0x7f00d1>
 4ac:	22 23       	and	r18, r18
 4ae:	71 f0       	breq	.+28     	; 0x4cc <lin_get_response+0x2a>
 4b0:	fc 01       	movw	r30, r24
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	82 0f       	add	r24, r18
 4bc:	93 1f       	adc	r25, r19
 4be:	a2 ed       	ldi	r26, 0xD2	; 210
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	2c 91       	ld	r18, X
 4c4:	21 93       	st	Z+, r18
 4c6:	e8 17       	cp	r30, r24
 4c8:	f9 07       	cpc	r31, r25
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <lin_get_response+0x20>
 4cc:	08 95       	ret

000004ce <kick_LIN_XCVR_WD>:

****************************************************************************/
static void kick_LIN_XCVR_WD(uint32_t unused)
{
    // Flip Parity
    Parity ^= 1;
 4ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Parity>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	89 27       	eor	r24, r25
 4d6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Parity>

    // Kick xcvr watchdog
    if (0 == Parity)
 4da:	81 11       	cpse	r24, r1
 4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <kick_LIN_XCVR_WD+0x24>
    {
        // PA3 lo
        PORTA &= ~(1<<PINA3);
 4de:	13 98       	cbi	0x02, 3	; 2
        // Restart timer for kick pulse length
        Start_Timer(&LIN_XCVR_Kick_Timer, KICK_LENGTH_MS);
 4e0:	42 e0       	ldi	r20, 0x02	; 2
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	84 e1       	ldi	r24, 0x14	; 20
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
 4f0:	08 95       	ret
    }
    else
    {
        // PA3 hi
        PORTA |= (1<<PINA3);
 4f2:	13 9a       	sbi	0x02, 3	; 2
        // Restart timer for kick frequency
        Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 4f4:	43 e2       	ldi	r20, 0x23	; 35
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	84 e1       	ldi	r24, 0x14	; 20
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
 504:	08 95       	ret

00000506 <Init_LIN_XCVR_WD_Kicker>:

****************************************************************************/
void Init_LIN_XCVR_WD_Kicker(void)
{
    // Set up PINA3 to kick WD
    PORTA |= (1<<PINA3);
 506:	13 9a       	sbi	0x02, 3	; 2
    DDRA |= (1<<PINA3);
 508:	0b 9a       	sbi	0x01, 3	; 1

    // Register timer
    Register_Timer(&LIN_XCVR_Kick_Timer, kick_LIN_XCVR_WD);
 50a:	67 e6       	ldi	r22, 0x67	; 103
 50c:	72 e0       	ldi	r23, 0x02	; 2
 50e:	84 e1       	ldi	r24, 0x14	; 20
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 a9 06 	call	0xd52	; 0xd52 <Register_Timer>

    // Start timer
    Start_Timer(&LIN_XCVR_Kick_Timer, LIN_XCVR_WD_KICK_INTERVAL_MS);
 516:	43 e2       	ldi	r20, 0x23	; 35
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	84 e1       	ldi	r24, 0x14	; 20
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
 526:	08 95       	ret

00000528 <main>:
{
    // *******************************
    // MICROCONTROLLER INITIALIZATIONS
    // *******************************
    // Disable global interrupts
    asm("cli");
 528:	f8 94       	cli
    // >>> The internal 8 MHz clock is already chosen.

    // CLKDIV8 comes initially programmed which will divide the 8MHz clock by 8.
    // We need to write to the CLKPR to make the chip run at 8 MHz instead of 1 MHz:
    // (p. 38)
    CLKPR = 1 << CLKPCE;
 52a:	e1 e6       	ldi	r30, 0x61	; 97
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 e8       	ldi	r24, 0x80	; 128
 530:	80 83       	st	Z, r24
    CLKPR = 0;
 532:	10 82       	st	Z, r1
    //      make sure no port pins drive resistive loads
    
    // *******************************
    // CALL INITIALIZERS
    // *******************************
    Initialize_Framework();
 534:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Initialize_Framework>
    
    // *******************************
    // ENABLE GLOBAL INTERRUPTS
    // *******************************
    asm("sei");
 538:	78 94       	sei

    // *******************************
    // RUN EVENTS SERVICE
    // *******************************
    // Run the events service
    Run_Events();
 53a:	0e 94 27 01 	call	0x24e	; 0x24e <Run_Events>

    // *******************************
    // C NECESSARY RETURN
    // *******************************
    return 0;
}
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	08 95       	ret

00000544 <ID_schedule_handler>:

****************************************************************************/
static void ID_schedule_handler(uint32_t unused)
{
    // Transmit next header in schedule
    Master_LIN_Broadcast_ID(Curr_Schedule_ID);
 544:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Curr_Schedule_ID>
 548:	0e 94 4d 03 	call	0x69a	; 0x69a <Master_LIN_Broadcast_ID>

****************************************************************************/
static void update_curr_schedule_id(void)
{
    // If we hit boundary condition, reset counter; otherwise increment
    if (SCHEDULE_END_ID == Curr_Schedule_ID)
 54c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Curr_Schedule_ID>
 550:	85 30       	cpi	r24, 0x05	; 5
 552:	21 f4       	brne	.+8      	; 0x55c <ID_schedule_handler+0x18>
    {
        Curr_Schedule_ID = SCHEDULE_START_ID;
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Curr_Schedule_ID>
 55a:	03 c0       	rjmp	.+6      	; 0x562 <ID_schedule_handler+0x1e>
    }
    else
    {
        Curr_Schedule_ID++;
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Curr_Schedule_ID>
    // Transmit next header in schedule
    Master_LIN_Broadcast_ID(Curr_Schedule_ID);
    // Update schedule id
    update_curr_schedule_id();
    // Restart timer
    Start_Timer(&Scheduling_Timer, SCHEDULE_INTERVAL_MS);
 562:	45 e0       	ldi	r20, 0x05	; 5
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	8b e1       	ldi	r24, 0x1B	; 27
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
 572:	08 95       	ret

00000574 <Init_Master_Service>:
    Description
        Initializes the master node

****************************************************************************/
void Init_Master_Service(void)
{
 574:	cf 93       	push	r28
    // Set LIN ID, no need for ADC, we are the master node
    My_Node_ID = MASTER_NODE_ID;
 576:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <My_Node_ID>
 57a:	c1 e0       	ldi	r28, 0x01	; 1
{
    // Loop through all slaves
    for (int slave_num = LOWEST_SLAVE_NUMBER; slave_num <= NUM_SLAVES; slave_num++)
    {
        // Write non-commands
        Write_Intensity_Data(Get_Pointer_To_Slave_Data(p_My_Command_Data, slave_num), INTENSITY_NON_COMMAND);
 57c:	6c 2f       	mov	r22, r28
 57e:	85 e2       	ldi	r24, 0x25	; 37
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 cd 00 	call	0x19a	; 0x19a <Get_Pointer_To_Slave_Data>
 586:	6f ef       	ldi	r22, 0xFF	; 255
 588:	0e 94 c6 00 	call	0x18c	; 0x18c <Write_Intensity_Data>
        Write_Position_Data(Get_Pointer_To_Slave_Data(p_My_Command_Data, slave_num), POSITION_NON_COMMAND);
 58c:	6c 2f       	mov	r22, r28
 58e:	85 e2       	ldi	r24, 0x25	; 37
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 cd 00 	call	0x19a	; 0x19a <Get_Pointer_To_Slave_Data>
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	0e 94 c9 00 	call	0x192	; 0x192 <Write_Position_Data>
 59e:	cf 5f       	subi	r28, 0xFF	; 255

****************************************************************************/
static void clear_cmds(void)
{
    // Loop through all slaves
    for (int slave_num = LOWEST_SLAVE_NUMBER; slave_num <= NUM_SLAVES; slave_num++)
 5a0:	c3 30       	cpi	r28, 0x03	; 3
 5a2:	61 f7       	brne	.-40     	; 0x57c <Init_Master_Service+0x8>

    // Initialize the data arrays to proper things
    clear_cmds();

    // Initialize LIN
    MS_LIN_Initialize(&My_Node_ID, p_My_Command_Data, p_My_Status_Data);
 5a4:	4f e1       	ldi	r20, 0x1F	; 31
 5a6:	51 e0       	ldi	r21, 0x01	; 1
 5a8:	65 e2       	ldi	r22, 0x25	; 37
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	8b e2       	ldi	r24, 0x2B	; 43
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0e 94 28 03 	call	0x650	; 0x650 <MS_LIN_Initialize>
	
	// Initialize SPI
	MS_SPI_Initialize(&My_Node_ID);
 5b4:	8b e2       	ldi	r24, 0x2B	; 43
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 a5 04 	call	0x94a	; 0x94a <MS_SPI_Initialize>

    // Register scheduling timer with ID_schedule_handler as 
    //      callback function
    Register_Timer(&Scheduling_Timer, ID_schedule_handler);
 5bc:	62 ea       	ldi	r22, 0xA2	; 162
 5be:	72 e0       	ldi	r23, 0x02	; 2
 5c0:	8b e1       	ldi	r24, 0x1B	; 27
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	0e 94 a9 06 	call	0xd52	; 0xd52 <Register_Timer>

    // Kick off scheduling timer
    Start_Timer(&Scheduling_Timer, SCHEDULE_INTERVAL_MS);
 5c8:	45 e0       	ldi	r20, 0x05	; 5
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	8b e1       	ldi	r24, 0x1B	; 27
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>

    // Register test timer & start
    Register_Timer(&Testing_Timer, Post_Event);
 5d8:	6c e0       	ldi	r22, 0x0C	; 12
 5da:	71 e0       	ldi	r23, 0x01	; 1
 5dc:	85 e0       	ldi	r24, 0x05	; 5
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 a9 06 	call	0xd52	; 0xd52 <Register_Timer>
    Start_Timer(&Testing_Timer, 5000);
 5e4:	48 e8       	ldi	r20, 0x88	; 136
 5e6:	53 e1       	ldi	r21, 0x13	; 19
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	85 e0       	ldi	r24, 0x05	; 5
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
    PORTB &= ~(1<<PINB6);
 5f4:	2e 98       	cbi	0x05, 6	; 5
    DDRB |= (1<<PINB6);
 5f6:	26 9a       	sbi	0x04, 6	; 4
    //Set_PWM_Duty_Cycle(pwm_channel_a, 10);
}
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <Run_Master_Service>:
        Processes events for the master node

****************************************************************************/
void Run_Master_Service(uint32_t event_mask)
{
    switch(event_mask)
 5fc:	60 34       	cpi	r22, 0x40	; 64
 5fe:	71 05       	cpc	r23, r1
 600:	81 05       	cpc	r24, r1
 602:	91 05       	cpc	r25, r1
 604:	21 f5       	brne	.+72     	; 0x64e <Run_Master_Service+0x52>
            // Do nothing.
            break;

        case EVT_TEST_TIMEOUT:
            // Just a test
			RecvList[0] = &Recv1;
 606:	e0 e3       	ldi	r30, 0x30	; 48
 608:	f2 e0       	ldi	r31, 0x02	; 2
 60a:	89 e1       	ldi	r24, 0x19	; 25
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
			RecvList[1] = &Recv2;
 612:	88 e1       	ldi	r24, 0x18	; 24
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	93 83       	std	Z+3, r25	; 0x03
 618:	82 83       	std	Z+2, r24	; 0x02
			// SPI Test
			//
			Write_SPI(3, 2, SPI_TX, &RecvList[0]);			
 61a:	9f 01       	movw	r18, r30
 61c:	42 e0       	ldi	r20, 0x02	; 2
 61e:	51 e0       	ldi	r21, 0x01	; 1
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	0e 94 08 05 	call	0xa10	; 0xa10 <Write_SPI>
            //{
                //position_counter--;
            //}

            #if 1
             parity ^= 1;
 628:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <parity>
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	89 27       	eor	r24, r25
 630:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <parity>
             if (parity)
 634:	88 23       	and	r24, r24
 636:	11 f0       	breq	.+4      	; 0x63c <Run_Master_Service+0x40>
             {
                 PORTB |= (1<<PINB6);
 638:	2e 9a       	sbi	0x05, 6	; 5
 63a:	01 c0       	rjmp	.+2      	; 0x63e <Run_Master_Service+0x42>
             }
             else
             {
                 PORTB &= ~(1<<PINB6);
 63c:	2e 98       	cbi	0x05, 6	; 5
             }
            Start_Timer(&Testing_Timer, 5);
 63e:	45 e0       	ldi	r20, 0x05	; 5
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 f6 06 	call	0xdec	; 0xdec <Start_Timer>
 64e:	08 95       	ret

00000650 <MS_LIN_Initialize>:
        Initializes the LIN bus for the nodes based on ATtiny167

****************************************************************************/
void MS_LIN_Initialize(uint8_t * p_this_node_id, uint8_t * p_command_data, \
    uint8_t * p_status_data)
{
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	7c 01       	movw	r14, r24
 65e:	8b 01       	movw	r16, r22
 660:	ea 01       	movw	r28, r20
    // 0. Enable the LIN transceiver via PA4 which is connected on ENABLE
    PORTA |= (1<<PINA4);
 662:	14 9a       	sbi	0x02, 4	; 2
    DDRA |= (1<<PINA4);
 664:	0c 9a       	sbi	0x01, 4	; 1

    // 1. Call the LIN init function from the driver layer
    // * Arguments are found in lin_drv.h, config.h
    lin_init((OUR_LIN_SPEC), (CONF_LINBRR));
 666:	4c e0       	ldi	r20, 0x0C	; 12
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 a3 01 	call	0x346	; 0x346 <lin_init>

    // 2. Save the pointer to this node's ID
    p_My_Node_ID = p_this_node_id;
 674:	f0 92 32 01 	sts	0x0132, r15	; 0x800132 <p_My_Node_ID+0x1>
 678:	e0 92 31 01 	sts	0x0131, r14	; 0x800131 <p_My_Node_ID>

    // 3. Save the pointers to the data stores
    p_My_Command_Data = p_command_data;
 67c:	10 93 30 01 	sts	0x0130, r17	; 0x800130 <p_My_Command_Data+0x1>
 680:	00 93 2f 01 	sts	0x012F, r16	; 0x80012f <p_My_Command_Data>
    p_My_Status_Data = p_status_data;
 684:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <p_My_Status_Data+0x1>
 688:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <p_My_Status_Data>
}
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	08 95       	ret

0000069a <Master_LIN_Broadcast_ID>:

****************************************************************************/
void Master_LIN_Broadcast_ID(uint8_t slave_id)
{
    // Broadcast the LIN header
    lin_tx_header((OUR_LIN_SPEC), slave_id, 0);
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	68 2f       	mov	r22, r24
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 cd 01 	call	0x39a	; 0x39a <lin_tx_header>
 6a4:	08 95       	ret

000006a6 <__vector_12>:
    Description
        Handles LIN specific interrupts

****************************************************************************/
ISR(LIN_TC_vect)
{
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	2f 93       	push	r18
 6b2:	3f 93       	push	r19
 6b4:	4f 93       	push	r20
 6b6:	5f 93       	push	r21
 6b8:	6f 93       	push	r22
 6ba:	7f 93       	push	r23
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
 6c0:	af 93       	push	r26
 6c2:	bf 93       	push	r27
 6c4:	ef 93       	push	r30
 6c6:	ff 93       	push	r31
    // Get interrupt cause
    switch (Lin_get_it())
 6c8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 6cc:	8f 70       	andi	r24, 0x0F	; 15
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <__vector_12+0x2e>
 6d2:	68 c0       	rjmp	.+208    	; 0x7a4 <__vector_12+0xfe>
 6d4:	84 30       	cpi	r24, 0x04	; 4
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__vector_12+0x3a>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	09 f0       	breq	.+2      	; 0x6de <__vector_12+0x38>
 6dc:	66 c0       	rjmp	.+204    	; 0x7aa <__vector_12+0x104>
 6de:	36 c0       	rjmp	.+108    	; 0x74c <__vector_12+0xa6>

****************************************************************************/
static void lin_id_task(void)
{
    // Create copy of ID, make sure this gives only the lower 6 bits
    uint8_t temp_id = Lin_get_id();
 6e0:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
 6e4:	69 2f       	mov	r22, r25
 6e6:	6f 73       	andi	r22, 0x3F	; 63

    // This ID matches my ID. It must be a command sent from the master.
    if (temp_id == *p_My_Node_ID)
 6e8:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <p_My_Node_ID>
 6ec:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <p_My_Node_ID+0x1>
 6f0:	80 81       	ld	r24, Z
 6f2:	68 13       	cpse	r22, r24
 6f4:	05 c0       	rjmp	.+10     	; 0x700 <__vector_12+0x5a>
    {
        // Prepare LIN module for receive.
        lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
 6f6:	63 e0       	ldi	r22, 0x03	; 3
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	0e 94 03 02 	call	0x406	; 0x406 <lin_rx_response>
 6fe:	22 c0       	rjmp	.+68     	; 0x744 <__vector_12+0x9e>
    }

    // This ID matches my ID. It must be a status request from the master.
    else if (temp_id == ((*p_My_Node_ID)|REQUEST_MASK))
 700:	28 2f       	mov	r18, r24
 702:	21 60       	ori	r18, 0x01	; 1
 704:	62 13       	cpse	r22, r18
 706:	09 c0       	rjmp	.+18     	; 0x71a <__vector_12+0x74>
    {
        // Prepare LIN module for transmit.
        // We must be a slave so My_Command_Data is LIN_PACKET_LEN bytes long only.
        lin_tx_response((OUR_LIN_SPEC), p_My_Status_Data, (LIN_PACKET_LEN));
 708:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <p_My_Status_Data>
 70c:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <p_My_Status_Data+0x1>
 710:	43 e0       	ldi	r20, 0x03	; 3
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 20 02 	call	0x440	; 0x440 <lin_tx_response>
 718:	15 c0       	rjmp	.+42     	; 0x744 <__vector_12+0x9e>

    // This ID doesn't match my ID.
    else
    {
        // If we're the master, we must have sent this ID
        if (MASTER_NODE_ID == *p_My_Node_ID)
 71a:	81 11       	cpse	r24, r1
 71c:	13 c0       	rjmp	.+38     	; 0x744 <__vector_12+0x9e>
        {
            // Prepare LIN module for transmit if we sent a command.
            if (0 == (temp_id & REQUEST_MASK))
 71e:	90 fd       	sbrc	r25, 0
 720:	0d c0       	rjmp	.+26     	; 0x73c <__vector_12+0x96>
            {
                // Make sure we send the right command based on the slave ID.
                // The master has a My_Command_Data array that is LIN_PACKET_LEN*n bytes long.
                // Where n is the number of slaves in the system.
                lin_tx_response((OUR_LIN_SPEC), Get_Pointer_To_Slave_Data(p_My_Command_Data, GET_SLAVE_NUMBER(temp_id)), (LIN_PACKET_LEN));
 722:	66 95       	lsr	r22
 724:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <p_My_Command_Data>
 728:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <p_My_Command_Data+0x1>
 72c:	0e 94 cd 00 	call	0x19a	; 0x19a <Get_Pointer_To_Slave_Data>
 730:	43 e0       	ldi	r20, 0x03	; 3
 732:	bc 01       	movw	r22, r24
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	0e 94 20 02 	call	0x440	; 0x440 <lin_tx_response>
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__vector_12+0x9e>
            }
            // Prepare LIN module for receive if we sent a request.
            else
            {
                lin_rx_response((OUR_LIN_SPEC), (LIN_PACKET_LEN));
 73c:	63 e0       	ldi	r22, 0x03	; 3
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0e 94 03 02 	call	0x406	; 0x406 <lin_rx_response>
    switch (Lin_get_it())
    {
        // We received an ID
        case LIN_IDOK:
            lin_id_task();
            Lin_clear_idok_it();
 744:	84 e0       	ldi	r24, 0x04	; 4
 746:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
 74a:	2f c0       	rjmp	.+94     	; 0x7aa <__vector_12+0x104>
****************************************************************************/
static void lin_rx_task(void)
{
    // Copy the rx data to our appropriate data store
    // If we're the master, copy to our status array and post event
    if (MASTER_NODE_ID == *p_My_Node_ID)
 74c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <p_My_Node_ID>
 750:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <p_My_Node_ID+0x1>
 754:	80 81       	ld	r24, Z
 756:	81 11       	cpse	r24, r1
 758:	15 c0       	rjmp	.+42     	; 0x784 <__vector_12+0xde>
    {
        // TODO: Not entirely sure if the ID is saved during the receive...
        lin_get_response(Get_Pointer_To_Slave_Data(p_My_Status_Data, GET_SLAVE_NUMBER(Lin_get_id())));
 75a:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <__EEPROM_REGION_LENGTH__+0x7f00d0>
 75e:	6f 73       	andi	r22, 0x3F	; 63
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	75 95       	asr	r23
 764:	67 95       	ror	r22
 766:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <p_My_Status_Data>
 76a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <p_My_Status_Data+0x1>
 76e:	0e 94 cd 00 	call	0x19a	; 0x19a <Get_Pointer_To_Slave_Data>
 772:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lin_get_response>

        // Post event
        Post_Event(EVT_MASTER_NEW_STS);
 776:	60 e1       	ldi	r22, 0x10	; 16
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
 782:	0c c0       	rjmp	.+24     	; 0x79c <__vector_12+0xf6>
    }
    // If we're a slave, copy to our command array and post event
    else
    {
        // Copy command
        lin_get_response(p_My_Command_Data);
 784:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <p_My_Command_Data>
 788:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <p_My_Command_Data+0x1>
 78c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lin_get_response>

        // Post event
        Post_Event(EVT_SLAVE_NEW_CMD);
 790:	62 e0       	ldi	r22, 0x02	; 2
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
            break;

        // We received a data packet
        case LIN_RXOK:
            lin_rx_task();
            Lin_clear_rxok_it();
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
            break;
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <__vector_12+0x104>

        // We transmitted a data packet
        case LIN_TXOK:
            lin_tx_task();
            Lin_clear_txok_it();
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>

        // The interrupt did not correspond to LIN
        default:
            break;
    } // End Switch
}
 7aa:	ff 91       	pop	r31
 7ac:	ef 91       	pop	r30
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <__vector_13>:

ISR(LIN_ERR_vect)
{
 7cc:	1f 92       	push	r1
 7ce:	0f 92       	push	r0
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	0f 92       	push	r0
 7d4:	11 24       	eor	r1, r1
 7d6:	8f 93       	push	r24
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
 7d8:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__EEPROM_REGION_LENGTH__+0x7f00cb>

****************************************************************************/
static void lin_err_task(void)
{
    // Increment error count
    My_LIN_Error_Count++;
 7dc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <My_LIN_Error_Count>
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <My_LIN_Error_Count>
ISR(LIN_ERR_vect)
{
    // Get Error Status, do task, and clear int
    Lin_get_error_status();
    lin_err_task();
    Lin_clear_err_it();
 7e6:	88 e0       	ldi	r24, 0x08	; 8
 7e8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 7ec:	8f 91       	pop	r24
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <Init_PWM_Module>:
{
    // We need to ensure no interrupts occur when accessing 16-bit registers
    // (Just for safety, no ISR should be able to access these registers anyways.)
    // Even though the C code is one line for accessing 16-bit registers,
    //      in ASM it will be done in two cycles.
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 7f8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7fa:	f8 94       	cli
    {
        // Clear Control Register C
        // "However, for ensuring compatibility with future devices,
        //      these bits must be set to zero when TCCR1A is written 
        //      when operating in a PWM mode."
        TCCR1C = 0;
 7fc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>

        // Disable Timer1 interrupts
        TIMSK1 = 0;
 800:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>

        // Set up pins for PWM output (p. 85)
        TCCR1D = ((1<<PWM_CH_A_PIN_ENABLE)|(1<<PWM_CH_B_PIN_ENABLE));
 804:	84 e2       	ldi	r24, 0x24	; 36
 806:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <__EEPROM_REGION_LENGTH__+0x7f0083>
        DDRB |= ((1<<PWM_CH_A_PIN)|(1<<PWM_CH_B_PIN));
 80a:	84 b1       	in	r24, 0x04	; 4
 80c:	88 61       	ori	r24, 0x18	; 24
 80e:	84 b9       	out	0x04, r24	; 4

        // Set TOP values for A/B counters, executes in 1 asm lines
        ICR1 = TIMER_1_TOP;
 810:	87 e8       	ldi	r24, 0x87	; 135
 812:	93 e1       	ldi	r25, 0x13	; 19
 814:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
 818:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>

        // Set output compare to value that sets lines low (0% duty cycle)
        OCR1A = OCR_DC_ZERO;
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 824:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
        OCR1B = OCR_DC_ZERO;
 828:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 82c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
        // Set (COM1A/B[0:1]) for output pin high on match, low on TOP
        //      (Per Table 12-2 on p. 132)
        // Set WGM1[0:3]=1110b to define TOP in ICR1A register.
        //      Define TOP in ICR1 register, instead of OCR1A (explanation on p. 125)
        //      (Run at a fixed frequency with varying duty cycles)
        TCCR1A = ((1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0) \
 830:	82 ef       	ldi	r24, 0xF2	; 242
 832:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
                    |(1<<WGM11)|(0<<WGM10));

        // Set WGM1[0:3]=1110b
        TCCR1B = ((1<<WGM13)|(1<<WGM12));
 836:	e1 e8       	ldi	r30, 0x81	; 129
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	88 e1       	ldi	r24, 0x18	; 24
 83c:	80 83       	st	Z, r24

        // Start the clock by selecting a prescaler of f_clk/1 (CS10 set)
        // We want to aim for a frequency of 1 kHz
        // PWM freq is:
        //      f_pwm = f_clk/(prescale*(1+TOP))
        TCCR1B |= TIMER_1_PRESCALE;
 83e:	80 81       	ld	r24, Z
 840:	82 60       	ori	r24, 0x02	; 2
 842:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 844:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 846:	08 95       	ret

00000848 <Set_PWM_Duty_Cycle>:
void Set_PWM_Duty_Cycle(pwm_channel_t this_channel, uint8_t new_duty_cycle)
{
    // Set OCR1 for the requested channel
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
 848:	88 23       	and	r24, r24
 84a:	19 f0       	breq	.+6      	; 0x852 <Set_PWM_Duty_Cycle+0xa>
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	49 f1       	breq	.+82     	; 0x8a2 <Set_PWM_Duty_Cycle+0x5a>
 850:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
 852:	64 36       	cpi	r22, 0x64	; 100
 854:	e0 f4       	brcc	.+56     	; 0x88e <Set_PWM_Duty_Cycle+0x46>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
 856:	8f ef       	ldi	r24, 0xFF	; 255
 858:	86 0f       	add	r24, r22
 85a:	83 36       	cpi	r24, 0x63	; 99
 85c:	d8 f4       	brcc	.+54     	; 0x894 <Set_PWM_Duty_Cycle+0x4c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	cb 01       	movw	r24, r22
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	68 0f       	add	r22, r24
 86c:	79 1f       	adc	r23, r25
 86e:	cb 01       	movw	r24, r22
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	68 0f       	add	r22, r24
 87a:	79 1f       	adc	r23, r25
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 27       	eor	r24, r24
 882:	99 27       	eor	r25, r25
 884:	86 1b       	sub	r24, r22
 886:	97 0b       	sbc	r25, r23
 888:	88 57       	subi	r24, 0x78	; 120
 88a:	9c 4e       	sbci	r25, 0xEC	; 236
 88c:	05 c0       	rjmp	.+10     	; 0x898 <Set_PWM_Duty_Cycle+0x50>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <Set_PWM_Duty_Cycle+0x50>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	9f ef       	ldi	r25, 0xFF	; 255
    // *Note: no need for atomic operation since OCR is double buffered

    switch(this_channel)
    {
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
 898:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 89c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
            break;
 8a0:	08 95       	ret

****************************************************************************/
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
 8a2:	64 36       	cpi	r22, 0x64	; 100
 8a4:	e0 f4       	brcc	.+56     	; 0x8de <Set_PWM_Duty_Cycle+0x96>
    {
        return OCR_DC_HUNDRED;
    }
    else if ((100 > duty_cycle) && (0 < duty_cycle))
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	86 0f       	add	r24, r22
 8aa:	83 36       	cpi	r24, 0x63	; 99
 8ac:	d8 f4       	brcc	.+54     	; 0x8e4 <Set_PWM_Duty_Cycle+0x9c>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	cb 01       	movw	r24, r22
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	68 0f       	add	r22, r24
 8bc:	79 1f       	adc	r23, r25
 8be:	cb 01       	movw	r24, r22
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	68 0f       	add	r22, r24
 8ca:	79 1f       	adc	r23, r25
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 27       	eor	r24, r24
 8d2:	99 27       	eor	r25, r25
 8d4:	86 1b       	sub	r24, r22
 8d6:	97 0b       	sbc	r25, r23
 8d8:	88 57       	subi	r24, 0x78	; 120
 8da:	9c 4e       	sbci	r25, 0xEC	; 236
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <Set_PWM_Duty_Cycle+0xa0>
static uint16_t calc_OCR_count(uint8_t duty_cycle)
{
    // Return the calculated value only if in (0,100) exclusive
    if (100 <= duty_cycle)
    {
        return OCR_DC_HUNDRED;
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <Set_PWM_Duty_Cycle+0xa0>
    {
        return ((TIMER_1_TOP+1)-((TIMER_1_TOP+1)/100)*duty_cycle);
    }
    else
    {
        return OCR_DC_ZERO;
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
        case pwm_channel_a:
            OCR1A = calc_OCR_count(new_duty_cycle);
            break;

        case pwm_channel_b:
            OCR1B = calc_OCR_count(new_duty_cycle);
 8e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 8ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
 8f0:	08 95       	ret

000008f2 <Reset_Command_Receive_Buffer>:
        Resets receive list pointers to NULL

****************************************************************************/

static void Reset_Command_Receive_Buffer(void)
{
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	ef e8       	ldi	r30, 0x8F	; 143
 8f8:	f1 e0       	ldi	r31, 0x01	; 1
 8fa:	aa e3       	ldi	r26, 0x3A	; 58
 8fc:	b1 e0       	ldi	r27, 0x01	; 1
 8fe:	2a e8       	ldi	r18, 0x8A	; 138
 900:	31 e0       	ldi	r19, 0x01	; 1
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
    {
        // Set all bytes of Command_Buffer to 0xff = UNASSIGNED
        for (int col = 0; col < MAX_COMMAND_TX_SIZE; col++)
        {
            Command_Buffer[row][col] = 0xFF;    // Set as unassigned
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	ef 01       	movw	r28, r30
 906:	25 97       	sbiw	r28, 0x05	; 5
 908:	88 83       	st	Y, r24
 90a:	21 96       	adiw	r28, 0x01	; 1
 90c:	88 83       	st	Y, r24
 90e:	21 96       	adiw	r28, 0x01	; 1
 910:	88 83       	st	Y, r24
 912:	21 96       	adiw	r28, 0x01	; 1
 914:	88 83       	st	Y, r24
 916:	21 96       	adiw	r28, 0x01	; 1
 918:	88 83       	st	Y, r24
 91a:	80 83       	st	Z, r24
        }
        // Set all pointers of Receive List to NULL 
        for (int col = 0; col < MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
 91c:	11 96       	adiw	r26, 0x01	; 1
 91e:	1c 92       	st	X, r1
 920:	1e 92       	st	-X, r1
 922:	13 96       	adiw	r26, 0x03	; 3
 924:	1c 92       	st	X, r1
 926:	1e 92       	st	-X, r1
 928:	12 97       	sbiw	r26, 0x02	; 2
 92a:	15 96       	adiw	r26, 0x05	; 5
 92c:	1c 92       	st	X, r1
 92e:	1e 92       	st	-X, r1
 930:	14 97       	sbiw	r26, 0x04	; 4
 932:	17 96       	adiw	r26, 0x07	; 7
 934:	1c 92       	st	X, r1
 936:	1e 92       	st	-X, r1
 938:	16 97       	sbiw	r26, 0x06	; 6
 93a:	36 96       	adiw	r30, 0x06	; 6
 93c:	18 96       	adiw	r26, 0x08	; 8

****************************************************************************/

static void Reset_Command_Receive_Buffer(void)
{
    for (int row = 0; row < COMMAND_BUFFER_SIZE; row++)
 93e:	a2 17       	cp	r26, r18
 940:	b3 07       	cpc	r27, r19
 942:	01 f7       	brne	.-64     	; 0x904 <Reset_Command_Receive_Buffer+0x12>
        for (int col = 0; col < MAX_COMMAND_RX_SIZE; col++)
        {
            Receive_List[row][col] = NULL;     // Set as unassigned
        }
    }
}
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <MS_SPI_Initialize>:

****************************************************************************/
void MS_SPI_Initialize(uint8_t * p_this_node_id)
{
    // Identify node type
    Master_Slave_Identifier = *p_this_node_id;
 94a:	fc 01       	movw	r30, r24
 94c:	80 81       	ld	r24, Z
 94e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Master_Slave_Identifier>
    
    if (SPI_MASTER == Master_Slave_Identifier)
 952:	81 11       	cpse	r24, r1
 954:	0f c0       	rjmp	.+30     	; 0x974 <MS_SPI_Initialize+0x2a>
    {
        // SPI Data Direction Register (DDR_SPI) = DDRA
        // Set MOSI, SS and SCK output, all others input
        DDR_SPI |= (1<<MOSI)|(1<<SCK)|(1<<SS);
 956:	81 b1       	in	r24, 0x01	; 1
 958:	80 67       	ori	r24, 0x70	; 112
 95a:	81 b9       	out	0x01, r24	; 1
		//DDR_SPI &= ~(1<<SS);

        // Enable interrupt on transmission complete, enable SPI and set as master,
        // set clock rate io_clk/4, MSB transmitted first, Sample on rising edge 
        SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR);
 95c:	80 ed       	ldi	r24, 0xD0	; 208
 95e:	8c bd       	out	0x2c, r24	; 44

        // Raise SS from master at Init
        PORTA |= (1<<SS);
 960:	16 9a       	sbi	0x02, 6	; 2

        // Reset indices
        Buffer_Index = 0;
 962:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Buffer_Index>
        TX_Index = 0;
 966:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TX_Index>
		RX_Index = 0;
 96a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX_Index>

        Reset_Command_Receive_Buffer();
 96e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Reset_Command_Receive_Buffer>
 972:	08 95       	ret
    }
    else
    {
        // SPI Data Direction Register (DDR_SPI) = DDRA
        // Set MISO output, all others input
        DDR_SPI |= (1<<MISO);
 974:	0a 9a       	sbi	0x01, 2	; 1

        // Enable interrupt on transmission complete, enable SPI and set as slave,
        // set clock rate io_clk/4, MSB transmitted first, Sample on rising edge
        // Slave requires interrupt response as we do not when transmission might
        // occur.
        SPCR = (1<<SPIE)|(1<<SPE);
 976:	80 ec       	ldi	r24, 0xC0	; 192
 978:	8c bd       	out	0x2c, r24	; 44

        // Reset indices
        Buffer_Index = 0;
 97a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Buffer_Index>
        TX_Index = 0;
 97e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TX_Index>
        RX_Index = 0;
 982:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX_Index>

        Reset_Command_Receive_Buffer();
 986:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Reset_Command_Receive_Buffer>
 98a:	08 95       	ret

0000098c <SPI_Start_Command>:

****************************************************************************/

void SPI_Start_Command (void)
{
	Expected_TX_Length = Command_Buffer[Buffer_Index][TX_LENGTH_BYTE];
 98c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Buffer_Index>
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	fc 01       	movw	r30, r24
 994:	ee 0f       	add	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	df 01       	movw	r26, r30
 99a:	a8 0f       	add	r26, r24
 99c:	b9 1f       	adc	r27, r25
 99e:	aa 0f       	add	r26, r26
 9a0:	bb 1f       	adc	r27, r27
 9a2:	a6 57       	subi	r26, 0x76	; 118
 9a4:	be 4f       	sbci	r27, 0xFE	; 254
 9a6:	2c 91       	ld	r18, X
 9a8:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <Expected_TX_Length>
	Expected_RX_Length = Command_Buffer[Buffer_Index][RX_LENGTH_BYTE];
 9ac:	fd 01       	movw	r30, r26
 9ae:	81 81       	ldd	r24, Z+1	; 0x01
 9b0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Expected_RX_Length>
	
	// Set RX data index
	RX_Index = 0;
 9b4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX_Index>
	
    // Set TX data index
    TX_Index = 0;
 9b8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TX_Index>
	
	// State in TX
	In_Tx = true;
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <In_Tx>

    // Set slave select low to indicate start of transmission
    PORTA &= ~(1<<SS);
 9c2:	16 98       	cbi	0x02, 6	; 2
 9c4:	08 95       	ret

000009c6 <SPI_End_Command>:
****************************************************************************/

void SPI_End_Command (void)
{
    // Set slave select high to indicate end of transmission
    PORTA |= (1<<SS);
 9c6:	16 9a       	sbi	0x02, 6	; 2
 9c8:	08 95       	ret

000009ca <SPI_Transmit>:
****************************************************************************/

void SPI_Transmit (void)
{
    // Send byte out
    SPDR = Command_Buffer[Buffer_Index][TX_Index + LENGTH_BYTES];
 9ca:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <Buffer_Index>
 9ce:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <TX_Index>
 9d2:	82 2f       	mov	r24, r18
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	82 0f       	add	r24, r18
 9d8:	91 1d       	adc	r25, r1
 9da:	82 0f       	add	r24, r18
 9dc:	91 1d       	adc	r25, r1
 9de:	fc 01       	movw	r30, r24
 9e0:	ee 0f       	add	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	e6 57       	subi	r30, 0x76	; 118
 9e6:	fe 4f       	sbci	r31, 0xFE	; 254
 9e8:	e3 0f       	add	r30, r19
 9ea:	f1 1d       	adc	r31, r1
 9ec:	82 81       	ldd	r24, Z+2	; 0x02
 9ee:	8e bd       	out	0x2e, r24	; 46
	
	if (In_Tx)
 9f0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <In_Tx>
 9f4:	88 23       	and	r24, r24
 9f6:	31 f0       	breq	.+12     	; 0xa04 <SPI_Transmit+0x3a>
	{
		// Increment Transmit Index
		TX_Index++;		
 9f8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TX_Index>
 9fc:	8f 5f       	subi	r24, 0xFF	; 255
 9fe:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TX_Index>
 a02:	08 95       	ret
		/*
		// Increment Receive Index
		RX_Index++;
		*/
		// Increment Transmit Index
		TX_Index++;
 a04:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TX_Index>
 a08:	8f 5f       	subi	r24, 0xFF	; 255
 a0a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TX_Index>
 a0e:	08 95       	ret

00000a10 <Write_SPI>:
    Description
        Fills in current command into SPI command buffer
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
 a10:	af 92       	push	r10
 a12:	bf 92       	push	r11
 a14:	cf 92       	push	r12
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 a24:	08 2f       	mov	r16, r24
 a26:	10 e0       	ldi	r17, 0x00	; 0
 a28:	0e 5f       	subi	r16, 0xFE	; 254
 a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 a2c:	c0 91 38 01 	lds	r28, 0x0138	; 0x800138 <Next_Available_Row>
 a30:	d0 e0       	ldi	r29, 0x00	; 0
 a32:	da 01       	movw	r26, r20
 a34:	12 97       	sbiw	r26, 0x02	; 2
 a36:	7e 01       	movw	r14, r28
 a38:	ee 0c       	add	r14, r14
 a3a:	ff 1c       	adc	r15, r15
 a3c:	ec 0e       	add	r14, r28
 a3e:	fd 1e       	adc	r15, r29
 a40:	ee 0c       	add	r14, r14
 a42:	ff 1c       	adc	r15, r15
 a44:	e0 e0       	ldi	r30, 0x00	; 0
 a46:	f0 e0       	ldi	r31, 0x00	; 0
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 a48:	a7 01       	movw	r20, r14
 a4a:	46 57       	subi	r20, 0x76	; 118
 a4c:	5e 4f       	sbci	r21, 0xFE	; 254
 a4e:	5a 01       	movw	r10, r20
 a50:	6a 01       	movw	r12, r20
 a52:	5f ef       	ldi	r21, 0xFF	; 255
 a54:	c5 1a       	sub	r12, r21
 a56:	d5 0a       	sbc	r13, r21
{
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
    {
        // Fill in expected TX length
        if (i == TX_LENGTH_BYTE)
 a58:	30 97       	sbiw	r30, 0x00	; 0
 a5a:	19 f4       	brne	.+6      	; 0xa62 <Write_SPI+0x52>
        {
            Command_Buffer[Next_Available_Row][TX_LENGTH_BYTE] = TX_Length;
 a5c:	e5 01       	movw	r28, r10
 a5e:	88 83       	st	Y, r24
 a60:	0e c0       	rjmp	.+28     	; 0xa7e <Write_SPI+0x6e>
        }
        // Fill in expected RX Length
        else if (i == RX_LENGTH_BYTE)
 a62:	e1 30       	cpi	r30, 0x01	; 1
 a64:	f1 05       	cpc	r31, r1
 a66:	19 f4       	brne	.+6      	; 0xa6e <Write_SPI+0x5e>
        {
            Command_Buffer[Next_Available_Row][RX_LENGTH_BYTE] = RX_Length;
 a68:	e6 01       	movw	r28, r12
 a6a:	68 83       	st	Y, r22
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <Write_SPI+0x6e>
        }
        // Fill in remaining data to TX
        else
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
 a6e:	9c 91       	ld	r25, X
 a70:	af 01       	movw	r20, r30
 a72:	4e 0d       	add	r20, r14
 a74:	5f 1d       	adc	r21, r15
 a76:	46 57       	subi	r20, 0x76	; 118
 a78:	5e 4f       	sbci	r21, 0xFE	; 254
 a7a:	ea 01       	movw	r28, r20
 a7c:	98 83       	st	Y, r25
****************************************************************************/

void Write_SPI(uint8_t TX_Length, uint8_t RX_Length, uint8_t * Data2Write, uint8_t ** Data2Receive)
{
    // Over all columns of next available command row
    for (int i = 0; i < (LENGTH_BYTES + TX_Length); i++)
 a7e:	31 96       	adiw	r30, 0x01	; 1
 a80:	11 96       	adiw	r26, 0x01	; 1
 a82:	e0 17       	cp	r30, r16
 a84:	f1 07       	cpc	r31, r17
 a86:	44 f3       	brlt	.-48     	; 0xa58 <Write_SPI+0x48>
 a88:	36 c0       	rjmp	.+108    	; 0xaf6 <Write_SPI+0xe6>
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
        {
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
 a8a:	8d 91       	ld	r24, X+
 a8c:	9d 91       	ld	r25, X+
 a8e:	81 93       	st	Z+, r24
 a90:	91 93       	st	Z+, r25
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
    {
        for (int i = 0; i < RX_Length; i++)
 a92:	e2 17       	cp	r30, r18
 a94:	f3 07       	cpc	r31, r19
 a96:	c9 f7       	brne	.-14     	; 0xa8a <Write_SPI+0x7a>
            // Add pointers to variables that shall be updated with receive data
            Receive_List[Next_Available_Row][i] = *(Data2Receive + i);
        }
    }
    // If reached Command Buffer end
    if (Next_Available_Row == COMMAND_BUFFER_SIZE - 1)
 a98:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Next_Available_Row>
 a9c:	89 30       	cpi	r24, 0x09	; 9
 a9e:	19 f4       	brne	.+6      	; 0xaa6 <Write_SPI+0x96>
    {
        Next_Available_Row = 0;
 aa0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Next_Available_Row>
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <Write_SPI+0x9c>
    }
    else
    {
        Next_Available_Row++;
 aa6:	8f 5f       	subi	r24, 0xFF	; 255
 aa8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Next_Available_Row>
    }
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
 aac:	0e 94 80 06 	call	0xd00	; 0xd00 <Query_SPI_State>
 ab0:	81 11       	cpse	r24, r1
 ab2:	24 c0       	rjmp	.+72     	; 0xafc <Write_SPI+0xec>
    {
        Post_Event(EVT_SPI_START);
 ab4:	60 e8       	ldi	r22, 0x80	; 128
 ab6:	70 e0       	ldi	r23, 0x00	; 0
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
 ac0:	1d c0       	rjmp	.+58     	; 0xafc <Write_SPI+0xec>
 ac2:	a2 2f       	mov	r26, r18
 ac4:	b3 2f       	mov	r27, r19
 ac6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Next_Available_Row>
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	fc 01       	movw	r30, r24
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	ee 0f       	add	r30, r30
 ad4:	ff 1f       	adc	r31, r31
 ad6:	ee 0f       	add	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	e6 5c       	subi	r30, 0xC6	; 198
 adc:	fe 4f       	sbci	r31, 0xFE	; 254
 ade:	9c 01       	movw	r18, r24
 ae0:	22 0f       	add	r18, r18
 ae2:	33 1f       	adc	r19, r19
 ae4:	22 0f       	add	r18, r18
 ae6:	33 1f       	adc	r19, r19
 ae8:	26 0f       	add	r18, r22
 aea:	31 1d       	adc	r19, r1
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	26 5c       	subi	r18, 0xC6	; 198
 af2:	3e 4f       	sbci	r19, 0xFE	; 254
 af4:	ca cf       	rjmp	.-108    	; 0xa8a <Write_SPI+0x7a>
        {
            Command_Buffer[Next_Available_Row][i] = *(Data2Write + (i - LENGTH_BYTES));
        }   
    }
    // Data is expected to be received
    if (RX_Length > 0)
 af6:	61 11       	cpse	r22, r1
 af8:	e4 cf       	rjmp	.-56     	; 0xac2 <Write_SPI+0xb2>
 afa:	ce cf       	rjmp	.-100    	; 0xa98 <Write_SPI+0x88>
    // If SPI is currently idling, start transmission
    if (Query_SPI_State() == NORMAL_STATE)
    {
        Post_Event(EVT_SPI_START);
    }
}
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	1f 91       	pop	r17
 b02:	0f 91       	pop	r16
 b04:	ff 90       	pop	r15
 b06:	ef 90       	pop	r14
 b08:	df 90       	pop	r13
 b0a:	cf 90       	pop	r12
 b0c:	bf 90       	pop	r11
 b0e:	af 90       	pop	r10
 b10:	08 95       	ret

00000b12 <__vector_14>:
        Handles SPI transmission completed interrupts

****************************************************************************/

ISR(SPI_STC_vect)
{
 b12:	1f 92       	push	r1
 b14:	0f 92       	push	r0
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	0f 92       	push	r0
 b1a:	11 24       	eor	r1, r1
 b1c:	2f 93       	push	r18
 b1e:	3f 93       	push	r19
 b20:	4f 93       	push	r20
 b22:	5f 93       	push	r21
 b24:	6f 93       	push	r22
 b26:	7f 93       	push	r23
 b28:	8f 93       	push	r24
 b2a:	9f 93       	push	r25
 b2c:	af 93       	push	r26
 b2e:	bf 93       	push	r27
 b30:	ef 93       	push	r30
 b32:	ff 93       	push	r31
    if (Master_Slave_Identifier == SPI_MASTER)
 b34:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Master_Slave_Identifier>
 b38:	81 11       	cpse	r24, r1
 b3a:	83 c0       	rjmp	.+262    	; 0xc42 <__vector_14+0x130>
    {
        // Clear the SPI Interrupt Flag (is done by reading the SPSR Register)
        uint8_t SPSR_Status = SPSR;
 b3c:	8d b5       	in	r24, 0x2d	; 45
		
		// Once a transmit has been completed
		if (In_Tx)
 b3e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <In_Tx>
 b42:	88 23       	and	r24, r24
 b44:	99 f0       	breq	.+38     	; 0xb6c <__vector_14+0x5a>
		{
            // If more bytes left to transmit post transmission event
			if (TX_Index <= Expected_TX_Length)
 b46:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <TX_Index>
 b4a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Expected_TX_Length>
 b4e:	89 17       	cp	r24, r25
 b50:	58 f0       	brcs	.+22     	; 0xb68 <__vector_14+0x56>
			{
				Post_Event(EVT_SPI_SEND_BYTE);
 b52:	60 e0       	ldi	r22, 0x00	; 0
 b54:	71 e0       	ldi	r23, 0x01	; 1
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
			{
				In_Tx = false;
			}
		}
		
		if (!In_Tx)
 b5e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <In_Tx>
 b62:	81 11       	cpse	r24, r1
 b64:	6e c0       	rjmp	.+220    	; 0xc42 <__vector_14+0x130>
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <__vector_14+0x5a>
			{
				Post_Event(EVT_SPI_SEND_BYTE);
			}
			else
			{
				In_Tx = false;
 b68:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <In_Tx>
			}
		}
		
		if (!In_Tx)
		{
			*(Receive_List[Buffer_Index][RX_Index]) = SPDR;
 b6c:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <Buffer_Index>
 b70:	24 2f       	mov	r18, r20
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX_Index>
 b78:	f9 01       	movw	r30, r18
 b7a:	ee 0f       	add	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	ee 0f       	add	r30, r30
 b80:	ff 1f       	adc	r31, r31
 b82:	e8 0f       	add	r30, r24
 b84:	f1 1d       	adc	r31, r1
 b86:	ee 0f       	add	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	e6 5c       	subi	r30, 0xC6	; 198
 b8c:	fe 4f       	sbci	r31, 0xFE	; 254
 b8e:	01 90       	ld	r0, Z+
 b90:	f0 81       	ld	r31, Z
 b92:	e0 2d       	mov	r30, r0
 b94:	9e b5       	in	r25, 0x2e	; 46
 b96:	90 83       	st	Z, r25
			RX_Index++;
 b98:	8f 5f       	subi	r24, 0xFF	; 255
 b9a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RX_Index>
			
			if (RX_Index < Expected_RX_Length)
 b9e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Expected_RX_Length>
 ba2:	89 17       	cp	r24, r25
 ba4:	38 f4       	brcc	.+14     	; 0xbb4 <__vector_14+0xa2>
			{
				Post_Event(EVT_SPI_RECV_BYTE);
 ba6:	60 e0       	ldi	r22, 0x00	; 0
 ba8:	72 e0       	ldi	r23, 0x02	; 2
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
 bb2:	47 c0       	rjmp	.+142    	; 0xc42 <__vector_14+0x130>
			}
			else if (RX_Index == Expected_RX_Length)
 bb4:	89 13       	cpse	r24, r25
 bb6:	45 c0       	rjmp	.+138    	; 0xc42 <__vector_14+0x130>
static void Update_Buffer_Index(void)
{
    // Set current row of command buffer to unassigned (0xFF)
    for (int i = 0; i < MAX_COMMAND_TX_SIZE; i++)
    {
        Command_Buffer[Buffer_Index][i] = 0xFF;
 bb8:	f9 01       	movw	r30, r18
 bba:	ee 0f       	add	r30, r30
 bbc:	ff 1f       	adc	r31, r31
 bbe:	e2 0f       	add	r30, r18
 bc0:	f3 1f       	adc	r31, r19
 bc2:	ee 0f       	add	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	e6 57       	subi	r30, 0x76	; 118
 bc8:	fe 4f       	sbci	r31, 0xFE	; 254
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	80 83       	st	Z, r24
 bce:	81 83       	std	Z+1, r24	; 0x01
 bd0:	82 83       	std	Z+2, r24	; 0x02
 bd2:	83 83       	std	Z+3, r24	; 0x03
 bd4:	84 83       	std	Z+4, r24	; 0x04
 bd6:	85 83       	std	Z+5, r24	; 0x05
    }
    // Point current receive list row to NULL
    for (int i = 0; i < MAX_COMMAND_RX_SIZE; i++)
    {
        Receive_List[Buffer_Index][i] = NULL;
 bd8:	22 0f       	add	r18, r18
 bda:	33 1f       	adc	r19, r19
 bdc:	22 0f       	add	r18, r18
 bde:	33 1f       	adc	r19, r19
 be0:	22 0f       	add	r18, r18
 be2:	33 1f       	adc	r19, r19
 be4:	f9 01       	movw	r30, r18
 be6:	e6 5c       	subi	r30, 0xC6	; 198
 be8:	fe 4f       	sbci	r31, 0xFE	; 254
 bea:	11 82       	std	Z+1, r1	; 0x01
 bec:	10 82       	st	Z, r1
 bee:	13 82       	std	Z+3, r1	; 0x03
 bf0:	12 82       	std	Z+2, r1	; 0x02
 bf2:	15 82       	std	Z+5, r1	; 0x05
 bf4:	14 82       	std	Z+4, r1	; 0x04
 bf6:	17 82       	std	Z+7, r1	; 0x07
 bf8:	16 82       	std	Z+6, r1	; 0x06
    }
    // If at end of buffer
    if (Buffer_Index == COMMAND_BUFFER_SIZE - 1)
 bfa:	49 30       	cpi	r20, 0x09	; 9
 bfc:	19 f4       	brne	.+6      	; 0xc04 <__vector_14+0xf2>
    {
        Buffer_Index = 0;
 bfe:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Buffer_Index>
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <__vector_14+0xf8>
    }
    else
    {
        Buffer_Index++;
 c04:	4f 5f       	subi	r20, 0xFF	; 255
 c06:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <Buffer_Index>
    }
    // If buffer has pending transmits
    if (Command_Buffer[Buffer_Index][TX_LENGTH_BYTE] != 0xFF)
 c0a:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <Buffer_Index>
 c0e:	82 2f       	mov	r24, r18
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	82 0f       	add	r24, r18
 c14:	91 1d       	adc	r25, r1
 c16:	82 0f       	add	r24, r18
 c18:	91 1d       	adc	r25, r1
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	fc 01       	movw	r30, r24
 c20:	e6 57       	subi	r30, 0x76	; 118
 c22:	fe 4f       	sbci	r31, 0xFE	; 254
 c24:	80 81       	ld	r24, Z
 c26:	8f 3f       	cpi	r24, 0xFF	; 255
 c28:	31 f0       	breq	.+12     	; 0xc36 <__vector_14+0x124>
    {
        Post_Event(EVT_SPI_START);
 c2a:	60 e8       	ldi	r22, 0x80	; 128
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
				Post_Event(EVT_SPI_RECV_BYTE);
			}
			else if (RX_Index == Expected_RX_Length)
			{
                Update_Buffer_Index();
				Post_Event(EVT_SPI_END);
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	74 e0       	ldi	r23, 0x04	; 4
 c3a:	80 e0       	ldi	r24, 0x00	; 0
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
    }
	else
	{
		// Not configured to be slave
	}
}
 c42:	ff 91       	pop	r31
 c44:	ef 91       	pop	r30
 c46:	bf 91       	pop	r27
 c48:	af 91       	pop	r26
 c4a:	9f 91       	pop	r25
 c4c:	8f 91       	pop	r24
 c4e:	7f 91       	pop	r23
 c50:	6f 91       	pop	r22
 c52:	5f 91       	pop	r21
 c54:	4f 91       	pop	r20
 c56:	3f 91       	pop	r19
 c58:	2f 91       	pop	r18
 c5a:	0f 90       	pop	r0
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	0f 90       	pop	r0
 c60:	1f 90       	pop	r1
 c62:	18 95       	reti

00000c64 <Init_SPI_Service>:

****************************************************************************/
void Init_SPI_Service(void)
{
	// Start State Machine from normal state
	Current_State = NORMAL_STATE;
 c64:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Current_State>
 c68:	08 95       	ret

00000c6a <Run_SPI_Service>:
        Processes events for SPI Message transmit/receive

****************************************************************************/
void Run_SPI_Service(uint32_t event_mask)
{
	switch(Current_State)
 c6a:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <Current_State>
 c6e:	21 30       	cpi	r18, 0x01	; 1
 c70:	a9 f0       	breq	.+42     	; 0xc9c <Run_SPI_Service+0x32>
 c72:	18 f0       	brcs	.+6      	; 0xc7a <Run_SPI_Service+0x10>
 c74:	22 30       	cpi	r18, 0x02	; 2
 c76:	89 f1       	breq	.+98     	; 0xcda <Run_SPI_Service+0x70>
 c78:	08 95       	ret
    {	
		case NORMAL_STATE:
			if (EVT_SPI_START == event_mask)
 c7a:	60 38       	cpi	r22, 0x80	; 128
 c7c:	71 05       	cpc	r23, r1
 c7e:	81 05       	cpc	r24, r1
 c80:	91 05       	cpc	r25, r1
 c82:	e9 f5       	brne	.+122    	; 0xcfe <Run_SPI_Service+0x94>
			{			
                // Initialize SPI for particular command
                SPI_Start_Command();
 c84:	0e 94 c6 04 	call	0x98c	; 0x98c <SPI_Start_Command>
				// Switch to sending state
				Current_State = SENDING_STATE;
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Current_State>
				// Post event to initiate transition
				Post_Event(EVT_SPI_SEND_BYTE);
 c8e:	60 e0       	ldi	r22, 0x00	; 0
 c90:	71 e0       	ldi	r23, 0x01	; 1
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 0c 01 	call	0x218	; 0x218 <Post_Event>
 c9a:	08 95       	ret
                // Do Nothing
            }	
			break;
		
		case SENDING_STATE:
			if (EVT_SPI_SEND_BYTE == event_mask)
 c9c:	61 15       	cp	r22, r1
 c9e:	21 e0       	ldi	r18, 0x01	; 1
 ca0:	72 07       	cpc	r23, r18
 ca2:	81 05       	cpc	r24, r1
 ca4:	91 05       	cpc	r25, r1
 ca6:	19 f4       	brne	.+6      	; 0xcae <Run_SPI_Service+0x44>
			{
    			SPI_Transmit();
 ca8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_Transmit>
 cac:	08 95       	ret
			}
			else if (EVT_SPI_RECV_BYTE == event_mask)
 cae:	61 15       	cp	r22, r1
 cb0:	22 e0       	ldi	r18, 0x02	; 2
 cb2:	72 07       	cpc	r23, r18
 cb4:	81 05       	cpc	r24, r1
 cb6:	91 05       	cpc	r25, r1
 cb8:	31 f4       	brne	.+12     	; 0xcc6 <Run_SPI_Service+0x5c>
			{
                SPI_Transmit();
 cba:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_Transmit>
				Current_State = RECEIVING_STATE;				
 cbe:	82 e0       	ldi	r24, 0x02	; 2
 cc0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Current_State>
 cc4:	08 95       	ret
			}
			else if (EVT_SPI_END == event_mask)
 cc6:	61 15       	cp	r22, r1
 cc8:	74 40       	sbci	r23, 0x04	; 4
 cca:	81 05       	cpc	r24, r1
 ccc:	91 05       	cpc	r25, r1
 cce:	b9 f4       	brne	.+46     	; 0xcfe <Run_SPI_Service+0x94>
			{
                SPI_End_Command();
 cd0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SPI_End_Command>
				Current_State = NORMAL_STATE;
 cd4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Current_State>
 cd8:	08 95       	ret
                // Do Nothing
            }
			break;
		
		case RECEIVING_STATE:
            if (EVT_SPI_RECV_BYTE == event_mask)
 cda:	61 15       	cp	r22, r1
 cdc:	22 e0       	ldi	r18, 0x02	; 2
 cde:	72 07       	cpc	r23, r18
 ce0:	81 05       	cpc	r24, r1
 ce2:	91 05       	cpc	r25, r1
 ce4:	19 f4       	brne	.+6      	; 0xcec <Run_SPI_Service+0x82>
            {
                SPI_Transmit();
 ce6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_Transmit>
 cea:	08 95       	ret
            }
            if (EVT_SPI_END == event_mask)
 cec:	61 15       	cp	r22, r1
 cee:	74 40       	sbci	r23, 0x04	; 4
 cf0:	81 05       	cpc	r24, r1
 cf2:	91 05       	cpc	r25, r1
 cf4:	21 f4       	brne	.+8      	; 0xcfe <Run_SPI_Service+0x94>
            {
                SPI_End_Command();
 cf6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SPI_End_Command>
                Current_State = NORMAL_STATE;
 cfa:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Current_State>
 cfe:	08 95       	ret

00000d00 <Query_SPI_State>:
****************************************************************************/

SPI_State_t Query_SPI_State(void)
{
    return Current_State;
}
 d00:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Current_State>
 d04:	08 95       	ret

00000d06 <Init_Timer_Module>:

****************************************************************************/
void Start_Short_Timer(uint32_t * p_this_timer, uint32_t time_in_ms_div_ticksperms)
{
    // Start timer
    for (int i = 0; i < NUM_TIMERS; i++)
 d06:	e8 ec       	ldi	r30, 0xC8	; 200
 d08:	f1 e0       	ldi	r31, 0x01	; 1
 d0a:	ac ec       	ldi	r26, 0xCC	; 204
 d0c:	b1 e0       	ldi	r27, 0x01	; 1
 d0e:	80 e3       	ldi	r24, 0x30	; 48
 d10:	92 e0       	ldi	r25, 0x02	; 2
 d12:	11 82       	std	Z+1, r1	; 0x01
 d14:	10 82       	st	Z, r1
 d16:	13 82       	std	Z+3, r1	; 0x03
 d18:	12 82       	std	Z+2, r1	; 0x02
 d1a:	1c 92       	st	X, r1
 d1c:	15 82       	std	Z+5, r1	; 0x05
 d1e:	16 82       	std	Z+6, r1	; 0x06
 d20:	17 82       	std	Z+7, r1	; 0x07
 d22:	10 86       	std	Z+8, r1	; 0x08
 d24:	11 86       	std	Z+9, r1	; 0x09
 d26:	12 86       	std	Z+10, r1	; 0x0a
 d28:	13 86       	std	Z+11, r1	; 0x0b
 d2a:	14 86       	std	Z+12, r1	; 0x0c
 d2c:	3d 96       	adiw	r30, 0x0d	; 13
 d2e:	1d 96       	adiw	r26, 0x0d	; 13
 d30:	e8 17       	cp	r30, r24
 d32:	f9 07       	cpc	r31, r25
 d34:	71 f7       	brne	.-36     	; 0xd12 <Init_Timer_Module+0xc>
 d36:	15 bc       	out	0x25, r1	; 37
 d38:	16 bc       	out	0x26, r1	; 38
 d3a:	18 bc       	out	0x28, r1	; 40
 d3c:	88 b5       	in	r24, 0x28	; 40
 d3e:	83 58       	subi	r24, 0x83	; 131
 d40:	88 bd       	out	0x28, r24	; 40
 d42:	82 e0       	ldi	r24, 0x02	; 2
 d44:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 d48:	16 bc       	out	0x26, r1	; 38
 d4a:	86 b5       	in	r24, 0x26	; 38
 d4c:	83 60       	ori	r24, 0x03	; 3
 d4e:	86 bd       	out	0x26, r24	; 38
 d50:	08 95       	ret

00000d52 <Register_Timer>:
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	c0 91 c8 01 	lds	r28, 0x01C8	; 0x8001c8 <Timers>
 d5a:	d0 91 c9 01 	lds	r29, 0x01C9	; 0x8001c9 <Timers+0x1>
 d5e:	c8 17       	cp	r28, r24
 d60:	d9 07       	cpc	r29, r25
 d62:	09 f4       	brne	.+2      	; 0xd66 <Register_Timer+0x14>
 d64:	40 c0       	rjmp	.+128    	; 0xde6 <Register_Timer+0x94>
 d66:	a8 ec       	ldi	r26, 0xC8	; 200
 d68:	b1 e0       	ldi	r27, 0x01	; 1
 d6a:	43 e2       	ldi	r20, 0x23	; 35
 d6c:	52 e0       	ldi	r21, 0x02	; 2
 d6e:	fd 01       	movw	r30, r26
 d70:	25 85       	ldd	r18, Z+13	; 0x0d
 d72:	36 85       	ldd	r19, Z+14	; 0x0e
 d74:	28 17       	cp	r18, r24
 d76:	39 07       	cpc	r19, r25
 d78:	b1 f1       	breq	.+108    	; 0xde6 <Register_Timer+0x94>
 d7a:	3d 96       	adiw	r30, 0x0d	; 13
 d7c:	e4 17       	cp	r30, r20
 d7e:	f5 07       	cpc	r31, r21
 d80:	b9 f7       	brne	.-18     	; 0xd70 <Register_Timer+0x1e>
 d82:	2c c0       	rjmp	.+88     	; 0xddc <Register_Timer+0x8a>
 d84:	1d 96       	adiw	r26, 0x0d	; 13
 d86:	4d 91       	ld	r20, X+
 d88:	5c 91       	ld	r21, X
 d8a:	1e 97       	sbiw	r26, 0x0e	; 14
 d8c:	45 2b       	or	r20, r21
 d8e:	f9 f4       	brne	.+62     	; 0xdce <Register_Timer+0x7c>
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <Register_Timer+0x44>
 d92:	20 e0       	ldi	r18, 0x00	; 0
 d94:	30 e0       	ldi	r19, 0x00	; 0
 d96:	f9 01       	movw	r30, r18
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	e2 0f       	add	r30, r18
 d9e:	f3 1f       	adc	r31, r19
 da0:	ee 0f       	add	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	ee 0f       	add	r30, r30
 da6:	ff 1f       	adc	r31, r31
 da8:	2e 0f       	add	r18, r30
 daa:	3f 1f       	adc	r19, r31
 dac:	f9 01       	movw	r30, r18
 dae:	e8 53       	subi	r30, 0x38	; 56
 db0:	fe 4f       	sbci	r31, 0xFE	; 254
 db2:	91 83       	std	Z+1, r25	; 0x01
 db4:	80 83       	st	Z, r24
 db6:	73 83       	std	Z+3, r23	; 0x03
 db8:	62 83       	std	Z+2, r22	; 0x02
 dba:	14 82       	std	Z+4, r1	; 0x04
 dbc:	15 82       	std	Z+5, r1	; 0x05
 dbe:	16 82       	std	Z+6, r1	; 0x06
 dc0:	17 82       	std	Z+7, r1	; 0x07
 dc2:	10 86       	std	Z+8, r1	; 0x08
 dc4:	11 86       	std	Z+9, r1	; 0x09
 dc6:	12 86       	std	Z+10, r1	; 0x0a
 dc8:	13 86       	std	Z+11, r1	; 0x0b
 dca:	14 86       	std	Z+12, r1	; 0x0c
 dcc:	0c c0       	rjmp	.+24     	; 0xde6 <Register_Timer+0x94>
 dce:	2f 5f       	subi	r18, 0xFF	; 255
 dd0:	3f 4f       	sbci	r19, 0xFF	; 255
 dd2:	1d 96       	adiw	r26, 0x0d	; 13
 dd4:	28 30       	cpi	r18, 0x08	; 8
 dd6:	31 05       	cpc	r19, r1
 dd8:	a9 f6       	brne	.-86     	; 0xd84 <Register_Timer+0x32>
 dda:	05 c0       	rjmp	.+10     	; 0xde6 <Register_Timer+0x94>
 ddc:	cd 2b       	or	r28, r29
 dde:	c9 f2       	breq	.-78     	; 0xd92 <Register_Timer+0x40>
 de0:	21 e0       	ldi	r18, 0x01	; 1
 de2:	30 e0       	ldi	r19, 0x00	; 0
 de4:	cf cf       	rjmp	.-98     	; 0xd84 <Register_Timer+0x32>
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	08 95       	ret

00000dec <Start_Timer>:
 dec:	cf 92       	push	r12
 dee:	df 92       	push	r13
 df0:	ef 92       	push	r14
 df2:	ff 92       	push	r15
 df4:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <Timers>
 df8:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <Timers+0x1>
 dfc:	28 17       	cp	r18, r24
 dfe:	39 07       	cpc	r19, r25
 e00:	51 f0       	breq	.+20     	; 0xe16 <Start_Timer+0x2a>
 e02:	e8 ec       	ldi	r30, 0xC8	; 200
 e04:	f1 e0       	ldi	r31, 0x01	; 1
 e06:	21 e0       	ldi	r18, 0x01	; 1
 e08:	30 e0       	ldi	r19, 0x00	; 0
 e0a:	a5 85       	ldd	r26, Z+13	; 0x0d
 e0c:	b6 85       	ldd	r27, Z+14	; 0x0e
 e0e:	a8 17       	cp	r26, r24
 e10:	b9 07       	cpc	r27, r25
 e12:	11 f5       	brne	.+68     	; 0xe58 <Start_Timer+0x6c>
 e14:	02 c0       	rjmp	.+4      	; 0xe1a <Start_Timer+0x2e>
 e16:	20 e0       	ldi	r18, 0x00	; 0
 e18:	30 e0       	ldi	r19, 0x00	; 0
 e1a:	f9 01       	movw	r30, r18
 e1c:	ee 0f       	add	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	e2 0f       	add	r30, r18
 e22:	f3 1f       	adc	r31, r19
 e24:	ee 0f       	add	r30, r30
 e26:	ff 1f       	adc	r31, r31
 e28:	ee 0f       	add	r30, r30
 e2a:	ff 1f       	adc	r31, r31
 e2c:	2e 0f       	add	r18, r30
 e2e:	3f 1f       	adc	r19, r31
 e30:	f9 01       	movw	r30, r18
 e32:	e8 53       	subi	r30, 0x38	; 56
 e34:	fe 4f       	sbci	r31, 0xFE	; 254
 e36:	81 e0       	ldi	r24, 0x01	; 1
 e38:	84 83       	std	Z+4, r24	; 0x04
 e3a:	15 82       	std	Z+5, r1	; 0x05
 e3c:	16 82       	std	Z+6, r1	; 0x06
 e3e:	17 82       	std	Z+7, r1	; 0x07
 e40:	10 86       	std	Z+8, r1	; 0x08
 e42:	6a 01       	movw	r12, r20
 e44:	7b 01       	movw	r14, r22
 e46:	cc 0c       	add	r12, r12
 e48:	dd 1c       	adc	r13, r13
 e4a:	ee 1c       	adc	r14, r14
 e4c:	ff 1c       	adc	r15, r15
 e4e:	c1 86       	std	Z+9, r12	; 0x09
 e50:	d2 86       	std	Z+10, r13	; 0x0a
 e52:	e3 86       	std	Z+11, r14	; 0x0b
 e54:	f4 86       	std	Z+12, r15	; 0x0c
 e56:	06 c0       	rjmp	.+12     	; 0xe64 <Start_Timer+0x78>
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	3d 96       	adiw	r30, 0x0d	; 13
 e5e:	28 30       	cpi	r18, 0x08	; 8
 e60:	31 05       	cpc	r19, r1
 e62:	99 f6       	brne	.-90     	; 0xe0a <Start_Timer+0x1e>
 e64:	ff 90       	pop	r15
 e66:	ef 90       	pop	r14
 e68:	df 90       	pop	r13
 e6a:	cf 90       	pop	r12
 e6c:	08 95       	ret

00000e6e <__vector_10>:
    Description
        Handles the timer overflow interrupt

****************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 e6e:	1f 92       	push	r1
 e70:	0f 92       	push	r0
 e72:	0f b6       	in	r0, 0x3f	; 63
 e74:	0f 92       	push	r0
 e76:	11 24       	eor	r1, r1
 e78:	ef 92       	push	r14
 e7a:	ff 92       	push	r15
 e7c:	0f 93       	push	r16
 e7e:	1f 93       	push	r17
 e80:	2f 93       	push	r18
 e82:	3f 93       	push	r19
 e84:	4f 93       	push	r20
 e86:	5f 93       	push	r21
 e88:	6f 93       	push	r22
 e8a:	7f 93       	push	r23
 e8c:	8f 93       	push	r24
 e8e:	9f 93       	push	r25
 e90:	af 93       	push	r26
 e92:	bf 93       	push	r27
 e94:	cf 93       	push	r28
 e96:	df 93       	push	r29
 e98:	ef 93       	push	r30
 e9a:	ff 93       	push	r31
    //      then we will miss interrupts for ticks because they will be 
    //      disabled while we are here. Then we would have to wait for the
    //      timer to roll over which would cause time warp.

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;
 e9c:	88 b5       	in	r24, 0x28	; 40
 e9e:	83 58       	subi	r24, 0x83	; 131
 ea0:	88 bd       	out	0x28, r24	; 40
 ea2:	0c ec       	ldi	r16, 0xCC	; 204
 ea4:	11 e0       	ldi	r17, 0x01	; 1
 ea6:	c8 ec       	ldi	r28, 0xC8	; 200
 ea8:	d1 e0       	ldi	r29, 0x01	; 1
 eaa:	0f 2e       	mov	r0, r31
 eac:	f0 e3       	ldi	r31, 0x30	; 48
 eae:	ef 2e       	mov	r14, r31
 eb0:	f2 e0       	ldi	r31, 0x02	; 2
 eb2:	ff 2e       	mov	r15, r31
 eb4:	f0 2d       	mov	r31, r0
 eb6:	f8 01       	movw	r30, r16

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
    {
        if (true == Timers[i].timer_running_flag)
 eb8:	80 81       	ld	r24, Z
 eba:	88 23       	and	r24, r24
 ebc:	81 f1       	breq	.+96     	; 0xf1e <__vector_10+0xb0>
 ebe:	9e 01       	movw	r18, r28
        {
            // If the timer was started with a non zero time, service the ticks,
            //      otherwise, process the cb immediately
            if (0 < Timers[i].ticks_remaining)
 ec0:	89 85       	ldd	r24, Y+9	; 0x09
 ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
 ec4:	ab 85       	ldd	r26, Y+11	; 0x0b
 ec6:	bc 85       	ldd	r27, Y+12	; 0x0c
 ec8:	00 97       	sbiw	r24, 0x00	; 0
 eca:	a1 05       	cpc	r26, r1
 ecc:	b1 05       	cpc	r27, r1
 ece:	b9 f0       	breq	.+46     	; 0xefe <__vector_10+0x90>
            {
                // Add one to time, subtract one from ticks left
                Timers[i].ticks_since_start += 1;
 ed0:	4d 81       	ldd	r20, Y+5	; 0x05
 ed2:	5e 81       	ldd	r21, Y+6	; 0x06
 ed4:	6f 81       	ldd	r22, Y+7	; 0x07
 ed6:	78 85       	ldd	r23, Y+8	; 0x08
 ed8:	4f 5f       	subi	r20, 0xFF	; 255
 eda:	5f 4f       	sbci	r21, 0xFF	; 255
 edc:	6f 4f       	sbci	r22, 0xFF	; 255
 ede:	7f 4f       	sbci	r23, 0xFF	; 255
 ee0:	4d 83       	std	Y+5, r20	; 0x05
 ee2:	5e 83       	std	Y+6, r21	; 0x06
 ee4:	6f 83       	std	Y+7, r22	; 0x07
 ee6:	78 87       	std	Y+8, r23	; 0x08
                Timers[i].ticks_remaining -= 1;
 ee8:	01 97       	sbiw	r24, 0x01	; 1
 eea:	a1 09       	sbc	r26, r1
 eec:	b1 09       	sbc	r27, r1
 eee:	89 87       	std	Y+9, r24	; 0x09
 ef0:	9a 87       	std	Y+10, r25	; 0x0a
 ef2:	ab 87       	std	Y+11, r26	; 0x0b
 ef4:	bc 87       	std	Y+12, r27	; 0x0c
            }

            // If the timer has expired
            if (0 == Timers[i].ticks_remaining)
 ef6:	89 2b       	or	r24, r25
 ef8:	8a 2b       	or	r24, r26
 efa:	8b 2b       	or	r24, r27
 efc:	81 f4       	brne	.+32     	; 0xf1e <__vector_10+0xb0>
            {
                // Clear running flag
                Timers[i].timer_running_flag = false;
 efe:	10 82       	st	Z, r1
                
                // Execute cb function with value of id pointer's value
                // If cb is not null, execute
                if (Timers[i].timer_cb_func)
 f00:	d9 01       	movw	r26, r18
 f02:	12 96       	adiw	r26, 0x02	; 2
 f04:	ed 91       	ld	r30, X+
 f06:	fc 91       	ld	r31, X
 f08:	13 97       	sbiw	r26, 0x03	; 3
 f0a:	30 97       	sbiw	r30, 0x00	; 0
 f0c:	41 f0       	breq	.+16     	; 0xf1e <__vector_10+0xb0>
                {
                    // Execute callback
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
 f0e:	8d 91       	ld	r24, X+
 f10:	9c 91       	ld	r25, X
 f12:	dc 01       	movw	r26, r24
 f14:	6d 91       	ld	r22, X+
 f16:	7d 91       	ld	r23, X+
 f18:	8d 91       	ld	r24, X+
 f1a:	9c 91       	ld	r25, X
 f1c:	09 95       	icall
 f1e:	03 5f       	subi	r16, 0xF3	; 243
 f20:	1f 4f       	sbci	r17, 0xFF	; 255
 f22:	2d 96       	adiw	r28, 0x0d	; 13

    // Write new value into output compare reg for next tick
    OCR0A = OCR0A + OC_T0_REG_VALUE;

    // Service the running registered timers
    for (int i = 0; i < NUM_TIMERS; i++)
 f24:	ce 15       	cp	r28, r14
 f26:	df 05       	cpc	r29, r15
 f28:	31 f6       	brne	.-116    	; 0xeb6 <__vector_10+0x48>
                    Timers[i].timer_cb_func(*(Timers[i].p_timer_id));
                }
            }
        }
    }
}
 f2a:	ff 91       	pop	r31
 f2c:	ef 91       	pop	r30
 f2e:	df 91       	pop	r29
 f30:	cf 91       	pop	r28
 f32:	bf 91       	pop	r27
 f34:	af 91       	pop	r26
 f36:	9f 91       	pop	r25
 f38:	8f 91       	pop	r24
 f3a:	7f 91       	pop	r23
 f3c:	6f 91       	pop	r22
 f3e:	5f 91       	pop	r21
 f40:	4f 91       	pop	r20
 f42:	3f 91       	pop	r19
 f44:	2f 91       	pop	r18
 f46:	1f 91       	pop	r17
 f48:	0f 91       	pop	r16
 f4a:	ff 90       	pop	r15
 f4c:	ef 90       	pop	r14
 f4e:	0f 90       	pop	r0
 f50:	0f be       	out	0x3f, r0	; 63
 f52:	0f 90       	pop	r0
 f54:	1f 90       	pop	r1
 f56:	18 95       	reti

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
